[
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Database/Connection.js",
    "memberof": null,
    "longname": "lib/Database/Connection.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the database Connection class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar mongojs = require('mongojs'),\n    loader = require('nsloader');\n\nvar sDb = Symbol('Connection.db'),\n    sName = Symbol('Connection.name');\n\n/**\n * The Database connection class, used to connect to a MongoDB database.\n */\nexport default class Connection {\n\n  /**\n   * The connection class constructor.\n   *\n   * @param {String} name The unique ID of the database connection.\n   * @param {Object} config The database config object.\n   * @param {String} config.name The name of the database to use.\n   * @param {String} [config.user] The database username.\n   * @param {String} [config.pass] The database password.\n   * @param {String} [config.host='0.0.0.0'] The database host.\n   * @param {Integer} [config.port=27017] The database port.\n   */\n  constructor(name, config) {\n    'use strict';\n\n    Object.assign(config, {\n      host: '0.0.0.0',\n      port: 27017\n    });\n\n    this[sName] = name;\n    this[sDb] = mongojs(this._configToURI(config));\n\n    var me = this;\n    this[sDb].on('error', function (err) {\n      loader('EntityCI').eventManager.fire('database.connection.error', null, {\n        connection: me,\n        err: err\n      });\n    });\n\n    this[sDb].on('ready', function () {\n      loader('EntityCI').eventManager.fire('database.connection.ready', null, {\n        connection: me\n      });\n    });\n  }\n\n  /**\n   * The name of the connection.\n   *\n   * @type {String}\n   */\n  get name() {\n    'use strict';\n\n    return this[sName];\n  }\n\n  /**\n   * The mongo database connection.\n   *\n   * @type {MongoDB}\n   */\n  get database() {\n    'use strict';\n\n    return this[sDb];\n  }\n\n  /**\n   * Build a connection URI from a config bject.\n   *\n   * @param {Object} config The config object.\n   * @return {String} The generated connection URI.\n   * @private\n   */\n  _configToURI(config) {\n    'use strict';\n\n    var uri = '';\n    if (config.user) {\n      uri += config.user;\n\n      if (config.pass) {\n        uri += ':' + config.pass;\n      }\n\n      uri += '@';\n    }\n\n    uri += config.host ? config.host : '0.0.0.0';\n    if (config.port) {\n      uri += ':' + config.port;\n    }\n\n    uri += '/' + config.name;\n    return uri;\n  }\n\n  /**\n   * Get a collection from the mongo database.\n   *\n   * @param {String} collection The name of the collection to return.\n   * @returns {Collection} A mongodb collection.\n   */\n  collection(name) {\n    'use strict';\n\n    return this[sDb].collection(name);\n  }\n\n  /**\n   * Disconnects the database connection.\n   *\n   * @returns {Connection} Returns self.\n   */\n  disconnect() {\n    'use strict';\n\n    this[sDb].close();\n    return this;\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mongojs",
    "memberof": "lib/Database/Connection.js",
    "longname": "lib/Database/Connection.js~mongojs",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/Connection.js",
    "importStyle": null,
    "description": "Provides the database Connection class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sDb",
    "memberof": "lib/Database/Connection.js",
    "longname": "lib/Database/Connection.js~sDb",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/Connection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Connection",
    "memberof": "lib/Database/Connection.js",
    "longname": "lib/Database/Connection.js~Connection",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Database/Connection.js",
    "importStyle": "Connection",
    "description": "The Database connection class, used to connect to a MongoDB database.",
    "lineNumber": 30,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Database/Connection.js~Connection",
    "longname": "lib/Database/Connection.js~Connection#constructor",
    "access": null,
    "description": "The connection class constructor.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique ID of the database connection."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The database config object."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "config.name",
        "description": "The name of the database to use."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "config.user",
        "description": "The database username."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "config.pass",
        "description": "The database password."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'0.0.0.0'",
        "defaultRaw": "'0.0.0.0'",
        "name": "config.host",
        "description": "The database host."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "27017",
        "defaultRaw": 27017,
        "name": "config.port",
        "description": "The database port."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "lib/Database/Connection.js~Connection",
    "longname": "lib/Database/Connection.js~Connection#name",
    "access": null,
    "description": "The name of the connection.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "database",
    "memberof": "lib/Database/Connection.js~Connection",
    "longname": "lib/Database/Connection.js~Connection#database",
    "access": null,
    "description": "The mongo database connection.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "MongoDB"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_configToURI",
    "memberof": "lib/Database/Connection.js~Connection",
    "longname": "lib/Database/Connection.js~Connection#_configToURI",
    "access": "private",
    "description": "Build a connection URI from a config bject.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The config object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The generated connection URI."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collection",
    "memberof": "lib/Database/Connection.js~Connection",
    "longname": "lib/Database/Connection.js~Connection#collection",
    "access": null,
    "description": "Get a collection from the mongo database.",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Collection} A mongodb collection."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "The name of the collection to return."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A mongodb collection."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnect",
    "memberof": "lib/Database/Connection.js~Connection",
    "longname": "lib/Database/Connection.js~Connection#disconnect",
    "access": null,
    "description": "Disconnects the database connection.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Connection} Returns self."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Connection"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Database/Errors/EDefinedConnection.js",
    "memberof": null,
    "longname": "lib/Database/Errors/EDefinedConnection.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EDefinedConnection error which is used when attempting to create\n * an already defined connection.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sConnectionName = Symbol('EDefinedConnection.connectionName');\n\n/**\n * Thrown when tryng to use an undefined connection.\n *\n * @extends {EError}\n */\nexport default class EDefinedConnection extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the connection.\n   */\n  constructor(name) {\n    'use strict';\n\n    super();\n    this[sConnectionName] = name;\n  }\n\n  /**\n   * The connection name causing the error.\n   *\n   * @type {String}\n   */\n  get connectionName() {\n    'use strict';\n\n    return this[sConnectionName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Database/Errors/EDefinedConnection.js",
    "longname": "lib/Database/Errors/EDefinedConnection.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/Errors/EDefinedConnection.js",
    "importStyle": null,
    "description": "Provides the EDefinedConnection error which is used when attempting to create\nan already defined connection.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sConnectionName",
    "memberof": "lib/Database/Errors/EDefinedConnection.js",
    "longname": "lib/Database/Errors/EDefinedConnection.js~sConnectionName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/Errors/EDefinedConnection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EDefinedConnection",
    "memberof": "lib/Database/Errors/EDefinedConnection.js",
    "longname": "lib/Database/Errors/EDefinedConnection.js~EDefinedConnection",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Database/Errors/EDefinedConnection.js",
    "importStyle": "EDefinedConnection",
    "description": "Thrown when tryng to use an undefined connection.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Database/Errors/EDefinedConnection.js~EDefinedConnection",
    "longname": "lib/Database/Errors/EDefinedConnection.js~EDefinedConnection#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the connection."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "connectionName",
    "memberof": "lib/Database/Errors/EDefinedConnection.js~EDefinedConnection",
    "longname": "lib/Database/Errors/EDefinedConnection.js~EDefinedConnection#connectionName",
    "access": null,
    "description": "The connection name causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Database/Errors/EUndefinedConnection.js",
    "memberof": null,
    "longname": "lib/Database/Errors/EUndefinedConnection.js",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUndefinedConnection error which is used when attempting to use\n * an undefined connection.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n *\n * @module entity-ci\n * @submodule entity-ci-core\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sConnectionName = Symbol('EUndefinedConnection.connectionName');\n\n/**\n * Thrown when tryng to use an undefined connection.\n *\n * @class EUndefinedConnection\n * @extends EError\n */\nexport default class EUndefinedConnection extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the connection.\n   */\n  constructor(name) {\n    'use strict';\n\n    super();\n    this[sConnectionName] = name;\n  }\n\n  /**\n   * The connection name causing the error.\n   *\n   * @type String\n   */\n  get connectionName() {\n    'use strict';\n\n    return this[sConnectionName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Database/Errors/EUndefinedConnection.js",
    "longname": "lib/Database/Errors/EUndefinedConnection.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/Errors/EUndefinedConnection.js",
    "importStyle": null,
    "description": "Provides the EUndefinedConnection error which is used when attempting to use\nan undefined connection.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      },
      {
        "tagName": "@module",
        "tagValue": "entity-ci"
      },
      {
        "tagName": "@submodule",
        "tagValue": "entity-ci-core"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sConnectionName",
    "memberof": "lib/Database/Errors/EUndefinedConnection.js",
    "longname": "lib/Database/Errors/EUndefinedConnection.js~sConnectionName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/Errors/EUndefinedConnection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUndefinedConnection",
    "memberof": "lib/Database/Errors/EUndefinedConnection.js",
    "longname": "lib/Database/Errors/EUndefinedConnection.js~EUndefinedConnection",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Database/Errors/EUndefinedConnection.js",
    "importStyle": "EUndefinedConnection",
    "description": "Thrown when tryng to use an undefined connection.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EUndefinedConnection"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Database/Errors/EUndefinedConnection.js~EUndefinedConnection",
    "longname": "lib/Database/Errors/EUndefinedConnection.js~EUndefinedConnection#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the connection."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "connectionName",
    "memberof": "lib/Database/Errors/EUndefinedConnection.js~EUndefinedConnection",
    "longname": "lib/Database/Errors/EUndefinedConnection.js~EUndefinedConnection#connectionName",
    "access": null,
    "description": "The connection name causing the error.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Database/index.js",
    "memberof": null,
    "longname": "lib/Database/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Database class managing connections.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    Connection = loader('EntityCI/Database/Connection'),\n    EUndefinedConnection = loader(\n      'EntityCI/Database/Errors/EUndefinedConnection'\n    ),\n    EDefinedConnection = loader('EntityCI/Database/Errors/EDefinedConnection');\n\nvar sDefaultConnection = Symbol('Database.defaultConnection'),\n    sConnections = Symbol('Database.connections');\n\n/**\n * The database manager allows setting up multiple MongoDB connections.\n */\nexport default class Database {\n\n  /**\n   * The class constructor.\n   */\n  constructor() {\n    'use strict';\n\n    this[sDefaultConnection] = '';\n    this[sConnections] = {};\n  }\n\n  /**\n   * The default connection name.\n   *\n   * @type {String}\n   */\n  get defaultConnection() {\n    'use strict';\n\n    return this[sDefaultConnection];\n  }\n\n  /**\n   * The default connection name.\n   *\n   * @type {String}\n   */\n  set defaultConnection(name) {\n    'use strict';\n\n    if (!this[sConnections][name]) {\n      throw new EUndefinedConnection(name);\n    }\n\n    this[sDefaultConnection] = name;\n  }\n\n  /**\n   * Get a list of the defined connection names.\n   *\n   * @type {Array}\n   */\n  get connections() {\n    'use strict';\n\n    return Object.keys(this[sConnections]);\n  }\n\n  /**\n   * Connect to a database.\n   *\n   * @param {String} name The name to give the connection.\n   * @param {Object} config The database connection config.\n   * @param {Boolean} [def=false] Make this the default connection.\n   * @return {Database} Returns self.\n   * @throws {EDefinedConnection} Thrown if the connection has already been\n   *   defined.\n   */\n  connect(name, config, def) {\n    'use strict';\n\n    if (this[sConnections][name] !== undefined) {\n      throw new EDefinedConnection(name);\n    }\n\n    if (Object.keys(this[sConnections]).length === 0) {\n      def = true;\n    }\n\n    this[sConnections][name] = new Connection(name, config);\n    if (def === true) {\n      this[sDefaultConnection] = name;\n    }\n\n    return this;\n  }\n\n  /**\n   * Disconnect and destroys the specified connection.\n   *\n   * @param {String} [name] The connection name, if not specified the default\n   *   connection name is used.\n   * @return {Database} Returns self.\n   * @throws {EUndefinedConnection} Thrown if the connection doesnt exist.\n   */\n  disconnect(name) {\n    'use strict';\n\n    name = name || this.defaultConnection;\n\n    if (this[sConnections][name] === undefined) {\n      throw new EUndefinedConnection(name);\n    }\n\n    this[sConnections][name].disconnect();\n    delete this[sConnections][name];\n\n    if (this[sDefaultConnection] === name) {\n      this[sDefaultConnection] = '';\n    }\n\n    return this;\n  }\n\n  /**\n   * Get the defined connection.\n   *\n   * @param {String} [name] The connection name, if not provided the default\n   *   connection name is assumed.\n   * @return {Connection} The connection.\n   * @throws {EUndefinedConnection} Thrown if the connection hasnt been defined.\n   */\n  connection(name) {\n    'use strict';\n\n    name = name || this.defaultConnection;\n    if (this[sConnections][name] === undefined) {\n      throw new EUndefinedConnection(name);\n    }\n\n    return this[sConnections][name];\n  }\n\n  /**\n   * Gets a mongo collection.\n   *\n   * @param {String} name The name of the collection to return.\n   * @param {String} [connection] The name of the collection, if not provided\n   *   the default connection will be used.\n   * @return {Collection} Returns a mongodb collection.\n   * @throws {EUndefinedConnection} Thrown if the connection is undefined.\n   */\n  collection(name, connection) {\n    'use strict';\n\n    connection = connection || this.defaultConnection;\n    if (this[sConnections][connection] === undefined) {\n      throw new EUndefinedConnection(connection);\n    }\n\n    return this[sConnections][connection].collection(name);\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Database/index.js",
    "longname": "lib/Database/index.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/index.js",
    "importStyle": null,
    "description": "Provides the Database class managing connections.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sDefaultConnection",
    "memberof": "lib/Database/index.js",
    "longname": "lib/Database/index.js~sDefaultConnection",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Database/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Database",
    "memberof": "lib/Database/index.js",
    "longname": "lib/Database/index.js~Database",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Database/index.js",
    "importStyle": "Database",
    "description": "The database manager allows setting up multiple MongoDB connections.",
    "lineNumber": 34,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#constructor",
    "access": null,
    "description": "The class constructor.",
    "lineNumber": 39,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "defaultConnection",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#defaultConnection",
    "access": null,
    "description": "The default connection name.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "defaultConnection",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#defaultConnection",
    "access": null,
    "description": "The default connection name.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "connections",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#connections",
    "access": null,
    "description": "Get a list of the defined connection names.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connect",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#connect",
    "access": null,
    "description": "Connect to a database.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to give the connection."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The database connection config."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "def",
        "description": "Make this the default connection."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "throws": [
      {
        "types": [
          "EDefinedConnection"
        ],
        "description": "Thrown if the connection has already been\n  defined."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnect",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#disconnect",
    "access": null,
    "description": "Disconnect and destroys the specified connection.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "The connection name, if not specified the default\n  connection name is used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "throws": [
      {
        "types": [
          "EUndefinedConnection"
        ],
        "description": "Thrown if the connection doesnt exist."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connection",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#connection",
    "access": null,
    "description": "Get the defined connection.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "The connection name, if not provided the default\n  connection name is assumed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Connection"
      ],
      "spread": false,
      "description": "The connection."
    },
    "throws": [
      {
        "types": [
          "EUndefinedConnection"
        ],
        "description": "Thrown if the connection hasnt been defined."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collection",
    "memberof": "lib/Database/index.js~Database",
    "longname": "lib/Database/index.js~Database#collection",
    "access": null,
    "description": "Gets a mongo collection.",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the collection to return."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "connection",
        "description": "The name of the collection, if not provided\n  the default connection will be used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "Returns a mongodb collection."
    },
    "throws": [
      {
        "types": [
          "EUndefinedConnection"
        ],
        "description": "Thrown if the connection is undefined."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EError.js",
    "memberof": null,
    "longname": "lib/EError.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EError class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar sName = Symbol('EError.name'),\n    sStack = Symbol('EError.stack');\n\n/**\n * Provides an abstract Error class to be overriden.\n *\n * @extends {Error}\n */\nexport default class EError extends Error {\n\n  /**\n   * The error constructor.\n   */\n  constructor() {\n    'use strict';\n\n    super();\n\n    this[sName] = this.constructor.name;\n    this[sStack] = (new Error()).stack;\n  }\n\n  /**\n   * Get the errors constructor name.\n   *\n   * @type {String}\n   */\n  get name() {\n    'use strict';\n\n    return this[sName];\n  }\n\n  /**\n   * Get the errors stack.\n   *\n   * @type {Object}\n   */\n  get stack() {\n    'use strict';\n\n    return this[sStack];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sName",
    "memberof": "lib/EError.js",
    "longname": "lib/EError.js~sName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EError.js",
    "importStyle": null,
    "description": "Provides the EError class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EError",
    "memberof": "lib/EError.js",
    "longname": "lib/EError.js~EError",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EError.js",
    "importStyle": "EError",
    "description": "Provides an abstract Error class to be overriden.",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EError.js~EError",
    "longname": "lib/EError.js~EError#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 34,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "lib/EError.js~EError",
    "longname": "lib/EError.js~EError#name",
    "access": null,
    "description": "Get the errors constructor name.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "stack",
    "memberof": "lib/EError.js~EError",
    "longname": "lib/EError.js~EError#stack",
    "access": null,
    "description": "Get the errors stack.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/BaseEntity.js",
    "memberof": null,
    "longname": "lib/EntityManager/BaseEntity.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the BaseEntity class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    EMissingMachineName = loader(\n      'EntityCI/EntityManager/Errors/EMissingMachineName'\n    ),\n    EMachineNameExists = loader(\n      'EntityCI/EntityManager/Errors/EMachineNameExists'\n    ),\n    ECantFindEntity = loader(\n      'EntityCI/EntityManager/Errors/ECantFindEntity'\n    );\n\nvar sMachineName = Symbol('BaseEntity.machineName'),\n    sCreatedOn = Symbol('BaseEntity.createdOn'),\n    sCreatedBy = Symbol('BaseEntity.createdBy'),\n    sUpdatedOn = Symbol('BaseEntity.updatedOn'),\n    sUpdatedBy = Symbol('BaseEntity.updatedBy'),\n    sManager = Symbol('BaseEntity.manager'),\n    sIsNew = Symbol.for('BaseEntity.isNew'),\n    sIsUpdated = Symbol.for('BaseEntity.isUpdated'),\n    sIsTrashed = Symbol.for('BaseEntity.isTrashed'),\n    sIsRenaming = Symbol.for('BaseEntity.isRenaming'),\n    sId = Symbol('BaseEntity.id');\n\n/**\n * The base entity class.\n */\nexport default class BaseEntity {\n\n  /**\n   * The base entity constructor.\n   *\n   * @param {EntityManager} manager The entity manager.\n   */\n  constructor(manager) {\n    'use strict';\n\n    this[sManager] = manager;\n\n    this[sMachineName] = null;\n    this[sId] = null;\n    this[sIsNew] = true;\n    this[sIsUpdated] = false;\n    this[sIsTrashed] = false;\n    this[sIsRenaming] = false;\n\n    var on = Date.now();\n    this[sCreatedOn] = on;\n    this[sCreatedBy] = null;\n    this[sUpdatedOn] = on;\n    this[sUpdatedBy] = null;\n  }\n\n  /**\n   * Get the database collection name.\n   *\n   * @return {String} The collection name.\n   */\n  collectionName() {\n    'use strict';\n\n    throw new Error(); // @todo\n  }\n\n  /**\n   * Get the entity manager.\n   *\n   * @type {EntityManager}\n   */\n  get manager() {\n    'use strict';\n\n    return this[sManager];\n  }\n\n  /**\n   * Get the database collection.\n   *\n   * @type {MongoDB#Collection}\n   */\n  get collection() {\n    'use strict';\n\n    var collectionName = this.collectionName();\n    return this[sManager].database.collection(collectionName);\n  }\n\n  /**\n   * Determine if this is new.\n   *\n   * @type {Boolean}\n   */\n  get isNew() {\n    'use strict';\n\n    return this[sIsNew];\n  }\n\n  /**\n   * Determine if this has been updated but not yet saved.\n   *\n   * @type {Boolean}\n   */\n  get isUpdated() {\n    'use strict';\n\n    return this[sIsUpdated];\n  }\n\n  /**\n   * Determine if this has been trashed (ie. in the trash can).\n   *\n   * @type {Boolean}\n   */\n  get isTrashed() {\n    'use strict';\n\n    return this[sIsTrashed];\n  }\n\n  /**\n   * Determine if this will be renamed upon saving.\n   *\n   * @type {Boolean}\n   */\n  get isRenaming() {\n    'use strict';\n\n    return this[sIsRenaming];\n  }\n\n  /**\n   * Get the MongoDB document ID.\n   *\n   * @type {String}\n   */\n  get id() {\n    'use strict';\n\n    return this[sId];\n  }\n\n  /**\n   * Get the machine name.\n   *\n   * @type {String}\n   */\n  get machineName() {\n    'use strict';\n\n    return this[sMachineName];\n  }\n\n  /**\n   * Set the machine name.\n   *\n   * @type {String}\n   */\n  set machineName(value) {\n    'use strict';\n\n    if (this[sMachineName] !== value) {\n      this[sIsUpdated] = true;\n      this[sMachineName] = value;\n    }\n  }\n\n  /**\n   * When this was created.\n   *\n   * @type {Date}\n   */\n  get createdOn() {\n    'use strict';\n\n    return this[sCreatedOn];\n  }\n\n  /**\n   * Who created this.\n   *\n   * @type {String}\n   */\n  get createdBy() {\n    'use strict';\n\n    return this[sCreatedBy];\n  }\n\n  /**\n   * When this was updated.\n   *\n   * @type {Date}\n   */\n  get updatedOn() {\n    'use strict';\n\n    return this[sUpdatedOn];\n  }\n\n  /**\n   * Who updated this.\n   *\n   * @type {String}\n   */\n  get updatedBy() {\n    'use strict';\n\n    return this[sUpdatedBy];\n  }\n\n  /**\n   * Set the base entity values from a loaded doc object.\n   *\n   * @param {Object} doc The MongoDB document.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _docToEntity(doc, done) {\n    'use strict';\n\n    this[sId] = doc._id;\n    this[sMachineName] = doc.machineName;\n    this[sCreatedOn] = doc.createdOn;\n    this[sCreatedBy] = doc.createdBy;\n    this[sUpdatedOn] = doc.updatedOn;\n    this[sUpdatedBy] = doc.updatedBy;\n\n    done();\n  }\n\n  /**\n   * Create a MongoDB document from this base entity.\n   *\n   * @param {String} [by='system'] Who/What is performing this action.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Object} done.doc A generated MongoDB document.\n   * @private\n   */\n  _entityToDoc(by, done) {\n    'use strict';\n\n    var doc = {},\n        on = Date.now();\n\n    by = by || 'system';\n\n    if (this[sId]) {\n      doc._id = this[sId];\n    }\n\n    doc.machineName = this[sMachineName];\n    doc.createdOn = this[sCreatedOn] || on;\n    doc.createdBy = this[sCreatedBy] || by;\n    doc.updatedOn = on;\n    doc.updatedBy = by;\n\n    done(null, doc);\n  }\n\n  /**\n   * Private helper to set the entity from a doc and set other properties.\n   *\n   * @param {Object} doc The MongoDB document.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _setDoc(doc, done) {\n    'use strict';\n\n    this[sIsNew] = false;\n    this[sIsUpdated] = false;\n    this._docToEntity(doc, done);\n  }\n\n  /**\n   * Sanitizes the values prior to saving.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _sanitize(done) {\n    'use strict';\n\n    var me = this;\n    this[sManager].sanitizers.sanitize(function (err, orig, value) {\n      if (err) {\n        return done(err);\n      }\n\n      me[sMachineName] = value;\n      done();\n    }, 'trim', this[sMachineName]);\n  }\n\n  /**\n   * Validates the properties of this base entity before saving.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  validate(done) {\n    'use strict';\n\n    if (!this[sMachineName] || this[sMachineName] === '') {\n      return done(new EMissingMachineName());\n    }\n\n    this[sManager].validators.validate(function (err) {\n      done(err);\n    }, 'machine-name', this[sMachineName]);\n  }\n\n  /**\n   * Save the entity to the database.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {String} [by='system'] Who is saving the entity.\n   */\n  save(done, by) {\n    'use strict';\n\n    var me = this,\n        doc,\n        queue = [];\n\n    queue.push(function (next) {\n      me._sanitize(next);\n    });\n\n    queue.push(function (next) {\n      me.validate(next);\n    });\n\n    queue.push(function (next) {\n      me._entityToDoc(by, function (err, d) {\n        if (err) {\n          return next(err);\n        }\n\n        doc = d;\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      me.collection.count({\n        machineName: me[sMachineName]\n      }, function (err, count) {\n        if (err) {\n          return next(err);\n        }\n\n        next(count > 0 ? new EMachineNameExists(me[sMachineName]) : null);\n      });\n    });\n\n    queue.push(function (next) {\n      me.collection.save(doc, function (err, d) {\n        if (err) {\n          return next(err);\n        }\n\n        doc = d;\n        next();\n      });\n    });\n\n    if (this[sIsTrashed]) {\n      queue.push(function (next) {\n        me[sManager].trashCollection.remove({\n          machineName: me[sMachineName]\n        }, function (err) {\n          if (err) {\n            return next(err);\n          }\n\n          me[sIsTrashed] = false;\n          next();\n        });\n      });\n    }\n\n    async.series(queue, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      me[sIsRenaming] = false;\n      me[sIsNew] = false;\n      me[sIsUpdated] = false;\n      me[sId] = doc._id;\n\n      done(null);\n    });\n  }\n\n  /**\n   * Load the base entity from the database.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Object} [conditions] Any conditions for loading, if not provided\n   *   then the machine name is used (if available).\n   * @throws {Error} Thrown if the conditions is empty and a machine name is not\n   *   available.\n   */\n  load(done, machineName) {\n    'use strict';\n\n    machineName = machineName || this[sMachineName];\n    if (!machineName) {\n      return done(new EMissingMachineName());\n    }\n\n    var me = this,\n        doc = null,\n        queue = [];\n\n    queue.push(function (next) {\n      me.collection.findOne({\n        machineName: machineName\n      }, function (err, d) {\n        if (err) {\n          return next(err);\n        }\n\n        doc = d || null;\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      if (doc) {\n        return next();\n      }\n\n      me[sManager].trashCollection.findOne({\n        collection: me.collectionName(),\n        machineName: machineName\n      }, function (err, d) {\n        if (err) {\n          return next(err);\n        }\n\n        doc = d || null;\n        me[sIsTrashed] = doc !== null;\n\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      if (!doc) {\n        return next(new ECantFindEntity(me.collectionName(), machineName));\n      }\n\n      me._setDoc(doc, next);\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Trash or delete the entity.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @parma {String] [by='system'] Who is deleting the entity.\n   * @param {Boolean} [permanently=false] Set to true to not trash but to\n   *   permanently delete the entity.\n   */\n  delete(done, by, permanently) {\n    'use strict';\n\n    if (!this[sMachineName]) {\n      return done(new EMissingMachineName());\n    }\n\n    var me = this,\n        trashed = this[sIsTrashed] === true,\n        queue = [];\n\n    permanently = trashed ? true : permanently || false;\n    if (permanently !== true) {\n      var doc = null;\n\n      if (this[sIsNew] || this[sIsUpdated]) {\n        queue.push(function (next) {\n          me.load(next);\n        });\n      }\n\n      queue.push(function (next) {\n        me._entityToDoc(by, function (err, d) {\n          if (err) {\n            return next(err);\n          }\n\n          delete d._id;\n          delete d.machineName;\n\n          doc = {\n            collection: me.collectionName(),\n            machineName: me[sMachineName],\n            doc: d\n          };\n\n          next();\n        });\n      });\n\n      queue.push(function (next) {\n        me[sManager].trashCollection.save(doc, function (err, d) {\n          if (err) {\n            return next(err);\n          }\n\n          me[sIsTrashed] = true;\n          me[sId] = d._id;\n\n          next(null);\n        });\n      });\n    }\n\n    if (trashed === true) {\n      queue.push(function (next) {\n        me[sManager].trashCollection.remove({\n          collection: me.collectionName(),\n          machineName: me[sMachineName]\n        }, next);\n      });\n    } else {\n      queue.push(function (next) {\n        me.collection.remove({\n          machineName: me[sMachineName]\n        }, next);\n      });\n    }\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/EntityManager/BaseEntity.js",
    "longname": "lib/EntityManager/BaseEntity.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/BaseEntity.js",
    "importStyle": null,
    "description": "Provides the BaseEntity class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sMachineName",
    "memberof": "lib/EntityManager/BaseEntity.js",
    "longname": "lib/EntityManager/BaseEntity.js~sMachineName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/BaseEntity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseEntity",
    "memberof": "lib/EntityManager/BaseEntity.js",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/BaseEntity.js",
    "importStyle": "BaseEntity",
    "description": "The base entity class.",
    "lineNumber": 48,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#constructor",
    "access": null,
    "description": "The base entity constructor.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "EntityManager"
        ],
        "spread": false,
        "optional": false,
        "name": "manager",
        "description": "The entity manager."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collectionName",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#collectionName",
    "access": null,
    "description": "Get the database collection name.",
    "lineNumber": 79,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The collection name."
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "manager",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#manager",
    "access": null,
    "description": "Get the entity manager.",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "EntityManager"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "collection",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#collection",
    "access": null,
    "description": "Get the database collection.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "MongoDB#Collection"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isNew",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#isNew",
    "access": null,
    "description": "Determine if this is new.",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isUpdated",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#isUpdated",
    "access": null,
    "description": "Determine if this has been updated but not yet saved.",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isTrashed",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#isTrashed",
    "access": null,
    "description": "Determine if this has been trashed (ie. in the trash can).",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isRenaming",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#isRenaming",
    "access": null,
    "description": "Determine if this will be renamed upon saving.",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#id",
    "access": null,
    "description": "Get the MongoDB document ID.",
    "lineNumber": 157,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "machineName",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#machineName",
    "access": null,
    "description": "Get the machine name.",
    "lineNumber": 168,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "machineName",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#machineName",
    "access": null,
    "description": "Set the machine name.",
    "lineNumber": 179,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "createdOn",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#createdOn",
    "access": null,
    "description": "When this was created.",
    "lineNumber": 193,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "createdBy",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#createdBy",
    "access": null,
    "description": "Who created this.",
    "lineNumber": 204,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "updatedOn",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#updatedOn",
    "access": null,
    "description": "When this was updated.",
    "lineNumber": 215,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "updatedBy",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#updatedBy",
    "access": null,
    "description": "Who updated this.",
    "lineNumber": 226,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_docToEntity",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#_docToEntity",
    "access": "private",
    "description": "Set the base entity values from a loaded doc object.",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "The MongoDB document."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_entityToDoc",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#_entityToDoc",
    "access": "private",
    "description": "Create a MongoDB document from this base entity.",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system'",
        "defaultRaw": "'system'",
        "name": "by",
        "description": "Who/What is performing this action."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "done.doc",
        "description": "A generated MongoDB document."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_setDoc",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#_setDoc",
    "access": "private",
    "description": "Private helper to set the entity from a doc and set other properties.",
    "lineNumber": 291,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "The MongoDB document."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_sanitize",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#_sanitize",
    "access": "private",
    "description": "Sanitizes the values prior to saving.",
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#validate",
    "access": null,
    "description": "Validates the properties of this base entity before saving.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#save",
    "access": null,
    "description": "Save the entity to the database.",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system'",
        "defaultRaw": "'system'",
        "name": "by",
        "description": "Who is saving the entity."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#load",
    "access": null,
    "description": "Load the base entity from the database.",
    "lineNumber": 433,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conditions",
        "description": "Any conditions for loading, if not provided\n  then the machine name is used (if available)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Thrown if the conditions is empty and a machine name is not\n  available."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "lib/EntityManager/BaseEntity.js~BaseEntity",
    "longname": "lib/EntityManager/BaseEntity.js~BaseEntity#delete",
    "access": null,
    "description": "Trash or delete the entity.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@parma",
        "tagValue": "{String] [by='system'] Who is deleting the entity."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "permanently",
        "description": "Set to true to not trash but to\n  permanently delete the entity."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Entity.js",
    "memberof": null,
    "longname": "lib/EntityManager/Entity.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Entity class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    BaseEntity = loader('EntityCI/EntityManager/BaseEntity'),\n    EUnknownSchemaField = loader(\n      'EntityCI/EntityManager/Errors/EUnknownSchemaField'\n    );\n\nvar sSchema = Symbol('Entity.schema'),\n    sSubtype = Symbol('Entity.subtype'),\n    sFieldData = Symbol.for('Entity.fieldData');\n\n/**\n * The entity class.\n *\n * @extends {BaseEntity}\n */\nexport default class Entity extends BaseEntity {\n\n  /**\n   * The entity constructor.\n   *\n   * @param {EntityManager} manager The entity manager.\n   * @param {Schema} schema The entity schema object.\n   * @param {String} [subtype] A subtype of the entity type.\n   */\n  constructor(manager, schema, subtype) {\n    'use strict';\n\n    super(manager);\n\n    this[sSchema] = schema;\n    this[sSubtype] = subtype;\n    this[sFieldData] = {};\n  }\n\n  /**\n   * @override\n   */\n  collectionName() {\n    'use strict';\n\n    return this[sSchema].entityCollectionName();\n  }\n\n  /**\n   * Get the entity type of this entity.\n   *\n   * @type {String}\n   */\n  get type() {\n    'use strict';\n\n    return this[sSchema].machineName;\n  }\n\n  /**\n   * Get the entity subtype.\n   *\n   * @type {String}\n   */\n  get subtype() {\n    'use strict';\n\n    return this[sSubtype];\n  }\n\n  /**\n   * @override\n   */\n  _docToEntity(doc, done) {\n    'use strict';\n\n    var me = this;\n    super._docToEntity(doc, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      var queue = [];\n\n      function subload(field, type, machineName) {\n        return function (next) {\n          me.manager.load(type, machineName, function (err, entity) {\n            if (err) {\n              return next(err);\n            }\n\n            me[sFieldData][field] = entity;\n            next();\n          });\n        };\n      }\n\n      me[sSubtype] = doc.subtype;\n      me[sFieldData] = doc.fieldData || {};\n\n      for (var field in me[sFieldData]) {\n        if (\n          me[sFieldData][field].type &&\n          me[sFieldData][field].machineName\n        ) {\n          queue.push(subload(\n            field,\n            me[sFieldData][field].type,\n            me[sFieldData][field].machineName\n          ));\n        }\n      }\n\n      async.series(queue, function (err) {\n        done(err ? err : null);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  _entityToDoc(by, done) {\n    'use strict';\n\n    var me = this;\n    super._entityToDoc(by, function (err, doc) {\n      if (err) {\n        return done(err);\n      }\n\n      doc.type = me[sSchema].machineName;\n      doc.subtype = me[sSubtype];\n\n      doc.fieldData = {};\n      for (var field in me[sFieldData]) {\n        if (me[sFieldData][field] instanceof Entity) {\n          doc.fieldData[field] = {\n            type: me[sFieldData][field].type,\n            subtype: me[sFieldData][field].subtype,\n            machineName: me[sFieldData][field].machineName\n          };\n        } else {\n          doc.fieldData[field] = me[sFieldData][field];\n        }\n      }\n\n      done(null, doc);\n    });\n  }\n\n  /**\n   * Get a field value.\n   *\n   * @param {String} field The name of the field.\n   * @return {Mixed} The fields value.\n   * @throws {EUnknownSchemaField} If the field is not defined in the schema.\n   */\n  get(field) {\n    'use strict';\n\n    if (this[sSchema].hasField(field) === false) {\n      throw new EUnknownSchemaField(field);\n    }\n\n    if (this[sFieldData][field] !== undefined) {\n      return this[sFieldData][field];\n    }\n\n    var config = this[sSchema].getField(field);\n    if (config.options['default'] !== undefined) {\n      return config.options['default'];\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets a field value.\n   *\n   * @param {String} field The name of the field.\n   * @param {Mixed} value The value to set the field.\n   * @return {Entity} Returns self.\n   * @throws {EUnknownSchemaField} If the field is not defined in the schema.\n   */\n  set(field, value) {\n    'use strict';\n\n    if (this[sSchema].hasField(field) === false) {\n      throw new EUnknownSchemaField(field);\n    }\n\n    this[sFieldData][field] = value;\n    return this;\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/EntityManager/Entity.js",
    "longname": "lib/EntityManager/Entity.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Entity.js",
    "importStyle": null,
    "description": "Provides the Entity class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sSchema",
    "memberof": "lib/EntityManager/Entity.js",
    "longname": "lib/EntityManager/Entity.js~sSchema",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Entity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Entity",
    "memberof": "lib/EntityManager/Entity.js",
    "longname": "lib/EntityManager/Entity.js~Entity",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Entity.js",
    "importStyle": "Entity",
    "description": "The entity class.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "BaseEntity"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#constructor",
    "access": null,
    "description": "The entity constructor.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "EntityManager"
        ],
        "spread": false,
        "optional": false,
        "name": "manager",
        "description": "The entity manager."
      },
      {
        "nullable": null,
        "types": [
          "Schema"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "The entity schema object."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "subtype",
        "description": "A subtype of the entity type."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collectionName",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#collectionName",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#type",
    "access": null,
    "description": "Get the entity type of this entity.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "subtype",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#subtype",
    "access": null,
    "description": "Get the entity subtype.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_docToEntity",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#_docToEntity",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "params": [
      {
        "name": "doc",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_entityToDoc",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#_entityToDoc",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "params": [
      {
        "name": "by",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#get",
    "access": null,
    "description": "Get a field value.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The name of the field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Mixed"
      ],
      "spread": false,
      "description": "The fields value."
    },
    "throws": [
      {
        "types": [
          "EUnknownSchemaField"
        ],
        "description": "If the field is not defined in the schema."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "lib/EntityManager/Entity.js~Entity",
    "longname": "lib/EntityManager/Entity.js~Entity#set",
    "access": null,
    "description": "Sets a field value.",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The name of the field."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set the field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "throws": [
      {
        "types": [
          "EUnknownSchemaField"
        ],
        "description": "If the field is not defined in the schema."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/ECantFindEntity.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the ECantFindEntity error which is used when attempting to load an\n * entity which doesnt exist.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sCollection = Symbol('ECantFindEntity.collection'),\n    sMachineName = Symbol('ECantFindEntity.machineName');\n\n/**\n * Thrown when loading an entity which doesnt exist.\n *\n * @extends {EError}\n */\nexport default class ECantFindEntity extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} collection The collection name.\n   * @param {String} machineName The machine name being used.\n   */\n  constructor(collection, machineName) {\n    'use strict';\n\n    super();\n    this[sCollection] = collection;\n    this[sMachineName] = machineName;\n  }\n\n  /**\n   * The collection name of the entity.\n   *\n   * @type {String}\n   */\n  get collection() {\n    'use strict';\n\n    return this[sCollection];\n  }\n\n  /**\n   * The machine name used to attempt to load with.\n   *\n   * @type {String}\n   */\n  get machineName() {\n    'use strict';\n\n    return this[sMachineName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/ECantFindEntity.js",
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/ECantFindEntity.js",
    "importStyle": null,
    "description": "Provides the ECantFindEntity error which is used when attempting to load an\nentity which doesnt exist.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sCollection",
    "memberof": "lib/EntityManager/Errors/ECantFindEntity.js",
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js~sCollection",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/ECantFindEntity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ECantFindEntity",
    "memberof": "lib/EntityManager/Errors/ECantFindEntity.js",
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/ECantFindEntity.js",
    "importStyle": "ECantFindEntity",
    "description": "Thrown when loading an entity which doesnt exist.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity",
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "The collection name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "machineName",
        "description": "The machine name being used."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "collection",
    "memberof": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity",
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity#collection",
    "access": null,
    "description": "The collection name of the entity.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "machineName",
    "memberof": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity",
    "longname": "lib/EntityManager/Errors/ECantFindEntity.js~ECantFindEntity#machineName",
    "access": null,
    "description": "The machine name used to attempt to load with.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/EFailedEntity.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/EFailedEntity.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EFailedEntity error which is used when attempting to validate\n * an entity which doesnt match its options.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sOption = Symbol('EFailedEntity.option');\n\n/**\n * Thrown when validating an entity which fails the validation options.\n *\n * @extends {EError}\n */\nexport default class EFailedEntity extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} option The name of the failing option.\n   */\n  constructor(option) {\n    'use strict';\n\n    super();\n    this[sOption] = option;\n  }\n\n  /**\n   * The option causing the error.\n   *\n   * @type {String}\n   */\n  get option() {\n    'use strict';\n\n    return this[sOption];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/EFailedEntity.js",
    "longname": "lib/EntityManager/Errors/EFailedEntity.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EFailedEntity.js",
    "importStyle": null,
    "description": "Provides the EFailedEntity error which is used when attempting to validate\nan entity which doesnt match its options.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sOption",
    "memberof": "lib/EntityManager/Errors/EFailedEntity.js",
    "longname": "lib/EntityManager/Errors/EFailedEntity.js~sOption",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EFailedEntity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EFailedEntity",
    "memberof": "lib/EntityManager/Errors/EFailedEntity.js",
    "longname": "lib/EntityManager/Errors/EFailedEntity.js~EFailedEntity",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EFailedEntity.js",
    "importStyle": "EFailedEntity",
    "description": "Thrown when validating an entity which fails the validation options.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Errors/EFailedEntity.js~EFailedEntity",
    "longname": "lib/EntityManager/Errors/EFailedEntity.js~EFailedEntity#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": "The name of the failing option."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "option",
    "memberof": "lib/EntityManager/Errors/EFailedEntity.js~EFailedEntity",
    "longname": "lib/EntityManager/Errors/EFailedEntity.js~EFailedEntity#option",
    "access": null,
    "description": "The option causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/EInvalidEntity.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/EInvalidEntity.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EInvalidEntity error which is used when attempting to validate\n * an invalid Entity.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\n/**\n * Thrown when validating an invalid Entity.\n *\n * @extends {EError}\n */\nexport default class EInvalidEntity extends EError {\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/EInvalidEntity.js",
    "longname": "lib/EntityManager/Errors/EInvalidEntity.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EInvalidEntity.js",
    "importStyle": null,
    "description": "Provides the EInvalidEntity error which is used when attempting to validate\nan invalid Entity.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EInvalidEntity",
    "memberof": "lib/EntityManager/Errors/EInvalidEntity.js",
    "longname": "lib/EntityManager/Errors/EInvalidEntity.js~EInvalidEntity",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EInvalidEntity.js",
    "importStyle": "EInvalidEntity",
    "description": "Thrown when validating an invalid Entity.",
    "lineNumber": 30,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/EMachineNameExists.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/EMachineNameExists.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EMachineNameExists error which is used when saving an entity\n * with a machine name that is already being used.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sMachineName = Symbol('EMachineNameExists.machineName');\n\n/**\n * Thrown when saving an entity with a taken machine name.\n *\n * @extends {EError}\n */\nexport default class EMachineNameExists extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} machineName The machine name causing the error.\n   */\n  constructor(machineName) {\n    'use strict';\n\n    super();\n    this[sMachineName] = machineName;\n  }\n\n  /**\n   * The machine name that is causing this error.\n   *\n   * @type {String}\n   */\n  get machineName() {\n    'use strict';\n\n    return this[sMachineName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/EMachineNameExists.js",
    "longname": "lib/EntityManager/Errors/EMachineNameExists.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EMachineNameExists.js",
    "importStyle": null,
    "description": "Provides the EMachineNameExists error which is used when saving an entity\nwith a machine name that is already being used.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sMachineName",
    "memberof": "lib/EntityManager/Errors/EMachineNameExists.js",
    "longname": "lib/EntityManager/Errors/EMachineNameExists.js~sMachineName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EMachineNameExists.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EMachineNameExists",
    "memberof": "lib/EntityManager/Errors/EMachineNameExists.js",
    "longname": "lib/EntityManager/Errors/EMachineNameExists.js~EMachineNameExists",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EMachineNameExists.js",
    "importStyle": "EMachineNameExists",
    "description": "Thrown when saving an entity with a taken machine name.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Errors/EMachineNameExists.js~EMachineNameExists",
    "longname": "lib/EntityManager/Errors/EMachineNameExists.js~EMachineNameExists#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "machineName",
        "description": "The machine name causing the error."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "machineName",
    "memberof": "lib/EntityManager/Errors/EMachineNameExists.js~EMachineNameExists",
    "longname": "lib/EntityManager/Errors/EMachineNameExists.js~EMachineNameExists#machineName",
    "access": null,
    "description": "The machine name that is causing this error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/EMissingMachineName.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/EMissingMachineName.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EMissingMachineName error which is used when validating an\n * entity with a missing machine name.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\n/**\n * Thrown when validating an entity which is missing a machine name.\n *\n * @extends {EError}\n */\nexport default class EMissingMachineName extends Error {\n\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EMissingMachineName",
    "memberof": "lib/EntityManager/Errors/EMissingMachineName.js",
    "longname": "lib/EntityManager/Errors/EMissingMachineName.js~EMissingMachineName",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EMissingMachineName.js",
    "importStyle": "EMissingMachineName",
    "description": "Thrown when validating an entity which is missing a machine name.",
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the ESchemaFieldDefined error which is used when attempting to add\n * a new field when it already exists.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sField = Symbol('ESchemaFieldDefined.field');\n\n/**\n * Thrown when adding a new field when the name is already taken.\n *\n * @extends {EError}\n */\nexport default class ESchemaFieldDefined extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} field The name of the field.\n   */\n  constructor(field) {\n    'use strict';\n\n    super();\n    this[sField] = field;\n  }\n\n  /**\n   * The schema field name.\n   *\n   * @type {String}\n   */\n  get field() {\n    'use strict';\n\n    return this[sField];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "longname": "lib/EntityManager/Errors/ESchemaFieldDefined.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "importStyle": null,
    "description": "Provides the ESchemaFieldDefined error which is used when attempting to add\na new field when it already exists.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sField",
    "memberof": "lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "longname": "lib/EntityManager/Errors/ESchemaFieldDefined.js~sField",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ESchemaFieldDefined",
    "memberof": "lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "longname": "lib/EntityManager/Errors/ESchemaFieldDefined.js~ESchemaFieldDefined",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/ESchemaFieldDefined.js",
    "importStyle": "ESchemaFieldDefined",
    "description": "Thrown when adding a new field when the name is already taken.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Errors/ESchemaFieldDefined.js~ESchemaFieldDefined",
    "longname": "lib/EntityManager/Errors/ESchemaFieldDefined.js~ESchemaFieldDefined#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The name of the field."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "field",
    "memberof": "lib/EntityManager/Errors/ESchemaFieldDefined.js~ESchemaFieldDefined",
    "longname": "lib/EntityManager/Errors/ESchemaFieldDefined.js~ESchemaFieldDefined#field",
    "access": null,
    "description": "The schema field name.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/EUnknownFieldType.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUnknownFieldType error which is used when attempting to add a\n * field with an unknown field type.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sField = Symbol('EUnknownFieldType.field'),\n    sFieldType = Symbol('EUnknownFieldType.fieldType');\n\n/**\n * Thrown when adding a new field with an unknown field type.\n *\n * @extends {EError}\n */\nexport default class EUnknownFieldType extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} field The name of the field.\n   * @param {String} fieldType The field type.\n   */\n  constructor(field, fieldType) {\n    'use strict';\n\n    super();\n    this[sField] = field;\n    this[sFieldType] = fieldType;\n  }\n\n  /**\n   * The schema field name.\n   *\n   * @type {String}\n   */\n  get field() {\n    'use strict';\n\n    return this[sField];\n  }\n\n  /**\n   * The field type.\n   *\n   * @type {String}\n   */\n  get fieldType() {\n    'use strict';\n\n    return this[sFieldType];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/EUnknownFieldType.js",
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EUnknownFieldType.js",
    "importStyle": null,
    "description": "Provides the EUnknownFieldType error which is used when attempting to add a\nfield with an unknown field type.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sField",
    "memberof": "lib/EntityManager/Errors/EUnknownFieldType.js",
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js~sField",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EUnknownFieldType.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUnknownFieldType",
    "memberof": "lib/EntityManager/Errors/EUnknownFieldType.js",
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EUnknownFieldType.js",
    "importStyle": "EUnknownFieldType",
    "description": "Thrown when adding a new field with an unknown field type.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType",
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The name of the field."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldType",
        "description": "The field type."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "field",
    "memberof": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType",
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType#field",
    "access": null,
    "description": "The schema field name.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "fieldType",
    "memberof": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType",
    "longname": "lib/EntityManager/Errors/EUnknownFieldType.js~EUnknownFieldType#fieldType",
    "access": null,
    "description": "The field type.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Errors/EUnknownSchemaField.js",
    "memberof": null,
    "longname": "lib/EntityManager/Errors/EUnknownSchemaField.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUnknownSchemaField error which is used when attempting to do\n * something with an unknown schema field.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sField = Symbol('EUnknownSchemaField.field');\n\n/**\n * Thrown when do something with an unknown field.\n *\n * @extends {EError}\n */\nexport default class EUnknownSchemaField extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} field The name of the field.\n   */\n  constructor(field) {\n    'use strict';\n\n    super();\n    this[sField] = field;\n  }\n\n  /**\n   * The schema field name.\n   *\n   * @type {String}\n   */\n  get field() {\n    'use strict';\n\n    return this[sField];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Errors/EUnknownSchemaField.js",
    "longname": "lib/EntityManager/Errors/EUnknownSchemaField.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EUnknownSchemaField.js",
    "importStyle": null,
    "description": "Provides the EUnknownSchemaField error which is used when attempting to do\nsomething with an unknown schema field.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sField",
    "memberof": "lib/EntityManager/Errors/EUnknownSchemaField.js",
    "longname": "lib/EntityManager/Errors/EUnknownSchemaField.js~sField",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EUnknownSchemaField.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUnknownSchemaField",
    "memberof": "lib/EntityManager/Errors/EUnknownSchemaField.js",
    "longname": "lib/EntityManager/Errors/EUnknownSchemaField.js~EUnknownSchemaField",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Errors/EUnknownSchemaField.js",
    "importStyle": "EUnknownSchemaField",
    "description": "Thrown when do something with an unknown field.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Errors/EUnknownSchemaField.js~EUnknownSchemaField",
    "longname": "lib/EntityManager/Errors/EUnknownSchemaField.js~EUnknownSchemaField#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The name of the field."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "field",
    "memberof": "lib/EntityManager/Errors/EUnknownSchemaField.js~EUnknownSchemaField",
    "longname": "lib/EntityManager/Errors/EUnknownSchemaField.js~EUnknownSchemaField#field",
    "access": null,
    "description": "The schema field name.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Schema.js",
    "memberof": null,
    "longname": "lib/EntityManager/Schema.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Schema class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    sortBy = loader('EntityCI/Utils/SortBy'),\n    BaseEntity = loader('EntityCI/EntityManager/BaseEntity'),\n    EUnknownFieldType = loader(\n      'EntityCI/EntityManager/Errors/EUnknownFieldType'\n    ),\n    ESchemaFieldDefined = loader(\n      'EntityCI/EntityManager/Errors/ESchemaFieldDefined'\n    ),\n    EUnknownSchemaField = loader(\n      'EntityCI/EntityManager/Errors/EUnknownSchemaField'\n    ),\n    EUnknownValidator = loader(\n      'EntityCI/Validators/Errors/EUnknownValidator'\n    ),\n    EUnknownSanitizer = loader(\n      'EntityCI/Sanitizers/Errors/EUnknownSanitizer'\n    );\n\nvar sIsUpdated = Symbol.for('BaseEntity.isUpdated'),\n    sTitle = Symbol('Schema.title'),\n    sDescription = Symbol('Schema.description'),\n    sFields = Symbol.for('Schema.fields');\n\n/**\n * The entity schema class.\n *\n * @extends {BaseEntity}\n */\nexport default class Schema extends BaseEntity {\n\n  /**\n   * The schema constructor.\n   *\n   * @param {EntityManager} manager The entity manager.\n   */\n  constructor(manager) {\n    'use strict';\n\n    super(manager);\n\n    this[sTitle] = '';\n    this[sDescription] = '';\n    this[sFields] = {};\n  }\n\n  /**\n   * Get the database collection name.\n   *\n   * @return {String} The collection name.\n   */\n  collectionName() {\n    'use strict';\n\n    return 'schemas';\n  }\n\n  /**\n   * Get the database collection name for the entity.\n   *\n   * @return {String} The entity collection name.\n   */\n  entityCollectionName() {\n    'use strict';\n\n    return 'entity-' + this.machineName;\n  }\n\n  /**\n   * Get the entity collection.\n   *\n   * @type {MongoDB#Collection}\n   */\n  get entityCollection() {\n    'use strict';\n\n    var collectionName = this.entityCollectionName();\n    return this.manager.database.collection(collectionName);\n  }\n\n  /**\n   * Get the schemas title.\n   *\n   * @type {String}\n   */\n  get title() {\n    'use strict';\n\n    return this[sTitle];\n  }\n\n  /**\n   * Set the schemas title.\n   *\n   * @type {String}\n   */\n  set title(value) {\n    'use strict';\n\n    this[sIsUpdated] = true;\n    this[sTitle] = value;\n  }\n\n  /**\n   * Get the schemas description.\n   *\n   * @type {String}\n   */\n  get description() {\n    'use strict';\n\n    return this[sDescription];\n  }\n\n  /**\n   * Set the schemas description.\n   *\n   * @type {String}\n   */\n  set description(value) {\n    'use strict';\n\n    this[sIsUpdated] = true;\n    this[sDescription] = value;\n  }\n\n  /**\n   * Get an array of defined field names.\n   *\n   * @type {Array}\n   */\n  get fields() {\n    'use strict';\n\n    return Object.keys(this[sFields]);\n  }\n\n  /**\n   * @override\n   */\n  _docToEntity(doc, done) {\n    'use strict';\n\n    var me = this;\n    super._docToEntity(doc, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      me[sFields] = doc.fields;\n      done();\n    });\n  }\n\n  /**\n   * @override\n   */\n  _entityToDoc(by, done) {\n    'use strict';\n\n    var me = this;\n    super._entityToDoc(by, function (err, doc) {\n      if (err) {\n        return done(err);\n      }\n\n      doc.fields = me[sFields];\n      done(null, doc);\n    });\n  }\n\n  /**\n   * Determines if the field has been defined.\n   *\n   * @param {String} name The name of the field.\n   * @return {Boolean} Returns true if the field has been defined.\n   */\n  hasField(name) {\n    'use strict';\n\n    return this[sFields][name] !== undefined;\n  }\n\n  /**\n   * Add a new field config.\n   *\n   * @param {String} name The name of the field.\n   * @param {String} title The admin title of the field.\n   * @param {String} description The admin description of the field.\n   * @param {String} type The field type, see {EntityManager.fieldTypes}.\n   * @param {Object} [options={}] A set of options to pass to the field.\n   * @param {String} [options.title] The UI title of the field.\n   * @param {String} [options.description] The UI description of the field.\n   * @param {Boolean} [options.required] Set to true if this is a required\n   *   field.\n   * @return {Schema} Returns self.\n   * @throws {ESchemaFieldDefined} Thrown if the field has already been defined.\n   * @throws {EUnknownFieldType} Thrown if the field type is unknown.\n   */\n  addField(name, title, description, type, options) {\n    'use strict';\n\n    var EntityManager = loader('EntityCI/EntityManager');\n\n    if (this.hasField(name)) {\n      throw new ESchemaFieldDefined(name);\n    }\n\n    if (EntityManager.fieldTypes[type] === undefined) {\n      throw new EUnknownFieldType(name, type);\n    }\n\n    this[sIsUpdated] = true;\n    this[sFields][name] = {\n      type: type,\n      title: title,\n      description: description,\n      options: options || {},\n      validators: [],\n      sanitizers: []\n    };\n\n    return this;\n  }\n\n  /**\n   * Get the defined field.\n   *\n   * @param {String} name The name of the field.\n   * @return {Object} The field config.\n   * @throws {EUnknownSchemaField} If the field is unknown.\n   */\n  getField(name) {\n    'use strict';\n\n    if (this[sFields][name] === undefined) {\n      throw new EUnknownSchemaField(name);\n    }\n\n    return this[sFields][name];\n  }\n\n  /**\n   * Delete the specified field config.\n   *\n   * @param {String} name The name of the field.\n   * @return {Schema} Returns self.\n   * @throws {EUnknownSchemaField} If the field is unknown.\n   */\n  delField(name) {\n    'use strict';\n\n    if (this[sFields][name] === undefined) {\n      throw new EUnknownSchemaField(name);\n    }\n\n    this[sIsUpdated] = true;\n    delete this[sFields][name];\n\n    return this;\n  }\n\n  /**\n   * Add a validation rule to the given field.\n   *\n   * @param {String} name The field name to add this rule to.\n   * @param {String} rule The validation rule.\n   * @param {Object} [options={}] Any options to apply to the rule.\n   * @param {Integer} [weight=0] The weight to apply to the rule.\n   * @return {Schema} Returns self.\n   */\n  addFieldValidation(name, rule, options, weight) {\n    'use strict';\n\n    if (this[sFields][name] === undefined) {\n      throw new EUnknownSchemaField(name);\n    }\n\n    if (this.manager.validators.registered(rule) === false) {\n      throw new EUnknownValidator(rule);\n    }\n\n    this[sFields][name].validators.push({\n      rule: rule,\n      options: options || {},\n      weight: weight || 0\n    });\n\n    sortBy(this[sFields][name].validators, 'weight');\n\n    return this;\n  }\n\n  /**\n   * Add a sanitization rule to the given field.\n   *\n   * @param {String} name The field name to add this rule to.\n   * @param {String} rule The sanitization rule.\n   * @param {Object} [options={}] Any options to apply to the rule.\n   * @param {Integer} [weight=0] The weight to apply to the rule.\n   * @return {Schema} Returns self.\n   */\n  addFieldSanitization(name, rule, options, weight) {\n    'use strict';\n\n    if (this[sFields][name] === undefined) {\n      throw new EUnknownSchemaField(name);\n    }\n\n    if (this.manager.sanitizers.registered(rule) === false) {\n      throw new EUnknownSanitizer(rule);\n    }\n\n    this[sFields][name].sanitizers.push({\n      rule: rule,\n      options: options || {},\n      weight: weight || 0\n    });\n\n    sortBy(this[sFields][name].sanitizers, 'weight');\n\n    return this;\n  }\n\n  /**\n   * Sanitizes the given field and value.\n   *\n   * @param {String} name The name of the field.\n   * @param {Mixed} value The value to sanitize.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Mixed} done.value The sanitized value.\n   */\n  sanitizeField(name, value, done) {\n    'use strict';\n\n    if (this[sFields][name] === undefined) {\n      return done(new EUnknownSchemaField(name));\n    }\n\n    var orig = value,\n        me = this,\n        queue = [];\n\n    function san(rule, options) {\n      return function (next) {\n        me.manager.sanitizers.sanitize(function (err, o, val) {\n          if (err) {\n            return next(err);\n          }\n\n          value = val;\n          next();\n        }, rule, value, options);\n      };\n    }\n\n    this[sFields][name].sanitizers.forEach(function (item) {\n      queue.push(san(item.rule, item.options));\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null, orig, value);\n    });\n  }\n\n  /**\n   * Validates the given field and value.\n   *\n   * @param {String} name The name of the field.\n   * @param {Mixed} value The value to validate.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Mixed} done.value The validated value.\n   */\n  validateField(name, value, done) {\n    'use strict';\n\n    if (this[sFields][name] === undefined) {\n      return done(new EUnknownSchemaField(name));\n    }\n\n    var me = this,\n        queue = [];\n\n    function val(rule, options) {\n      return function (next) {\n        me.manager.validators.validate(function (err, o, val) {\n          if (err) {\n            return next(err);\n          }\n\n          value = val;\n          next();\n        }, rule, value, options);\n      };\n    }\n\n    this[sFields][name].validators.forEach(function (item) {\n      queue.push(val(item.rule, item.options));\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null, value);\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/EntityManager/Schema.js",
    "longname": "lib/EntityManager/Schema.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Schema.js",
    "importStyle": null,
    "description": "Provides the Schema class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sIsUpdated",
    "memberof": "lib/EntityManager/Schema.js",
    "longname": "lib/EntityManager/Schema.js~sIsUpdated",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Schema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Schema",
    "memberof": "lib/EntityManager/Schema.js",
    "longname": "lib/EntityManager/Schema.js~Schema",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Schema.js",
    "importStyle": "Schema",
    "description": "The entity schema class.",
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "BaseEntity"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#constructor",
    "access": null,
    "description": "The schema constructor.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "EntityManager"
        ],
        "spread": false,
        "optional": false,
        "name": "manager",
        "description": "The entity manager."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collectionName",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#collectionName",
    "access": null,
    "description": "Get the database collection name.",
    "lineNumber": 73,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The collection name."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entityCollectionName",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#entityCollectionName",
    "access": null,
    "description": "Get the database collection name for the entity.",
    "lineNumber": 84,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The entity collection name."
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "entityCollection",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#entityCollection",
    "access": null,
    "description": "Get the entity collection.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "MongoDB#Collection"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "title",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#title",
    "access": null,
    "description": "Get the schemas title.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "title",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#title",
    "access": null,
    "description": "Set the schemas title.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "description",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#description",
    "access": null,
    "description": "Get the schemas description.",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "description",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#description",
    "access": null,
    "description": "Set the schemas description.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "fields",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#fields",
    "access": null,
    "description": "Get an array of defined field names.",
    "lineNumber": 153,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_docToEntity",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#_docToEntity",
    "access": null,
    "description": null,
    "lineNumber": 162,
    "params": [
      {
        "name": "doc",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_entityToDoc",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#_entityToDoc",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "params": [
      {
        "name": "by",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasField",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#hasField",
    "access": null,
    "description": "Determines if the field has been defined.",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if the field has been defined."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addField",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#addField",
    "access": null,
    "description": "Add a new field config.",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The admin title of the field."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The admin description of the field."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": ".",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "]",
        "description": "A set of options to pass to the field."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.title",
        "description": "The UI title of the field."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.description",
        "description": "The UI description of the field."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.required",
        "description": "Set to true if this is a required\n  field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "throws": [
      {
        "types": [
          "ESchemaFieldDefined"
        ],
        "description": "Thrown if the field has already been defined."
      },
      {
        "types": [
          "EUnknownFieldType"
        ],
        "description": "Thrown if the field type is unknown."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getField",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#getField",
    "access": null,
    "description": "Get the defined field.",
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The field config."
    },
    "throws": [
      {
        "types": [
          "EUnknownSchemaField"
        ],
        "description": "If the field is unknown."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delField",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#delField",
    "access": null,
    "description": "Delete the specified field config.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "throws": [
      {
        "types": [
          "EUnknownSchemaField"
        ],
        "description": "If the field is unknown."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFieldValidation",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#addFieldValidation",
    "access": null,
    "description": "Add a validation rule to the given field.",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The field name to add this rule to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "The validation rule."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "]",
        "description": "Any options to apply to the rule."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "weight",
        "description": "The weight to apply to the rule."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFieldSanitization",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#addFieldSanitization",
    "access": null,
    "description": "Add a sanitization rule to the given field.",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The field name to add this rule to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "The sanitization rule."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "]",
        "description": "Any options to apply to the rule."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "weight",
        "description": "The weight to apply to the rule."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sanitizeField",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#sanitizeField",
    "access": null,
    "description": "Sanitizes the given field and value.",
    "lineNumber": 355,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to sanitize."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "done.value",
        "description": "The sanitized value."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validateField",
    "memberof": "lib/EntityManager/Schema.js~Schema",
    "longname": "lib/EntityManager/Schema.js~Schema#validateField",
    "access": null,
    "description": "Validates the given field and value.",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "done.value",
        "description": "The validated value."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/Validators/Entity.js",
    "memberof": null,
    "longname": "lib/EntityManager/Validators/Entity.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Entity validator rule.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    Entity = loader('EntityCI/EntityManager/Entity'),\n    EInvalidEntity = loader('EntityCI/EntityManager/Errors/EInvalidEntity'),\n    EFailedEntity = loader('EntityCI/EntityManager/Errors/EFailedEntity');\n\n/**\n * Validate an Entity.\n *\n * @param {Mixed} value The value to validate.\n * @param {Object} options The options passed to the validator.\n * @param {Function} next The next callback.\n * @param {Error} next.err Any raised errors.\n * @throws {EInvalidUrl} Thrown if the value is an invalid url address.\n */\nexport default function validateEntity (value, options, next) {\n  'use strict';\n\n  if (value === undefined || value === null) {\n    return next();\n  }\n\n  if (value instanceof Entity === false) {\n    return next(new EInvalidEntity());\n  }\n\n  if (options) {\n    for (var key in options) {\n      if (value[key] !== options[key]) {\n        return next(new EFailedEntity(key));\n      }\n    }\n  }\n\n  next();\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EntityManager/Validators/Entity.js",
    "longname": "lib/EntityManager/Validators/Entity.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/Validators/Entity.js",
    "importStyle": null,
    "description": "Provides the Entity validator rule.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validateEntity",
    "memberof": "lib/EntityManager/Validators/Entity.js",
    "longname": "lib/EntityManager/Validators/Entity.js~validateEntity",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/Validators/Entity.js",
    "importStyle": "validateEntity",
    "description": "Validate an Entity.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "next.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EInvalidUrl"
        ],
        "description": "Thrown if the value is an invalid url address."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EntityManager/index.js",
    "memberof": null,
    "longname": "lib/EntityManager/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the entity manager component.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    Schema = loader('EntityCI/EntityManager/Schema'),\n    Entity = loader('EntityCI/EntityManager/Entity'),\n    ECantFindEntity = loader(\n      'EntityCI/EntityManager/Errors/ECantFindEntity'\n    );\n\nvar sSchemas = Symbol('EntityManager.schemas'),\n    sDatabase = Symbol('EntityManager.database'),\n    sValidators = Symbol('EntityManager.validators'),\n    sSanitizers = Symbol('EntityManager.sanitizers');\n\n/**\n * The entity manager class.\n */\nexport default class EntityManager {\n\n  /**\n   * The available entity field types.\n   *\n   * @type {Object}\n   * @static\n   */\n  static get fieldTypes() {\n    var fieldTypes = {};\n\n    fieldTypes.Mixed = {\n      title: 'Mixed',\n      description: 'A field containing mixed data.',\n      icon: 'mixed',\n      type: null\n    };\n\n    fieldTypes.String = {\n      title: 'String',\n      description: 'A field containing a string.',\n      icon: 'text',\n      type: String\n    };\n\n    fieldTypes.Number = {\n      title: 'Number',\n      description: 'A field containing a number.',\n      icon: 'number',\n      type: Number\n    };\n\n    fieldTypes.Boolean = {\n      title: 'Boolean',\n      description: 'A field containing a yes/no option.',\n      icon: 'boolean',\n      type: Boolean\n    };\n\n    fieldTypes.Date = {\n      title: 'Date',\n      description: 'A field containing a date.',\n      icon: 'date',\n      type: Date\n    };\n\n    fieldTypes.Array = {\n      title: 'Array',\n      description: 'A field containing an array of data.',\n      icon: 'array',\n      type: Array\n    };\n\n    fieldTypes.Object = {\n      title: 'Object',\n      description: 'A field containing an object of data.',\n      icon: 'object',\n      type: Object\n    };\n\n    fieldTypes.Entity = {\n      title: 'Entity',\n      description: 'A field containing a reference to an entity.',\n      icon: 'entity',\n      type: Entity\n    };\n\n    return fieldTypes;\n  }\n\n  /**\n   * The entity manager constructor.\n   *\n   * @param {Database} database The database manager.\n   * @param {Validators} validators The validators object.\n   * @param {Sanitizers} sanitizers The sanitizers object.\n   */\n  constructor(database, validators, sanitizers) {\n    'use strict';\n\n    this[sSchemas] = {};\n    this[sDatabase] = database;\n    this[sValidators] = validators;\n    this[sSanitizers] = sanitizers;\n\n    this[sValidators].register(\n      'entity',\n      loader('EntityCI/EntityManager/Validators/Entity')\n    );\n  }\n\n  /**\n   * Get the database.\n   *\n   * @type {Database}\n   */\n  get database() {\n    'use strict';\n\n    return this[sDatabase];\n  }\n\n  /**\n   * Get the validators.\n   *\n   * @type {Validators}\n   */\n  get validators() {\n    'use strict';\n\n    return this[sValidators];\n  }\n\n  /**\n   * Get the sanitizers.\n   *\n   * @type {Sanitizers}\n   */\n  get sanitizers() {\n    'use strict';\n\n    return this[sSanitizers];\n  }\n\n  /**\n   * Get the trash collection.\n   *\n   * @type {MongoDB#Collection}\n   */\n  get trashCollection() {\n    'use strict';\n\n    return this[sDatabase].collection('trash');\n  }\n\n  /**\n   * Get an array of registered schema details.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Array} done.schemas An array of found schemas.\n   * @param {String} done.schemas[].machineName The machine name.\n   * @param {String} done.schemas[].title The title.\n   * @param {String} done.schemas[].description The description.\n   */\n  schemas(done) {\n    'use strict';\n\n    this[sDatabase].collection('schemas').find({}, function (err, docs) {\n      if (err) {\n        return done(err);\n      }\n\n      var schemas = [];\n      docs.forEach(function (item) {\n        schemas.push({\n          machineName: item.machineName,\n          title: item.title || '',\n          description: item.description || ''\n        });\n      });\n\n      done(null, schemas);\n    });\n  }\n\n  /**\n   * Attempt to get a schema.\n   *\n   * @param {String} name The name of the schema.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Schema} done.schema The found schema.\n   */\n  schema(name, done) {\n    'use strict';\n\n    var schema = new Schema(this);\n    schema.machineName = name;\n    schema.load(function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      done(null, schema.isNew ? null : schema);\n    });\n  }\n\n  /**\n   * Determine if the schema and entity machine name already exists.\n   *\n   * @param {String} type The schema type.\n   * @param {String} machineName The entity machine name.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Boolean} done.exists True if the entity and schema exists.\n   */\n  exists(type, machineName, done) {\n    'use strict';\n\n    var me = this,\n        queue = [],\n        schema;\n\n    queue.push(function (next) {\n      me.schema(type, function (err, s) {\n        if (err) {\n          return next(err);\n        }\n\n        schema = s;\n        next();\n      });\n    });\n\n    async.series(queue, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      schema.entityCollection.count({\n        machineName: machineName\n      }, function (err, count) {\n        done(err ? err : null, count > 0);\n      });\n    });\n  }\n\n  /**\n   * Count the number of entities of a schema type.\n   *\n   * @param {String} type The schema type.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Integer} done.count The number of found entities.\n   */\n  count(type, done) {\n    'use strict';\n\n    var me = this,\n        queue = [],\n        schema;\n\n    queue.push(function (next) {\n      me.schema(type, function (err, s) {\n        if (err) {\n          return next(err);\n        }\n\n        schema = s;\n        next();\n      });\n    });\n\n    async.series(queue, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      schema.entityCollection.count(function (err, count) {\n        done(err ? err : null, count);\n      });\n    });\n  }\n\n  /**\n   * Should create a new Entity of type.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Entity} done.entity The created entity.\n   * @param {String} type The entity type to create.\n   * @param {String} [subtype] The entity subtype.\n   */\n  create(done, type, subtype) {\n    'use strict';\n\n    var me = this;\n    this.schema(type, function (err, schema) {\n      if (err) {\n        return done(err);\n      }\n\n      done(null, new Entity(me, schema, subtype));\n    });\n  }\n\n  /**\n   * Loads an entity from the database.\n   *\n   * @param {String} type The entity type.\n   * @param {String} machineName The entity machine name.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Entity} done.entity The loaded entity.\n   * @param {Boolean} [force=false] If true this will return a created entity if\n   *   the entity doesnt exist in the database rather than null.\n   */\n  load(type, machineName, done, force) {\n    'use strict';\n\n    var me = this,\n        queue = [],\n        schema = null,\n        entity = null;\n\n    queue.push(function (next) {\n      me.schema(type, function (err, s) {\n        if (err) {\n          return next(err);\n        }\n\n        schema = s;\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      if (!schema) {\n        return next(new Error());\n      }\n\n      entity = new Entity(me, schema);\n      entity.machineName = machineName;\n      entity.load(function (err) {\n        if (err && err instanceof ECantFindEntity === false) {\n          entity = null;\n          return next(err);\n        }\n\n        if (err && err instanceof ECantFindEntity && force !== true) {\n          entity = null;\n          return next(err);\n        }\n\n        next();\n      });\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null, entity);\n    });\n  }\n\n  /**\n   * Find some entities based on some conditions.\n   *\n   * @param {String} type The entity type.\n   * @param {Object} conditions The find conditions to pass to MongoDB.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Array} done.entities An array of found entities.\n   * @param {Integer} done.page The page being returned.\n   * @param {Integer} done.total The total number of entities.\n   * @param {Integer} done.perPage The number of entities per page.\n   * @param {Integer} done.pages The number of pages available.\n   * @param {Integer} [perPage=25] The number of items per page, if 0 all items\n   *   will be returned.\n   * @param {Integer} [page=1] The page to return.\n   */\n  find(type, conditions, done, perPage, page) {\n    'use strict';\n\n    perPage = Math.max(perPage || 25, 0);\n    page = Math.max(page || 1, 1);\n\n    var me = this,\n        queue = [],\n        queue2 = [],\n        count,\n        skip = perPage * (page - 1),\n        pages,\n        entities = [],\n        schema = null,\n        orderBy = conditions.$orderby || {};\n\n    conditions = conditions.$query || conditions;\n\n    function setupEntity(doc) {\n      return function (next) {\n        entities.push(new Entity(me, schema));\n        entities[entities.length - 1]._setDoc(doc, next);\n      };\n    }\n\n    queue.push(function (next) {\n      me.schema(type, function (err, s) {\n        if (err) {\n          return next(err);\n        }\n\n        schema = s;\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      schema.entityCollection.count(conditions, function (err, c) {\n        if (err) {\n          return next(err);\n        }\n\n        count = c;\n        pages = Math.ceil(count / perPage);\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      schema.entityCollection.find(conditions)\n        .sort(orderBy)\n        .limit(perPage)\n        .skip(skip)\n        .forEach(function (err, doc) {\n          if (err) {\n            return next(err);\n          }\n\n          if (!doc) {\n            return next();\n          }\n\n          queue2.push(setupEntity(doc));\n        });\n    });\n\n    queue.push(function (next) {\n      async.series(queue2, next);\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null, entities, page, count, perPage, pages);\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/EntityManager/index.js",
    "longname": "lib/EntityManager/index.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/index.js",
    "importStyle": null,
    "description": "Provides the entity manager component.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sSchemas",
    "memberof": "lib/EntityManager/index.js",
    "longname": "lib/EntityManager/index.js~sSchemas",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EntityManager/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EntityManager",
    "memberof": "lib/EntityManager/index.js",
    "longname": "lib/EntityManager/index.js~EntityManager",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EntityManager/index.js",
    "importStyle": "EntityManager",
    "description": "The entity manager class.",
    "lineNumber": 37,
    "interface": false
  },
  {
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "fieldTypes",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager.fieldTypes",
    "access": null,
    "description": "The available entity field types.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#constructor",
    "access": null,
    "description": "The entity manager constructor.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Database"
        ],
        "spread": false,
        "optional": false,
        "name": "database",
        "description": "The database manager."
      },
      {
        "nullable": null,
        "types": [
          "Validators"
        ],
        "spread": false,
        "optional": false,
        "name": "validators",
        "description": "The validators object."
      },
      {
        "nullable": null,
        "types": [
          "Sanitizers"
        ],
        "spread": false,
        "optional": false,
        "name": "sanitizers",
        "description": "The sanitizers object."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "database",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#database",
    "access": null,
    "description": "Get the database.",
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "validators",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#validators",
    "access": null,
    "description": "Get the validators.",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "Validators"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "sanitizers",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#sanitizers",
    "access": null,
    "description": "Get the sanitizers.",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "Sanitizers"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "trashCollection",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#trashCollection",
    "access": null,
    "description": "Get the trash collection.",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "MongoDB#Collection"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "schemas",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#schemas",
    "access": null,
    "description": "Get an array of registered schema details.",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "done.schemas",
        "description": "An array of found schemas."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "done.schemas[].machineName",
        "description": "The machine name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "done.schemas[].title",
        "description": "The title."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "done.schemas[].description",
        "description": "The description."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "schema",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#schema",
    "access": null,
    "description": "Attempt to get a schema.",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the schema."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Schema"
        ],
        "spread": false,
        "optional": false,
        "name": "done.schema",
        "description": "The found schema."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exists",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#exists",
    "access": null,
    "description": "Determine if the schema and entity machine name already exists.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The schema type."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "machineName",
        "description": "The entity machine name."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "done.exists",
        "description": "True if the entity and schema exists."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "count",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#count",
    "access": null,
    "description": "Count the number of entities of a schema type.",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The schema type."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "done.count",
        "description": "The number of found entities."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#create",
    "access": null,
    "description": "Should create a new Entity of type.",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Entity"
        ],
        "spread": false,
        "optional": false,
        "name": "done.entity",
        "description": "The created entity."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The entity type to create."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "subtype",
        "description": "The entity subtype."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#load",
    "access": null,
    "description": "Loads an entity from the database.",
    "lineNumber": 335,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The entity type."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "machineName",
        "description": "The entity machine name."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Entity"
        ],
        "spread": false,
        "optional": false,
        "name": "done.entity",
        "description": "The loaded entity."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "force",
        "description": "If true this will return a created entity if\n  the entity doesnt exist in the database rather than null."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "lib/EntityManager/index.js~EntityManager",
    "longname": "lib/EntityManager/index.js~EntityManager#find",
    "access": null,
    "description": "Find some entities based on some conditions.",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The entity type."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conditions",
        "description": "The find conditions to pass to MongoDB."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "done.entities",
        "description": "An array of found entities."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "done.page",
        "description": "The page being returned."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "done.total",
        "description": "The total number of entities."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "done.perPage",
        "description": "The number of entities per page."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "done.pages",
        "description": "The number of pages available."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "25",
        "defaultRaw": 25,
        "name": "perPage",
        "description": "The number of items per page, if 0 all items\n  will be returned."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "page",
        "description": "The page to return."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EventManager/Errors/EUndefinedEvent.js",
    "memberof": null,
    "longname": "lib/EventManager/Errors/EUndefinedEvent.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUndefinedEvent error which is used when attempting to use an\n *undefined event.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sEventName = Symbol('EUndefinedEvent.eventName');\n\n/**\n * Thrown when tryng to use an undefined event.\n *\n * @extends {EError}\n */\nexport default class EUndefinedEvent extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the event.\n   */\n  constructor(name) {\n    'use strict';\n\n    super();\n    this[sEventName] = name;\n  }\n\n  /**\n   * The event name causing the error.\n   *\n   * @type {String}\n   */\n  get eventName() {\n    'use strict';\n\n    return this[sEventName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/EventManager/Errors/EUndefinedEvent.js",
    "longname": "lib/EventManager/Errors/EUndefinedEvent.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EventManager/Errors/EUndefinedEvent.js",
    "importStyle": null,
    "description": "Provides the EUndefinedEvent error which is used when attempting to use an\nundefined event.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sEventName",
    "memberof": "lib/EventManager/Errors/EUndefinedEvent.js",
    "longname": "lib/EventManager/Errors/EUndefinedEvent.js~sEventName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EventManager/Errors/EUndefinedEvent.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUndefinedEvent",
    "memberof": "lib/EventManager/Errors/EUndefinedEvent.js",
    "longname": "lib/EventManager/Errors/EUndefinedEvent.js~EUndefinedEvent",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EventManager/Errors/EUndefinedEvent.js",
    "importStyle": "EUndefinedEvent",
    "description": "Thrown when tryng to use an undefined event.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EventManager/Errors/EUndefinedEvent.js~EUndefinedEvent",
    "longname": "lib/EventManager/Errors/EUndefinedEvent.js~EUndefinedEvent#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the event."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "eventName",
    "memberof": "lib/EventManager/Errors/EUndefinedEvent.js~EUndefinedEvent",
    "longname": "lib/EventManager/Errors/EUndefinedEvent.js~EUndefinedEvent#eventName",
    "access": null,
    "description": "The event name causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/EventManager/index.js",
    "memberof": null,
    "longname": "lib/EventManager/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EventsManager class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    sortBy = loader('EntityCI/Utils/SortBy'),\n    EUndefinedEvent = loader('EntityCI/EventManager/Errors/EUndefinedEvent');\n\nvar sEvents = Symbol('EventManager.events');\n\n/**\n * The events manager class.\n */\nexport default class EventManager {\n\n  /**\n   * Construct the event manager.\n   */\n  constructor() {\n    'use strict';\n\n    this[sEvents] = {};\n  }\n\n  /**\n   * Get an array of the registered event names.\n   *\n   * @type {Array}\n   */\n  get events() {\n    'use strict';\n\n    return Object.keys(this[sEvents]);\n  }\n\n  /**\n   * Returns an array events listening callbacks.\n   *\n   * @param {String} event The name of the event to return.\n   * @return {Array} An array of the listening callbacks.\n   * @throws {EUndefinedEvent} Thrown if the event is not defined.\n   */\n  callbacks(event) {\n    'use strict';\n\n    if (this[sEvents][event] === undefined) {\n      throw new EUndefinedEvent(event);\n    }\n\n    return this[sEvents][event];\n  }\n\n  /**\n   * Registers an event listener.\n   *\n   * @param {String} event The event to listen for.\n   * @param {Function} callback The callback method.\n   * @param {Function} callback.next The callbacks 'next' method.\n   * @param {Object} callback.params An object storing the params sent to\n   *   each callback.\n   * @param {Object} [scope=null] The scope to apply to the callback.\n   * @param {Integer} [weight=0] The weight to apply to the callback.\n   * @return {EventManager} Returns self.\n   */\n  listen(event, callback, scope, weight) {\n    'use strict';\n\n    if (this[sEvents][event] === undefined) {\n      this[sEvents][event] = [];\n    }\n\n    this[sEvents][event].push({\n      callback: callback,\n      scope: scope || null,\n      weight: weight || 0\n    });\n\n    sortBy(this[sEvents][event], 'weight');\n    return this;\n  }\n\n  /**\n   * Removes an event callback, or an event.\n   *\n   * @param {String} event The event to unlisten.\n   * @param {Function} [callback] The specific callback to remove, if not\n   *   defined the whole event is unlistened.\n   * @return {EventManager} Returns self.\n   * @throws {EUndefinedEvent} Thrown if the event is not defined.\n   */\n  unlisten(event, callback) {\n    'use strict';\n\n    if (this[sEvents][event] === undefined) {\n      throw new EUndefinedEvent(event);\n    }\n\n    if (callback) {\n      var events = [];\n      for (var i = 0, len = this[sEvents][event].length; i < len; i++) {\n        if (this[sEvents][event][i].callback !== callback) {\n          events.push(this[sEvents][event][i]);\n        }\n      }\n\n      if (events.length > 0) {\n        this[sEvents][event] = events;\n      } else {\n        delete this[sEvents][event];\n      }\n    } else {\n      delete this[sEvents][event];\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires all callbacks of a given event.\n   *\n   * @param {String} event The event to fire.\n   * @param {Function} [done] The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Object} [params] Any params to send to the callbacks.\n   */\n  fire(event, done, params) {\n    'use strict';\n\n    done = done || function () {};\n\n    if (this[sEvents][event] === undefined) {\n      return done(null);\n    }\n\n    function fireCallback(cb) {\n      return function (next) {\n        try {\n          cb.callback.call(cb.scope, next, params);\n        } catch(err) {\n          next(err);\n        }\n      };\n    }\n\n    var queue = [];\n    this[sEvents][event].forEach(function (item) {\n      queue.push(fireCallback(item));\n    });\n\n    async.series(queue, function (err) {\n      if (typeof done === 'function') {\n        done(err ? err : null);\n      }\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/EventManager/index.js",
    "longname": "lib/EventManager/index.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EventManager/index.js",
    "importStyle": null,
    "description": "Provides the EventsManager class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sEvents",
    "memberof": "lib/EventManager/index.js",
    "longname": "lib/EventManager/index.js~sEvents",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/EventManager/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EventManager",
    "memberof": "lib/EventManager/index.js",
    "longname": "lib/EventManager/index.js~EventManager",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/EventManager/index.js",
    "importStyle": "EventManager",
    "description": "The events manager class.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/EventManager/index.js~EventManager",
    "longname": "lib/EventManager/index.js~EventManager#constructor",
    "access": null,
    "description": "Construct the event manager.",
    "lineNumber": 36,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "events",
    "memberof": "lib/EventManager/index.js~EventManager",
    "longname": "lib/EventManager/index.js~EventManager#events",
    "access": null,
    "description": "Get an array of the registered event names.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "callbacks",
    "memberof": "lib/EventManager/index.js~EventManager",
    "longname": "lib/EventManager/index.js~EventManager#callbacks",
    "access": null,
    "description": "Returns an array events listening callbacks.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The name of the event to return."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of the listening callbacks."
    },
    "throws": [
      {
        "types": [
          "EUndefinedEvent"
        ],
        "description": "Thrown if the event is not defined."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "listen",
    "memberof": "lib/EventManager/index.js~EventManager",
    "longname": "lib/EventManager/index.js~EventManager#listen",
    "access": null,
    "description": "Registers an event listener.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to listen for."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback method."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback.next",
        "description": "The callbacks 'next' method."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "callback.params",
        "description": "An object storing the params sent to\n  each callback."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "scope",
        "description": "The scope to apply to the callback."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "weight",
        "description": "The weight to apply to the callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unlisten",
    "memberof": "lib/EventManager/index.js~EventManager",
    "longname": "lib/EventManager/index.js~EventManager#unlisten",
    "access": null,
    "description": "Removes an event callback, or an event.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to unlisten."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "callback",
        "description": "The specific callback to remove, if not\n  defined the whole event is unlistened."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "throws": [
      {
        "types": [
          "EUndefinedEvent"
        ],
        "description": "Thrown if the event is not defined."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fire",
    "memberof": "lib/EventManager/index.js~EventManager",
    "longname": "lib/EventManager/index.js~EventManager#fire",
    "access": null,
    "description": "Fires all callbacks of a given event.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to fire."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "Any params to send to the callbacks."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Locale/index.js",
    "memberof": null,
    "longname": "lib/Locale/index.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nvar path = require('path'),\n    glob = require('glob'),\n    async = require('async');\n\nvar sLocales = Symbol('Locale.locales'),\n    sDatabase = Symbol('Locale.database');\n\n/**\n * The Locale class provides functionality for storing translation strings and\n * translating a given string.\n */\nexport default class Locale {\n\n  /**\n   * The Locale class constructor.\n   *\n   * @param {Database} database The database manager.\n   */\n  constructor(database) {\n    'use strict';\n\n    this[sLocales] = {};\n    this[sDatabase] = database;\n  }\n\n  /**\n   * Get the defined language names.\n   *\n   * @type {Array}\n   */\n  get languages() {\n    'use strict';\n\n    return Object.keys(this[sLocales]);\n  }\n\n  /**\n   * Gets the defined database manager.\n   *\n   * @type {Database}\n   */\n  get database() {\n    'use strict';\n\n    return this[sDatabase];\n  }\n\n  /**\n   * Add translations stored in the database.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _addFromDatabase(done) {\n    'use strict';\n\n    var me = this;\n    this[sDatabase].collection('locales').find({}, function (err, docs) {\n      if (err) {\n        return done(err);\n      }\n\n      docs.forEach(function (doc) {\n        if (me[sLocales][doc.language] === undefined) {\n          me[sLocales][doc.language] = {};\n        }\n\n        me[sLocales][doc.language][doc.msg] = doc.translation;\n      });\n\n      done(null);\n    });\n  }\n\n  /**\n   * Processes the given JSON filename.\n   *\n   * @param {String} filename The translation file filename, note that it must\n   *   be in the format *.LANGUAGE.json.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _processFile(filename, done) {\n    'use strict';\n\n    try {\n      var locale = require(filename),\n          language = filename.split('.')[1];\n\n      if (this[sLocales][language] === undefined) {\n        this[sLocales][language] = {};\n      }\n\n      for (var msg in locale) {\n        if (this[sLocales][language][msg]) {\n          continue;\n        }\n\n        this[sLocales][language][msg] = locale[msg];\n      }\n\n      done(null);\n    } catch (err) {\n      done(err);\n    }\n  }\n\n  /**\n   * Perform token string replacement, this is based upon the PHP.js strtr\n   * script.\n   *\n   * @param {String} str The string to replace.\n   * @param {Object} params The token params.\n   * @return {String} The replaced string.\n   * @private\n   */\n  _strtr(str, params) {\n    'use strict';\n\n    var i, len,\n        j, frm,\n        from = [],\n        to = [],\n        ret = '',\n        match = false;\n\n    for (var arg in params) {\n      from.push(':' + arg);\n      to.push(params[arg]);\n    }\n\n    for (i = 0, len = str.length; i < len; i++) {\n      match = false;\n      for (j = 0, frm = from.length; j < frm; j++) {\n        if (str.substr(i, from[j].length) === from[j]) {\n          match = true;\n          i = (i + from[j].length) - 1;\n\n          break;\n        }\n      }\n\n      ret += match ? to[j] : str.charAt(i);\n    }\n\n    return ret;\n  }\n\n  /**\n   * Add translations from a JSON file.\n   *\n   * @param {String} filename The translation file filename, note that it must\n   *   be in the format *.LANGUAGE.json.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  addFromFile(filename, done) {\n    'use strict';\n\n    this._processFile(filename, done);\n  }\n\n  /**\n   * Add translation files from the given directory.\n   *\n   * @param {String} dir The directory to scan.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  addFromDir(dir, done) {\n    'use strict';\n\n    var me = this;\n\n    function processFile(filename) {\n      return function (next) {\n        me.addFromFile(filename, next);\n      };\n    }\n\n    glob(path.join(dir, '**', '*.json'), function (err, files) {\n      if (err) {\n        return done(err);\n      }\n\n      var queue = [];\n      files.forEach(function (item) {\n        var splt = item.split('.');\n        if (splt.length === 3 && splt[1].length === 2) {\n          queue.push(processFile(item));\n        }\n      });\n\n      async.series(queue, function (err) {\n        done(err ? err : null);\n      });\n    });\n  }\n\n  /**\n   * Returns all defined translations for the given language.\n   *\n   * @param {String} language The language to return.\n   * @return {Object} An object containing the translation strings.\n   * @throws {Error} If the language is undefined.\n   */\n  locales(language) {\n    'use strict';\n\n    if (this[sLocales][language] === undefined) {\n      throw new Error(); // @todo\n    }\n\n    return this[sLocales][language];\n  }\n\n  /**\n   * Initializes the locale, collection translations from the database and\n   * provided directory.\n   *\n   * @param {String} dir The directory to read from.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  initialize(dir, done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    if (dir && dir !== '') {\n      queue.push(function (next) {\n        me.addFromDir(dir, next);\n      });\n    }\n\n    queue.push(function (next) {\n      me._addFromDatabase(next);\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Translates a given msg in the given language and stores in the database.\n   *\n   * @param {String} language The language the translation belongs to.\n   * @param {String} str The english message that this is translating.\n   * @param {String} translation The translated message to save.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  translate(language, str, translation, done) {\n    'use strict';\n\n    var me = this;\n\n    this[sDatabase].collection('locales').findOne({\n      language: language,\n      msg: str\n    }, function (err, doc) {\n      if (err) {\n        return done(err);\n      }\n\n      if (!doc) {\n        doc = {\n          language: language,\n          msg: str\n        };\n      }\n\n      doc.translation = translation;\n\n      if (me[sLocales][language] === undefined) {\n        me[sLocales][language] = {};\n      }\n      me[sLocales][language][str] = translation;\n\n      me[sDatabase].collection('locales').save(doc, function (err2) {\n        done(err2 ? err2 : null);\n      });\n    });\n  }\n\n  /**\n   * Translate the given string.\n   *\n   * @param {String} language The language to translate to.\n   * @param {String} str The string to translate to.\n   * @param {Object} [params] The params for token replacement.\n   * @return {String} The translated and token replaced string.\n   */\n  t(language, str, params) {\n    'use strict';\n\n    if (this[sLocales][language] && this[sLocales][language][str]) {\n      str = this[sLocales][language][str];\n    }\n\n    return this._strtr(str, params);\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "path",
    "memberof": "lib/Locale/index.js",
    "longname": "lib/Locale/index.js~path",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Locale/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sLocales",
    "memberof": "lib/Locale/index.js",
    "longname": "lib/Locale/index.js~sLocales",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Locale/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Locale",
    "memberof": "lib/Locale/index.js",
    "longname": "lib/Locale/index.js~Locale",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Locale/index.js",
    "importStyle": "Locale",
    "description": "The Locale class provides functionality for storing translation strings and\ntranslating a given string.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#constructor",
    "access": null,
    "description": "The Locale class constructor.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Database"
        ],
        "spread": false,
        "optional": false,
        "name": "database",
        "description": "The database manager."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "languages",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#languages",
    "access": null,
    "description": "Get the defined language names.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "database",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#database",
    "access": null,
    "description": "Gets the defined database manager.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_addFromDatabase",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#_addFromDatabase",
    "access": "private",
    "description": "Add translations stored in the database.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_processFile",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#_processFile",
    "access": "private",
    "description": "Processes the given JSON filename.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The translation file filename, note that it must\n  be in the format *.LANGUAGE.json."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_strtr",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#_strtr",
    "access": "private",
    "description": "Perform token string replacement, this is based upon the PHP.js strtr\nscript.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to replace."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The token params."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The replaced string."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFromFile",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#addFromFile",
    "access": null,
    "description": "Add translations from a JSON file.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The translation file filename, note that it must\n  be in the format *.LANGUAGE.json."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFromDir",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#addFromDir",
    "access": null,
    "description": "Add translation files from the given directory.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "The directory to scan."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "locales",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#locales",
    "access": null,
    "description": "Returns all defined translations for the given language.",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language to return."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object containing the translation strings."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the language is undefined."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initialize",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#initialize",
    "access": null,
    "description": "Initializes the locale, collection translations from the database and\nprovided directory.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "The directory to read from."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "translate",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#translate",
    "access": null,
    "description": "Translates a given msg in the given language and stores in the database.",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language the translation belongs to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The english message that this is translating."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "translation",
        "description": "The translated message to save."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "t",
    "memberof": "lib/Locale/index.js~Locale",
    "longname": "lib/Locale/index.js~Locale#t",
    "access": null,
    "description": "Translate the given string.",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language to translate to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to translate to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "The params for token replacement."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The translated and token replaced string."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/PluginManager/Errors/EPluginDisabled.js",
    "memberof": null,
    "longname": "lib/PluginManager/Errors/EPluginDisabled.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EPluginDisabled error which is thrown when attempting to disable\n * a plugin thats already disabled.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sPluginName = Symbol('EPluginDisabled.pluginName');\n\n/**\n * Thrown when tryng to disable a plugin thats already disabled.\n *\n * @extends {EError}\n */\nexport default class EPluginDisabled extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the plugin.\n   */\n  constructor(name) {\n    'use strict';\n\n    super();\n    this[sPluginName] = name;\n  }\n\n  /**\n   * The plugin name causing the error.\n   *\n   * @type {String}\n   */\n  get pluginName() {\n    'use strict';\n\n    return this[sPluginName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/PluginManager/Errors/EPluginDisabled.js",
    "longname": "lib/PluginManager/Errors/EPluginDisabled.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginDisabled.js",
    "importStyle": null,
    "description": "Provides the EPluginDisabled error which is thrown when attempting to disable\na plugin thats already disabled.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sPluginName",
    "memberof": "lib/PluginManager/Errors/EPluginDisabled.js",
    "longname": "lib/PluginManager/Errors/EPluginDisabled.js~sPluginName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginDisabled.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EPluginDisabled",
    "memberof": "lib/PluginManager/Errors/EPluginDisabled.js",
    "longname": "lib/PluginManager/Errors/EPluginDisabled.js~EPluginDisabled",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginDisabled.js",
    "importStyle": "EPluginDisabled",
    "description": "Thrown when tryng to disable a plugin thats already disabled.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/PluginManager/Errors/EPluginDisabled.js~EPluginDisabled",
    "longname": "lib/PluginManager/Errors/EPluginDisabled.js~EPluginDisabled#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "pluginName",
    "memberof": "lib/PluginManager/Errors/EPluginDisabled.js~EPluginDisabled",
    "longname": "lib/PluginManager/Errors/EPluginDisabled.js~EPluginDisabled#pluginName",
    "access": null,
    "description": "The plugin name causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/PluginManager/Errors/EPluginEnabled.js",
    "memberof": null,
    "longname": "lib/PluginManager/Errors/EPluginEnabled.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EPluginEnabled error which is thrown when attempting to enable\n * a plugin thats already enabled.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sPluginName = Symbol('EPluginEnabled.pluginName');\n\n/**\n * Thrown when tryng to enable a plugin thats already enabled.\n *\n * @extends {EError}\n */\nexport default class EPluginEnabled extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the plugin.\n   */\n  constructor(name) {\n    'use strict';\n\n    super();\n    this[sPluginName] = name;\n  }\n\n  /**\n   * The plugin name causing the error.\n   *\n   * @type {String}\n   */\n  get pluginName() {\n    'use strict';\n\n    return this[sPluginName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/PluginManager/Errors/EPluginEnabled.js",
    "longname": "lib/PluginManager/Errors/EPluginEnabled.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginEnabled.js",
    "importStyle": null,
    "description": "Provides the EPluginEnabled error which is thrown when attempting to enable\na plugin thats already enabled.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sPluginName",
    "memberof": "lib/PluginManager/Errors/EPluginEnabled.js",
    "longname": "lib/PluginManager/Errors/EPluginEnabled.js~sPluginName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginEnabled.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EPluginEnabled",
    "memberof": "lib/PluginManager/Errors/EPluginEnabled.js",
    "longname": "lib/PluginManager/Errors/EPluginEnabled.js~EPluginEnabled",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginEnabled.js",
    "importStyle": "EPluginEnabled",
    "description": "Thrown when tryng to enable a plugin thats already enabled.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/PluginManager/Errors/EPluginEnabled.js~EPluginEnabled",
    "longname": "lib/PluginManager/Errors/EPluginEnabled.js~EPluginEnabled#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "pluginName",
    "memberof": "lib/PluginManager/Errors/EPluginEnabled.js~EPluginEnabled",
    "longname": "lib/PluginManager/Errors/EPluginEnabled.js~EPluginEnabled#pluginName",
    "access": null,
    "description": "The plugin name causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "memberof": null,
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EPluginUnmetDependencies error which is thrown when attempting\n * to enable a plugin which has unmet dependencies.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sPluginName = Symbol('EPluginUnmetDependencies.pluginName'),\n    sPluginDependencies = Symbol('EPluginUnmetDependencies.dependencies');\n\n/**\n * Thrown when tryng to enable a plugin that has unmet dependencies.\n *\n * @extends {EError}\n */\nexport default class EPluginUnmetDependencies extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the plugin.\n   * @param {Object} dependencies The plugin dependencies info object.\n   */\n  constructor(name, dependencies) {\n    'use strict';\n\n    super();\n    this[sPluginName] = name;\n    this[sPluginDependencies] = dependencies;\n  }\n\n  /**\n   * The plugin name causing the error.\n   *\n   * @type {String}\n   */\n  get pluginName() {\n    'use strict';\n\n    return this[sPluginName];\n  }\n\n  /**\n   * The plugin dependencies.\n   *\n   * @type {Object}\n   */\n  get dependencies() {\n    'use strict';\n\n    return this[sPluginDependencies];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "importStyle": null,
    "description": "Provides the EPluginUnmetDependencies error which is thrown when attempting\nto enable a plugin which has unmet dependencies.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sPluginName",
    "memberof": "lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~sPluginName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EPluginUnmetDependencies",
    "memberof": "lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EPluginUnmetDependencies.js",
    "importStyle": "EPluginUnmetDependencies",
    "description": "Thrown when tryng to enable a plugin that has unmet dependencies.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies",
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dependencies",
        "description": "The plugin dependencies info object."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "pluginName",
    "memberof": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies",
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies#pluginName",
    "access": null,
    "description": "The plugin name causing the error.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "dependencies",
    "memberof": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies",
    "longname": "lib/PluginManager/Errors/EPluginUnmetDependencies.js~EPluginUnmetDependencies#dependencies",
    "access": null,
    "description": "The plugin dependencies.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/PluginManager/Errors/EUnknownPlugin.js",
    "memberof": null,
    "longname": "lib/PluginManager/Errors/EUnknownPlugin.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUnknownPlugin error which is thrown when attempting to use a\n * plugin that hasn't been indexed.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sPluginName = Symbol('EUnkownPlugin.pluginName');\n\n/**\n * Thrown when tryng to use an unknown plugin.\n *\n * @extends {EError}\n */\nexport default class EUnkownPlugin extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} name The name of the plugin.\n   */\n  constructor(name) {\n    'use strict';\n\n    super();\n    this[sPluginName] = name;\n  }\n\n  /**\n   * The plugin name causing the error.\n   *\n   * @type {String}\n   */\n  get pluginName() {\n    'use strict';\n\n    return this[sPluginName];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/PluginManager/Errors/EUnknownPlugin.js",
    "longname": "lib/PluginManager/Errors/EUnknownPlugin.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EUnknownPlugin.js",
    "importStyle": null,
    "description": "Provides the EUnknownPlugin error which is thrown when attempting to use a\nplugin that hasn't been indexed.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sPluginName",
    "memberof": "lib/PluginManager/Errors/EUnknownPlugin.js",
    "longname": "lib/PluginManager/Errors/EUnknownPlugin.js~sPluginName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EUnknownPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUnkownPlugin",
    "memberof": "lib/PluginManager/Errors/EUnknownPlugin.js",
    "longname": "lib/PluginManager/Errors/EUnknownPlugin.js~EUnkownPlugin",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/PluginManager/Errors/EUnknownPlugin.js",
    "importStyle": "EUnkownPlugin",
    "description": "Thrown when tryng to use an unknown plugin.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/PluginManager/Errors/EUnknownPlugin.js~EUnkownPlugin",
    "longname": "lib/PluginManager/Errors/EUnknownPlugin.js~EUnkownPlugin#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "pluginName",
    "memberof": "lib/PluginManager/Errors/EUnknownPlugin.js~EUnkownPlugin",
    "longname": "lib/PluginManager/Errors/EUnknownPlugin.js~EUnkownPlugin#pluginName",
    "access": null,
    "description": "The plugin name causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/PluginManager/Plugin.js",
    "memberof": null,
    "longname": "lib/PluginManager/Plugin.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * The base plugin class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar sName = Symbol('Plugin.name'),\n    sInfo = Symbol('Plugin.info');\n\n/**\n * The plugin base class.\n */\nexport default class Plugin {\n\n  /**\n   * Constructor for the plugin class.\n   *\n   * @param {String} name The name of the plugin.\n   * @param {Object} info The info object for the plugin.\n   */\n  constructor(name, info) {\n    'use strict';\n\n    this[sName] = name;\n    this[sInfo] = info;\n  }\n\n  /**\n   * The name of the plugin.\n   *\n   * @type {String}\n   */\n  get name() {\n    'use strict';\n\n    return this[sName];\n  }\n\n  /**\n   * The plugin info object.\n   *\n   * @type {Object}\n   */\n  get info() {\n    'use strict';\n\n    return this[sInfo];\n  }\n\n  /**\n   * Boot the plugin, this is called by the plugin manager when the plugin is\n   * booting. This will run when enabling everytime.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  boot(done) {\n    'use strict';\n\n    // @todo - does nothing.\n\n    done(null);\n  }\n\n  /**\n   * Enabling the plugin, this is called by the plugin manager when the plugin\n   * has been enabled for the first time the plugin is enabled or after being\n   * disabled.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  enable(done) {\n    'use strict';\n\n    // @todo - does nothing.\n\n    done(null);\n  }\n\n  /**\n   * Disable the plugin, this is called by the plugin manager when the plugin is\n   * being disabled.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  disable(done) {\n    'use strict';\n\n    // @todo - does nothing.\n\n    done(null);\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sName",
    "memberof": "lib/PluginManager/Plugin.js",
    "longname": "lib/PluginManager/Plugin.js~sName",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/Plugin.js",
    "importStyle": null,
    "description": "The base plugin class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Plugin",
    "memberof": "lib/PluginManager/Plugin.js",
    "longname": "lib/PluginManager/Plugin.js~Plugin",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/PluginManager/Plugin.js",
    "importStyle": "Plugin",
    "description": "The plugin base class.",
    "lineNumber": 27,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/PluginManager/Plugin.js~Plugin",
    "longname": "lib/PluginManager/Plugin.js~Plugin#constructor",
    "access": null,
    "description": "Constructor for the plugin class.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "The info object for the plugin."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "lib/PluginManager/Plugin.js~Plugin",
    "longname": "lib/PluginManager/Plugin.js~Plugin#name",
    "access": null,
    "description": "The name of the plugin.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "info",
    "memberof": "lib/PluginManager/Plugin.js~Plugin",
    "longname": "lib/PluginManager/Plugin.js~Plugin#info",
    "access": null,
    "description": "The plugin info object.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "boot",
    "memberof": "lib/PluginManager/Plugin.js~Plugin",
    "longname": "lib/PluginManager/Plugin.js~Plugin#boot",
    "access": null,
    "description": "Boot the plugin, this is called by the plugin manager when the plugin is\nbooting. This will run when enabling everytime.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "enable",
    "memberof": "lib/PluginManager/Plugin.js~Plugin",
    "longname": "lib/PluginManager/Plugin.js~Plugin#enable",
    "access": null,
    "description": "Enabling the plugin, this is called by the plugin manager when the plugin\nhas been enabled for the first time the plugin is enabled or after being\ndisabled.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disable",
    "memberof": "lib/PluginManager/Plugin.js~Plugin",
    "longname": "lib/PluginManager/Plugin.js~Plugin#disable",
    "access": null,
    "description": "Disable the plugin, this is called by the plugin manager when the plugin is\nbeing disabled.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/PluginManager/index.js",
    "memberof": null,
    "longname": "lib/PluginManager/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * The plugin manager class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar path = require('path'),\n    async = require('async'),\n    glob = require('glob'),\n    loader = require('nsloader'),\n    EUnknownPlugin = loader('EntityCI/PluginManager/Errors/EUnknownPlugin'),\n    EPluginEnabled = loader('EntityCI/PluginManager/Errors/EPluginEnabled'),\n    EPluginDisabled = loader('EntityCI/PluginManager/Errors/EPluginDisabled'),\n    EPluginUnmetDependencies = loader(\n      'EntityCI/PluginManager/Errors/EPluginUnmetDependencies'\n    );\n\nvar sPlugins = Symbol('Plugins.plugins'),\n    sInstalled = Symbol('Plugins.installed'),\n    sEnabled = Symbol('Plugins.enabled');\n\n/**\n * The plugin manager class.\n */\nexport default class PluginManager {\n\n  /**\n   * The plugin manager constructor.\n   */\n  constructor() {\n    'use strict';\n\n    this[sPlugins] = {};\n    this[sInstalled] = [];\n    this[sEnabled] = [];\n  }\n\n  /**\n   * An array of the indexed plugin names.\n   *\n   * @type {Array}\n   */\n  get plugins() {\n    'use strict';\n\n    return Object.keys(this[sPlugins]);\n  }\n\n  /**\n   * An array of enabled plugins.\n   *\n   * @type {Array}\n   */\n  get enabled() {\n    'use strict';\n\n    return this[sEnabled];\n  }\n\n  /**\n   * Load the plugin info file.\n   *\n   * @param {String} infoFilename The filename of the plugin info file.\n   * @private\n   */\n  _pluginInfo(infoFilename) {\n    'use strict';\n\n    var dir = path.dirname(infoFilename),\n        name = dir.substr(dir.lastIndexOf(path.sep) + 1),\n        info = require(infoFilename),\n        Plg = require(path.join(dir, info.main || 'index'));\n\n    this[sPlugins][name] = {\n      info: info,\n      plugin: new Plg(name)\n    };\n  }\n\n  /**\n   * Enable the given plugin, this is the first time the plugin is enabled or\n   * after it has been disabled.\n   *\n   * @param {String} name The name of the plugin to enable.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _enable(name, done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    queue.push(function (next) {\n      me[sPlugins][name].plugin.enable(next);\n    });\n\n    queue.push(function (next) {\n      me[sInstalled].push(name);\n      next();\n    });\n\n    async.series(queue, function (err) {\n      loader('EntityCI').eventManager.fire('plugin.enabled', null, {\n        plugin: name\n      });\n\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Boot the given plugin.\n   *\n   * @param {String} name The name of the plugin to boot.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _boot(name, done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    queue.push(function (next) {\n      me[sPlugins][name].plugin.boot(next);\n    });\n\n    queue.push(function (next) {\n      me[sEnabled].push(name);\n      next();\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Disable the given plugin.\n   *\n   * @param {String} name The name of the plugin to disable.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @private\n   */\n  _disable(name, done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    queue.push(function (next) {\n      me[sPlugins][name].plugin.disable(next);\n    });\n\n    queue.push(function (next) {\n      me[sInstalled].splice(me[sInstalled].indexOf(name), 1);\n      next();\n    });\n\n    queue.push(function (next) {\n      me[sEnabled].splice(me[sEnabled].indexOf(name), 1);\n      next();\n    });\n\n    async.series(queue, function (err) {\n      loader('EntityCI').eventManager.fire('plugin.disabled', null, {\n        plugin: name\n      });\n\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Find plugin info files to index.\n   *\n   * @param {String} dir The directory to search.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  index(dir, done) {\n    'use strict';\n\n    var me = this;\n    glob(path.join(dir, '**', 'plugin.json'), function (err, files) {\n      if (err) {\n        return done(err);\n      }\n\n      files.forEach(function (item) {\n        me._pluginInfo(item);\n      });\n\n      done();\n    });\n  }\n\n  /**\n   * Initializes the plugins and enables the provided plugins.\n   *\n   * @param {Array} plugins An array of plugin names to enable.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  initialize(plugins, done) {\n    'use strict';\n\n    plugins = plugins || [];\n\n    var me = this,\n        queue = [];\n\n    function enable(plugin) {\n      return function (next) {\n        me[sInstalled].push(plugin);\n        me.enable(plugin, next);\n      };\n    }\n\n    plugins.forEach(function (item) {\n      queue.push(enable(item));\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Get a plugin object.\n   *\n   * @param {String} name The name of the plugin to get.\n   * @return {Plugin} Returns the plugin or null if it can't be found.\n   */\n  plugin(name) {\n    'use strict';\n\n    return this[sPlugins][name] && this[sEnabled].indexOf(name) > -1 ?\n      this[sPlugins][name].plugin :\n      null;\n  }\n\n  /**\n   * Determines if the given plugin has been enabled.\n   *\n   * @param {String} name The name of the plugin.\n   * @return {Boolean} Returns true if the plugin has been enabled.\n   */\n  isEnabled(name) {\n    'use strict';\n\n    return this[sEnabled].indexOf(name) > -1;\n  }\n\n  /**\n   * Get the dependency information, and if the plugin can be enabled.\n   *\n   * @param {String} name The name of the plugin.\n   * @return {Object} The dependency info.\n   */\n  dependencies(name) {\n    'use strict';\n\n    if (this[sPlugins][name] === undefined) {\n      throw new EUnknownPlugin(name);\n    }\n\n    var dependencies = this[sPlugins][name].info.dependencies || [],\n        unmet = [];\n\n    if (dependencies.length) {\n      for (var i = 0, len = dependencies.length; i < len; i++) {\n        if (this[sPlugins][dependencies[i]] === undefined) {\n          unmet.push(dependencies[i]);\n        }\n      }\n    }\n\n    return {\n      plugins: dependencies,\n      unmet: unmet,\n      can: unmet.length === 0\n    };\n  }\n\n  /**\n   * Enables the given plugin.\n   *\n   * @param {String} name The name of the plugin to enable.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @throws {EUnkownPlugin} If the plugin hasn't been indexed.\n   * @throws {EPluginEnabled} If the plugin has already been enabled.\n   * @throws {EPluginUnmetDependencies} If the plugin dependencies are unmet.\n   */\n  enable(name, done) {\n    'use strict';\n\n    if (this[sPlugins][name] === undefined) {\n      return done(new EUnknownPlugin(name));\n    }\n\n    if (this[sEnabled].indexOf(name) > -1) {\n      return done(new EPluginEnabled(name));\n    }\n\n    var dependencies = this.dependencies(name);\n    if (dependencies.can === false) {\n      return done(new EPluginUnmetDependencies(name, dependencies));\n    }\n\n    var me = this,\n        queue = [];\n\n    function enableDependency(plugin) {\n      return function (next) {\n        me.enable(plugin, next);\n      };\n    }\n\n    dependencies.plugins.forEach(function (item) {\n      if (me[sEnabled].indexOf(item) === -1) {\n        queue.push(enableDependency(item));\n      }\n    });\n\n    if (this[sInstalled].indexOf(name) === -1) {\n      queue.push(function (next) {\n        me._enable(name, next);\n      });\n    }\n\n    queue.push(function (next) {\n      me._boot(name, next);\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Disabled the given plugin.\n   *\n   * @param {String} name The name of the plugin to disable.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @throws {EUnkownPlugin} If the plugin hasn't been indexed.\n   * @throws {EPluginDisabled} If the plugin hasn't been enabled.\n   */\n  disable(name, done) {\n    'use strict';\n\n    if (this[sPlugins][name] === undefined) {\n      return done(new EUnknownPlugin(name));\n    }\n\n    if (this[sEnabled].indexOf(name) === -1) {\n      return done(new EPluginDisabled(name));\n    }\n\n    this._disable(name, function (err) {\n      done(err ? err : null);\n    });\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "path",
    "memberof": "lib/PluginManager/index.js",
    "longname": "lib/PluginManager/index.js~path",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/index.js",
    "importStyle": null,
    "description": "The plugin manager class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sPlugins",
    "memberof": "lib/PluginManager/index.js",
    "longname": "lib/PluginManager/index.js~sPlugins",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/PluginManager/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PluginManager",
    "memberof": "lib/PluginManager/index.js",
    "longname": "lib/PluginManager/index.js~PluginManager",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/PluginManager/index.js",
    "importStyle": "PluginManager",
    "description": "The plugin manager class.",
    "lineNumber": 39,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#constructor",
    "access": null,
    "description": "The plugin manager constructor.",
    "lineNumber": 44,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "plugins",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#plugins",
    "access": null,
    "description": "An array of the indexed plugin names.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "enabled",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#enabled",
    "access": null,
    "description": "An array of enabled plugins.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_pluginInfo",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#_pluginInfo",
    "access": "private",
    "description": "Load the plugin info file.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "infoFilename",
        "description": "The filename of the plugin info file."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_enable",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#_enable",
    "access": "private",
    "description": "Enable the given plugin, this is the first time the plugin is enabled or\nafter it has been disabled.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin to enable."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_boot",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#_boot",
    "access": "private",
    "description": "Boot the given plugin.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin to boot."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_disable",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#_disable",
    "access": "private",
    "description": "Disable the given plugin.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin to disable."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "index",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#index",
    "access": null,
    "description": "Find plugin info files to index.",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "The directory to search."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initialize",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#initialize",
    "access": null,
    "description": "Initializes the plugins and enables the provided plugins.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "plugins",
        "description": "An array of plugin names to enable."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "plugin",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#plugin",
    "access": null,
    "description": "Get a plugin object.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin to get."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plugin"
      ],
      "spread": false,
      "description": "Returns the plugin or null if it can't be found."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEnabled",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#isEnabled",
    "access": null,
    "description": "Determines if the given plugin has been enabled.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if the plugin has been enabled."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dependencies",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#dependencies",
    "access": null,
    "description": "Get the dependency information, and if the plugin can be enabled.",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The dependency info."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "enable",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#enable",
    "access": null,
    "description": "Enables the given plugin.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin to enable."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EUnkownPlugin"
        ],
        "description": "If the plugin hasn't been indexed."
      },
      {
        "types": [
          "EPluginEnabled"
        ],
        "description": "If the plugin has already been enabled."
      },
      {
        "types": [
          "EPluginUnmetDependencies"
        ],
        "description": "If the plugin dependencies are unmet."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disable",
    "memberof": "lib/PluginManager/index.js~PluginManager",
    "longname": "lib/PluginManager/index.js~PluginManager#disable",
    "access": null,
    "description": "Disabled the given plugin.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin to disable."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EUnkownPlugin"
        ],
        "description": "If the plugin hasn't been indexed."
      },
      {
        "types": [
          "EPluginDisabled"
        ],
        "description": "If the plugin hasn't been enabled."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Sanitizers/Errors/EInvalidValue.js",
    "memberof": null,
    "longname": "lib/Sanitizers/Errors/EInvalidValue.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EInvalidValue error which is thrown when the provided value\n * is not a valid for the sanitizer.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EInvalidValue.value');\n\n/**\n * Thrown when trying to sanitize an unsupported value.\n *\n * @extends {EError}\n */\nexport default class EInvalidValue extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   */\n  constructor(value) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Sanitizers/Errors/EInvalidValue.js",
    "longname": "lib/Sanitizers/Errors/EInvalidValue.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/Errors/EInvalidValue.js",
    "importStyle": null,
    "description": "Provides the EInvalidValue error which is thrown when the provided value\nis not a valid for the sanitizer.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Sanitizers/Errors/EInvalidValue.js",
    "longname": "lib/Sanitizers/Errors/EInvalidValue.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/Errors/EInvalidValue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EInvalidValue",
    "memberof": "lib/Sanitizers/Errors/EInvalidValue.js",
    "longname": "lib/Sanitizers/Errors/EInvalidValue.js~EInvalidValue",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Sanitizers/Errors/EInvalidValue.js",
    "importStyle": "EInvalidValue",
    "description": "Thrown when trying to sanitize an unsupported value.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Sanitizers/Errors/EInvalidValue.js~EInvalidValue",
    "longname": "lib/Sanitizers/Errors/EInvalidValue.js~EInvalidValue#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Sanitizers/Errors/EInvalidValue.js~EInvalidValue",
    "longname": "lib/Sanitizers/Errors/EInvalidValue.js~EInvalidValue#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "memberof": null,
    "longname": "lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUnknownSanitizer error which is used when attempting to use\n * an unknown sanitizer.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sRule = Symbol('EUnknownSanitizer.rule');\n\n/**\n * Thrown when tryng to use an unknown santizer.\n *\n * @class EUnknownSanitizer\n * @extends Error\n */\nexport default class EUnknownSanitizer extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} rule The name of the rule.\n   */\n  constructor(rule) {\n    'use strict';\n\n    super();\n    this[sRule] = rule;\n  }\n\n  /**\n   * The name of the rule causing the error.\n   *\n   * @type String\n   */\n  get rule() {\n    'use strict';\n\n    return this[sRule];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "longname": "lib/Sanitizers/Errors/EUnknownSanitizer.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "importStyle": null,
    "description": "Provides the EUnknownSanitizer error which is used when attempting to use\nan unknown sanitizer.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sRule",
    "memberof": "lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "longname": "lib/Sanitizers/Errors/EUnknownSanitizer.js~sRule",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUnknownSanitizer",
    "memberof": "lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "longname": "lib/Sanitizers/Errors/EUnknownSanitizer.js~EUnknownSanitizer",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Sanitizers/Errors/EUnknownSanitizer.js",
    "importStyle": "EUnknownSanitizer",
    "description": "Thrown when tryng to use an unknown santizer.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EUnknownSanitizer"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Sanitizers/Errors/EUnknownSanitizer.js~EUnknownSanitizer",
    "longname": "lib/Sanitizers/Errors/EUnknownSanitizer.js~EUnknownSanitizer#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "The name of the rule."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rule",
    "memberof": "lib/Sanitizers/Errors/EUnknownSanitizer.js~EUnknownSanitizer",
    "longname": "lib/Sanitizers/Errors/EUnknownSanitizer.js~EUnknownSanitizer#rule",
    "access": null,
    "description": "The name of the rule causing the error.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Sanitizers/Rules/Trim.js",
    "memberof": null,
    "longname": "lib/Sanitizers/Rules/Trim.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * The trim sanitizer rule.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EInvalidValue = loader('EntityCI/Sanitizers/Errors/EInvalidValue');\n\n/**\n * Trim sanitizer.\n *\n * @param {Mixed} orig The original value.\n * @param {Mixed} value The value to validate.\n * @param {Object} options The options passed to the validator.\n * @param {Function} next The next callback.\n * @param {Error} next.err Any raised errors.\n * @throws {EInvalidValue} Thrown if the value is not a string.\n */\nexport default function sanitizeTrim (orig, value, options, next) {\n  'use strict';\n\n  if (typeof value !== 'string') {\n    return next(new EInvalidValue(value), value);\n  }\n\n  next(null, value.trim());\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Sanitizers/Rules/Trim.js",
    "longname": "lib/Sanitizers/Rules/Trim.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/Rules/Trim.js",
    "importStyle": null,
    "description": "The trim sanitizer rule.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sanitizeTrim",
    "memberof": "lib/Sanitizers/Rules/Trim.js",
    "longname": "lib/Sanitizers/Rules/Trim.js~sanitizeTrim",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Sanitizers/Rules/Trim.js",
    "importStyle": "sanitizeTrim",
    "description": "Trim sanitizer.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "orig",
        "description": "The original value."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "next.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EInvalidValue"
        ],
        "description": "Thrown if the value is not a string."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Sanitizers/index.js",
    "memberof": null,
    "longname": "lib/Sanitizers/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Sanitizers class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    sortBy = loader('EntityCI/Utils/SortBy'),\n    EUnknownSanitizer = loader('EntityCI/Sanitizers/Errors/EUnknownSanitizer');\n\nvar sRules = Symbol.for('Sanitizers.rules');\n\n/**\n * The Sanitizers class.\n */\nexport default class Sanitizers {\n\n  /**\n   * The validators class constructor.\n   */\n  constructor() {\n    'use strict';\n\n    this[sRules] = {};\n    this.register('trim', loader('EntityCI/Sanitizers/Rules/Trim'));\n  }\n\n  /**\n   * The names of the defined rules.\n   *\n   * @type {Array}\n   */\n  get rules() {\n    'use strict';\n\n    return Object.keys(this[sRules]);\n  }\n\n  /**\n   * Registers a new sanitizer rule.\n   *\n   * @param {String} name The name of the sanitizer.\n   * @param {Function} cb The sanitizer callback.\n   * @param {Mixed} cb.orig The original value.\n   * @param {Mixed} cb.value The value to be validated.\n   * @param {Object} cb.options The options passed to the validator.\n   * @param {Function} cb.next Call the next rule callback.\n   * @param {Error} cb.next.err Any raised errors.\n   * @param {Mixed} cb.next.value The sanitized value.\n   * @param {Integer} [weight=0] The weight to apply to the callback.\n   * @returns {Sanitizers} Returns self.\n   */\n  register(name, cb, weight) {\n    'use strict';\n\n    if (this[sRules][name] === undefined) {\n      this[sRules][name] = [];\n    }\n\n    this[sRules][name].push({\n      callback: cb,\n      weight: weight || 0\n    });\n\n    sortBy(this[sRules][name], 'weight');\n    return this;\n  }\n\n  /**\n   * Determines if a sanitizer has been registered.\n   *\n   * @param {String} name The name of the sanitizer.\n   * @returns {Boolean} Returns true or false.\n   */\n  registered(name) {\n    'use strict';\n\n    return this[sRules][name] !== undefined;\n  }\n\n  /**\n   * Unregisters a sanitizer or a sanitizers callback.\n   *\n   * @param {String} name The name of the sanitizer to remove.\n   * @param {Function} [cb] The specific callback to remove.\n   * @returns {Sanitizers} Returns self.\n   */\n  unregister(name, cb) {\n    'use strict';\n\n    if (this[sRules][name] === undefined) {\n      throw new EUnknownSanitizer(name);\n    }\n\n    if (cb === undefined) {\n      delete this[sRules][name];\n    } else {\n      var tmp = [];\n\n      for (var i = 0, len = this[sRules][name].length; i < len; i++) {\n        if (this[sRules][name][i].callback === cb) {\n          continue;\n        }\n\n        tmp.push(this[sRules][name][i]);\n      }\n\n      if (tmp.length > 0) {\n        this[sRules][name] = tmp;\n      } else {\n        delete this[sRules][name];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Attempts to sanitize the value.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Mixed} done.value The sanitized value.\n   * @param {String|Array} name The name(s) of the sanitizer(s) to run.\n   * @param {Mixed} value The value to sanitize.\n   */\n  sanitize(done, name, value, options) {\n    'use strict';\n\n    if (this[sRules][name] === undefined) {\n      return done(new EUnknownSanitizer(name));\n    }\n\n    var val = value,\n        queue = [];\n\n    function execSanitizer(sanitizer) {\n      return function (next) {\n        try {\n          sanitizer.callback.call(\n            null,\n            value,\n            val,\n            options || {},\n            function (err, sVal) {\n              if (err) {\n                return next(err);\n              }\n\n              val = sVal;\n              next();\n            }\n          );\n        } catch (e) {\n          next(e);\n        }\n      };\n    }\n\n    for (var i = 0, len = this[sRules][name].length; i < len; i++) {\n      queue.push(execSanitizer(this[sRules][name][i]));\n    }\n\n    async.series(queue, function (err) {\n      done(err ? err : null, value, val);\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/Sanitizers/index.js",
    "longname": "lib/Sanitizers/index.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/index.js",
    "importStyle": null,
    "description": "Provides the Sanitizers class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sRules",
    "memberof": "lib/Sanitizers/index.js",
    "longname": "lib/Sanitizers/index.js~sRules",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Sanitizers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Sanitizers",
    "memberof": "lib/Sanitizers/index.js",
    "longname": "lib/Sanitizers/index.js~Sanitizers",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Sanitizers/index.js",
    "importStyle": "Sanitizers",
    "description": "The Sanitizers class.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Sanitizers/index.js~Sanitizers",
    "longname": "lib/Sanitizers/index.js~Sanitizers#constructor",
    "access": null,
    "description": "The validators class constructor.",
    "lineNumber": 36,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rules",
    "memberof": "lib/Sanitizers/index.js~Sanitizers",
    "longname": "lib/Sanitizers/index.js~Sanitizers#rules",
    "access": null,
    "description": "The names of the defined rules.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "register",
    "memberof": "lib/Sanitizers/index.js~Sanitizers",
    "longname": "lib/Sanitizers/index.js~Sanitizers#register",
    "access": null,
    "description": "Registers a new sanitizer rule.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Sanitizers} Returns self."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the sanitizer."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "The sanitizer callback."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.orig",
        "description": "The original value."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.value",
        "description": "The value to be validated."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.next",
        "description": "Call the next rule callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.next.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.next.value",
        "description": "The sanitized value."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "weight",
        "description": "The weight to apply to the callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Sanitizers"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registered",
    "memberof": "lib/Sanitizers/index.js~Sanitizers",
    "longname": "lib/Sanitizers/index.js~Sanitizers#registered",
    "access": null,
    "description": "Determines if a sanitizer has been registered.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Returns true or false."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the sanitizer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true or false."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregister",
    "memberof": "lib/Sanitizers/index.js~Sanitizers",
    "longname": "lib/Sanitizers/index.js~Sanitizers#unregister",
    "access": null,
    "description": "Unregisters a sanitizer or a sanitizers callback.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Sanitizers} Returns self."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the sanitizer to remove."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "cb",
        "description": "The specific callback to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Sanitizers"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sanitize",
    "memberof": "lib/Sanitizers/index.js~Sanitizers",
    "longname": "lib/Sanitizers/index.js~Sanitizers#sanitize",
    "access": null,
    "description": "Attempts to sanitize the value.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "done.value",
        "description": "The sanitized value."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name(s) of the sanitizer(s) to run."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to sanitize."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Utils/Config.js",
    "memberof": null,
    "longname": "lib/Utils/Config.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Config class allowing access to the config.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar fs = require('fs'),\n    loader = require('nsloader'),\n    Data = loader('EntityCI/Utils/Data');\n\nvar sConfigFilename = Symbol('Config.filename');\n\n/**\n * The Config class providing methods to access the config options.\n *\n * @extends {Data}\n */\nexport default class Config extends Data {\n\n  /**\n   * Construct the config object.\n   *\n   * @param {String} filename The filename of the config file.\n   */\n  constructor(filename) {\n    'use strict';\n\n    super(null, '.');\n    this[sConfigFilename] = filename;\n  }\n\n  /**\n   * Get the configs filename.\n   *\n   * @type {String}\n   */\n  get filename() {\n    'use strict';\n\n    return this[sConfigFilename];\n  }\n\n  /**\n   * Saves the config file.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any errors raised.\n   */\n  save(done) {\n    'use strict';\n\n    fs.writeFile(\n      this.filename,\n      JSON.stringify(this.data),\n      function (err) {\n        done(err ? err : null);\n      }\n    );\n  }\n\n  /**\n   * Restores the config object from the config file.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   */\n  load(done) {\n    'use strict';\n\n    if (this.filename === '') {\n      return done(new Error());\n    }\n\n    var me = this;\n    fs.readFile(this.filename, function (err, data) {\n      if (err) {\n        return done(err);\n      }\n\n      try {\n        me.data = JSON.parse(data);\n        done(null);\n      } catch (e) {\n        done(e);\n      }\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fs",
    "memberof": "lib/Utils/Config.js",
    "longname": "lib/Utils/Config.js~fs",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Utils/Config.js",
    "importStyle": null,
    "description": "Provides the Config class allowing access to the config.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sConfigFilename",
    "memberof": "lib/Utils/Config.js",
    "longname": "lib/Utils/Config.js~sConfigFilename",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Utils/Config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Config",
    "memberof": "lib/Utils/Config.js",
    "longname": "lib/Utils/Config.js~Config",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Utils/Config.js",
    "importStyle": "Config",
    "description": "The Config class providing methods to access the config options.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "Data"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Utils/Config.js~Config",
    "longname": "lib/Utils/Config.js~Config#constructor",
    "access": null,
    "description": "Construct the config object.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The filename of the config file."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filename",
    "memberof": "lib/Utils/Config.js~Config",
    "longname": "lib/Utils/Config.js~Config#filename",
    "access": null,
    "description": "Get the configs filename.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "lib/Utils/Config.js~Config",
    "longname": "lib/Utils/Config.js~Config#save",
    "access": null,
    "description": "Saves the config file.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any errors raised."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "lib/Utils/Config.js~Config",
    "longname": "lib/Utils/Config.js~Config#load",
    "access": null,
    "description": "Restores the config object from the config file.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Utils/Data.js",
    "memberof": null,
    "longname": "lib/Utils/Data.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides a helper object which provides some data/eval manipulation.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar sData = Symbol('Data.data'),\n    sSep = Symbol('Data.sep');\n\n/**\n * The data manipulation class.\n */\nexport default class Data {\n\n  /**\n   * Construct the data object.\n   *\n   * @param {Object} [data=null] The data object to manipulate, if null then one\n   *   is created.\n   * @param {String} [sep=\".\"] The seperator to use to seperate each xpath\n   *   element.\n   */\n  constructor(data, sep) {\n    'use strict';\n\n    this[sData] = data || {};\n    this[sSep] = sep || '.';\n  }\n\n  /**\n   * Get the internal data object.\n   *\n   * @type {Object}\n   */\n  get data() {\n    'use strict';\n\n    return this[sData];\n  }\n\n  /**\n   * Set the internal data object.\n   *\n   * @type {Object}\n   */\n  set data(data) {\n    'use strict';\n\n    this[sData] = data;\n  }\n\n  /**\n   * Get the seperator that is used to seperate the elements in an xpath.\n   *\n   * @type {String}\n   */\n  get seperator() {\n    'use strict';\n\n    return this[sSep];\n  }\n\n  /**\n   * Helper function to convert a property name to an XPath used through eval to\n   * get or set a config value.\n   *\n   * @param {String} name The name of the property.\n   * @return {String} The name converted to an eval xpath.\n   * @private\n   */\n  _nameToXPath(name) {\n    'use strict';\n\n    return name.split(this[sSep]).join('\"][\"');\n  }\n\n  /**\n   * Determines if the provided property exists.\n   *\n   * @param {String} name The name of the property to check.\n   * @return {Boolean} Returns true or false.\n   */\n  has(name) {\n    'use strict';\n\n    var has = false;\n\n    /* jshint -W061 */\n    /* eslint-disable */\n    eval('try {\\\n      has = this.data[\"' + this._nameToXPath(name) + '\"] !== undefined;\\\n    } catch (err) {\\\n      has = false;\\\n    }');\n    /* eslint-enable */\n\n    return has;\n  }\n\n  /**\n   * Get the value of the property, or the default value.\n   *\n   * @param {String} name The name of the property to get.\n   * @param {Mixed} [def=null] The default value to return if the property\n   *   doesnt exist.\n   * @return {Mixed} Returns the property value, otherwise the def value.\n   */\n  get(name, def) {\n    'use strict';\n\n    if (def === undefined) {\n      def = null;\n    }\n\n    var n = this._nameToXPath(name),\n        val;\n\n    /* jshint -W061 */\n    /* eslint-disable */\n    eval('try {\\\n      val = this.data[\"' + n + '\"] !== undefined ? \\\n        this.data[\"' + n + '\"] : \\\n        def;\\\n    } catch (err) {\\\n      val = def;\\\n    }');\n    /* eslint-enable */\n\n    return val;\n  }\n\n  /**\n   * Set the value of a property.\n   *\n   * @param {String} name The name of the property to set.\n   * @param {Mixed} value The value to assign.\n   * @returns {Data} Returns self.\n   */\n  set(name, value) {\n    'use strict';\n\n    var ns = name.split(this[sSep]),\n        xpath = '';\n\n    for (var i = 0, len = ns.length - 1; i < len; i++) {\n      xpath += (i > 0 ? '\"][\"' : '') + ns[i];\n\n      /* jshint -W061 */\n      /* eslint-disable */\n      eval('if (this.data[\"' + xpath + '\"] === undefined) {\\\n        this.data[\"' + xpath + '\"] = {};\\\n      }');\n      /* eslint-enable */\n    }\n\n    /* jshint -W061 */\n    /* eslint-disable */\n    eval('this.data[\"' + this._nameToXPath(name) + '\"] = value;');\n    /* eslint-enable */\n\n    return this;\n  }\n\n  /**\n   * Deletes the value of a property.\n   *\n   * @param {String} name The name of the property to delete.\n   * @returns {Data} Returns self.\n   */\n  del(name) {\n    'use strict';\n\n    /* jshint -W061 */\n    /* eslint-disable */\n    eval('delete this.data[\"' + this._nameToXPath(name) + '\"];');\n    /* eslint-enable */\n\n    return this;\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sData",
    "memberof": "lib/Utils/Data.js",
    "longname": "lib/Utils/Data.js~sData",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Utils/Data.js",
    "importStyle": null,
    "description": "Provides a helper object which provides some data/eval manipulation.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Data",
    "memberof": "lib/Utils/Data.js",
    "longname": "lib/Utils/Data.js~Data",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Utils/Data.js",
    "importStyle": "Data",
    "description": "The data manipulation class.",
    "lineNumber": 27,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#constructor",
    "access": null,
    "description": "Construct the data object.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "data",
        "description": "The data object to manipulate, if null then one\n  is created."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\".\"",
        "defaultRaw": ".",
        "name": "sep",
        "description": "The seperator to use to seperate each xpath\n  element."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#data",
    "access": null,
    "description": "Get the internal data object.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#data",
    "access": null,
    "description": "Set the internal data object.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "seperator",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#seperator",
    "access": null,
    "description": "Get the seperator that is used to seperate the elements in an xpath.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_nameToXPath",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#_nameToXPath",
    "access": "private",
    "description": "Helper function to convert a property name to an XPath used through eval to\nget or set a config value.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The name converted to an eval xpath."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "has",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#has",
    "access": null,
    "description": "Determines if the provided property exists.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the property to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true or false."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#get",
    "access": null,
    "description": "Get the value of the property, or the default value.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the property to get."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "def",
        "description": "The default value to return if the property\n  doesnt exist."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Mixed"
      ],
      "spread": false,
      "description": "Returns the property value, otherwise the def value."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#set",
    "access": null,
    "description": "Set the value of a property.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Data} Returns self."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the property to set."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to assign."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Data"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "del",
    "memberof": "lib/Utils/Data.js~Data",
    "longname": "lib/Utils/Data.js~Data#del",
    "access": null,
    "description": "Deletes the value of a property.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Data} Returns self."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the property to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Data"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Utils/SortBy.js",
    "memberof": null,
    "longname": "lib/Utils/SortBy.js",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Sort By functionality.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\n/**\n * Sort an array object.\n *\n * @param {Array} item The item to sort.\n * @param {String} key The key to use for sorting.\n * @param {Boolean} [reverse=false] - Reverse the order.\n */\nfunction arraySortBy (item, key, reverse) {\n  'use strict';\n\n  item.sort(function (a, b) {\n    var aw = a[key] !== undefined ? (\n          typeof a[key] === 'function' ?\n            parseInt(a[key](), 10) :\n            parseInt(a[key], 10)\n        ) : 0,\n        bw = b[key] !== undefined ? (\n          typeof b[key] === 'function' ?\n            parseInt(b[key](), 10) :\n            parseInt(b[key], 10)\n        ) : 0;\n\n    if (aw === bw) {\n      return 0;\n    }\n\n    return reverse !== true && aw < bw ? -1 : 1;\n  });\n}\n\n/**\n * Sort an object.\n *\n * @param {Object} item The item to sort.\n * @param {String} key The key to use for sorting.\n * @param {Boolean} [reverse=false] Reverse the order.\n */\nfunction objectSortBy(item, key, reverse) {\n  'use strict';\n\n  var keys = [];\n  for (var k in item) {\n    if (typeof item[k] === 'function') {\n      continue;\n    }\n\n    keys.push({key: k, value: item[k]});\n    delete item[k];\n  }\n\n  keys.sort(function (a, b) {\n    var aw = a.value[key] !== undefined ? parseInt(a.value[key], 10) : 0,\n        bw = b.value[key] !== undefined ? parseInt(b.value[key], 10) : 0;\n\n    if (aw === bw) {\n      return 0;\n    }\n\n    return reverse !== true && aw < bw ? -1 : 1;\n  });\n\n  keys.forEach(function (value) {\n    item[value.key] = value.value;\n  });\n}\n\n/**\n * Sort an array or object by a defined key.\n *\n * @param {Array|Object} item The item to sort.\n * @param {String} key The key to sort by.\n * @param {Boolean} [reverse=false] Reverse the order.\n */\nexport default function sortBy (item, key, reverse) {\n  'use strict';\n\n  if (item instanceof Array) {\n    arraySortBy(item, key, reverse);\n  } else if (item instanceof Object) {\n    objectSortBy(item, key, reverse);\n  }\n}\n"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "arraySortBy",
    "memberof": "lib/Utils/SortBy.js",
    "longname": "lib/Utils/SortBy.js~arraySortBy",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Utils/SortBy.js",
    "importStyle": null,
    "description": "Sort an array object.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item to sort."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to use for sorting."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "reverse",
        "description": "Reverse the order."
      }
    ],
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "objectSortBy",
    "memberof": "lib/Utils/SortBy.js",
    "longname": "lib/Utils/SortBy.js~objectSortBy",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Utils/SortBy.js",
    "importStyle": null,
    "description": "Sort an object.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item to sort."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to use for sorting."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "reverse",
        "description": "Reverse the order."
      }
    ],
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sortBy",
    "memberof": "lib/Utils/SortBy.js",
    "longname": "lib/Utils/SortBy.js~sortBy",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Utils/SortBy.js",
    "importStyle": "sortBy",
    "description": "Sort an array or object by a defined key.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item to sort."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to sort by."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "reverse",
        "description": "Reverse the order."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EInvalidCharacters.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EInvalidCharacters.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EInvalidCharacters error which is thrown when the provided\n * value contains invalid characters.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EInvalidCharacters.value'),\n    sRule = Symbol('EInvalidCharacters.rule');\n\n/**\n * Thrown when tryng to validate a value with invalid characters.\n *\n * @extends {EError}\n */\nexport default class EInvalidCharacters extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   * @param {String} rule The allowed characters.\n   */\n  constructor(value, rule) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n    this[sRule] = rule;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n  /**\n   * The rule causing the error.\n   *\n   * @type {String}\n   */\n  get rule() {\n    'use strict';\n\n    return this[sRule];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EInvalidCharacters.js",
    "longname": "lib/Validators/Errors/EInvalidCharacters.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidCharacters.js",
    "importStyle": null,
    "description": "Provides the EInvalidCharacters error which is thrown when the provided\nvalue contains invalid characters.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EInvalidCharacters.js",
    "longname": "lib/Validators/Errors/EInvalidCharacters.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidCharacters.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EInvalidCharacters",
    "memberof": "lib/Validators/Errors/EInvalidCharacters.js",
    "longname": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidCharacters.js",
    "importStyle": "EInvalidCharacters",
    "description": "Thrown when tryng to validate a value with invalid characters.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters",
    "longname": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "The allowed characters."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters",
    "longname": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rule",
    "memberof": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters",
    "longname": "lib/Validators/Errors/EInvalidCharacters.js~EInvalidCharacters#rule",
    "access": null,
    "description": "The rule causing the error.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EInvalidEmail.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EInvalidEmail.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EInvalidEmail error which is thrown when the provided value\n * is not a valid email address.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EInvalidEmail.value');\n\n/**\n * Thrown when trying to validate a value which is not a valid email address.\n *\n * @extends {EError}\n */\nexport default class EInvalidEmail extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   */\n  constructor(value) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EInvalidEmail.js",
    "longname": "lib/Validators/Errors/EInvalidEmail.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidEmail.js",
    "importStyle": null,
    "description": "Provides the EInvalidEmail error which is thrown when the provided value\nis not a valid email address.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EInvalidEmail.js",
    "longname": "lib/Validators/Errors/EInvalidEmail.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidEmail.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EInvalidEmail",
    "memberof": "lib/Validators/Errors/EInvalidEmail.js",
    "longname": "lib/Validators/Errors/EInvalidEmail.js~EInvalidEmail",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidEmail.js",
    "importStyle": "EInvalidEmail",
    "description": "Thrown when trying to validate a value which is not a valid email address.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EInvalidEmail.js~EInvalidEmail",
    "longname": "lib/Validators/Errors/EInvalidEmail.js~EInvalidEmail#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EInvalidEmail.js~EInvalidEmail",
    "longname": "lib/Validators/Errors/EInvalidEmail.js~EInvalidEmail#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EInvalidLength.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EInvalidLength.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EInvalidLength error which is thrown when the provided value\n * contains too many or too few characters.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EInvalidLength.value'),\n    sMin = Symbol('EInvalidLength.min'),\n    sMax = Symbol('EInvalidLength.max');\n\n/**\n * Thrown when trying to validate a value which is smaller or larger than the\n * min and max requirements.\n *\n * @extends {EError}\n */\nexport default class EInvalidLength extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   * @param {Integer} min The minimum allowed characters.\n   * @param {Integer} max The maximum allowed characters.\n   */\n  constructor(value, min, max) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n    this[sMin] = min;\n    this[sMax] = max;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n  /**\n   * The rule's min length.\n   *\n   * @type {Number}\n   */\n  get min() {\n    'use strict';\n\n    return this[sMin];\n  }\n\n  /**\n   * The rule's max length.\n   *\n   * @type {Number}\n   */\n  get max() {\n    'use strict';\n\n    return this[sMax];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EInvalidLength.js",
    "longname": "lib/Validators/Errors/EInvalidLength.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidLength.js",
    "importStyle": null,
    "description": "Provides the EInvalidLength error which is thrown when the provided value\ncontains too many or too few characters.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EInvalidLength.js",
    "longname": "lib/Validators/Errors/EInvalidLength.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidLength.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EInvalidLength",
    "memberof": "lib/Validators/Errors/EInvalidLength.js",
    "longname": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidLength.js",
    "importStyle": "EInvalidLength",
    "description": "Thrown when trying to validate a value which is smaller or larger than the\nmin and max requirements.",
    "lineNumber": 35,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength",
    "longname": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum allowed characters."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum allowed characters."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength",
    "longname": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "min",
    "memberof": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength",
    "longname": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength#min",
    "access": null,
    "description": "The rule's min length.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength",
    "longname": "lib/Validators/Errors/EInvalidLength.js~EInvalidLength#max",
    "access": null,
    "description": "The rule's max length.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EInvalidURL.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EInvalidURL.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EInvalidURL error which is thrown when the provided value\n * is not a valid URL address.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EInvalidURL.value');\n\n/**\n * Thrown when trying to validate a value which is not a valid URL address.\n *\n * @extends {EError}\n */\nexport default class EInvalidURL extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   */\n  constructor(value) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EInvalidURL.js",
    "longname": "lib/Validators/Errors/EInvalidURL.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidURL.js",
    "importStyle": null,
    "description": "Provides the EInvalidURL error which is thrown when the provided value\nis not a valid URL address.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EInvalidURL.js",
    "longname": "lib/Validators/Errors/EInvalidURL.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidURL.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EInvalidURL",
    "memberof": "lib/Validators/Errors/EInvalidURL.js",
    "longname": "lib/Validators/Errors/EInvalidURL.js~EInvalidURL",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EInvalidURL.js",
    "importStyle": "EInvalidURL",
    "description": "Thrown when trying to validate a value which is not a valid URL address.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EInvalidURL.js~EInvalidURL",
    "longname": "lib/Validators/Errors/EInvalidURL.js~EInvalidURL#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EInvalidURL.js~EInvalidURL",
    "longname": "lib/Validators/Errors/EInvalidURL.js~EInvalidURL#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EMustContainDigit.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EMustContainDigit.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EMustContainDigit error which is thrown when the provided value\n * doesnt conain at least 1 digit.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EMustContainDigit.value');\n\n/**\n * Thrown when tryng to validate a value which doesnt contain at least 1 digit.\n *\n * @extends {EError}\n */\nexport default class EMustContainDigit extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   */\n  constructor(value) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EMustContainDigit.js",
    "longname": "lib/Validators/Errors/EMustContainDigit.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainDigit.js",
    "importStyle": null,
    "description": "Provides the EMustContainDigit error which is thrown when the provided value\ndoesnt conain at least 1 digit.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EMustContainDigit.js",
    "longname": "lib/Validators/Errors/EMustContainDigit.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainDigit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EMustContainDigit",
    "memberof": "lib/Validators/Errors/EMustContainDigit.js",
    "longname": "lib/Validators/Errors/EMustContainDigit.js~EMustContainDigit",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainDigit.js",
    "importStyle": "EMustContainDigit",
    "description": "Thrown when tryng to validate a value which doesnt contain at least 1 digit.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EMustContainDigit.js~EMustContainDigit",
    "longname": "lib/Validators/Errors/EMustContainDigit.js~EMustContainDigit#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EMustContainDigit.js~EMustContainDigit",
    "longname": "lib/Validators/Errors/EMustContainDigit.js~EMustContainDigit#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EMustContainLowercase.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EMustContainLowercase.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EMustContainLowercase error which is thrown when the provided\n * value doesnt conain at least 1 lowercase character.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EMustContainLowercase.value');\n\n/**\n * Thrown when tryng to validate a value which doesnt contain at least 1\n * lowercase character.\n *\n * @extends {EError}\n */\nexport default class EMustContainLowercase extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   */\n  constructor(value) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EMustContainLowercase.js",
    "longname": "lib/Validators/Errors/EMustContainLowercase.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainLowercase.js",
    "importStyle": null,
    "description": "Provides the EMustContainLowercase error which is thrown when the provided\nvalue doesnt conain at least 1 lowercase character.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EMustContainLowercase.js",
    "longname": "lib/Validators/Errors/EMustContainLowercase.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainLowercase.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EMustContainLowercase",
    "memberof": "lib/Validators/Errors/EMustContainLowercase.js",
    "longname": "lib/Validators/Errors/EMustContainLowercase.js~EMustContainLowercase",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainLowercase.js",
    "importStyle": "EMustContainLowercase",
    "description": "Thrown when tryng to validate a value which doesnt contain at least 1\nlowercase character.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EMustContainLowercase.js~EMustContainLowercase",
    "longname": "lib/Validators/Errors/EMustContainLowercase.js~EMustContainLowercase#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EMustContainLowercase.js~EMustContainLowercase",
    "longname": "lib/Validators/Errors/EMustContainLowercase.js~EMustContainLowercase#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EMustContainUppercase.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EMustContainUppercase.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EMustContainLowercase error which is thrown when the provided\n * value doesnt conain at least 1 uppercase character.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sValue = Symbol('EMustContainUppercase.value');\n\n/**\n * Thrown when tryng to validate a value which doesnt contain at least 1\n * uppercase character.\n *\n * @extends {EError}\n */\nexport default class EMustContainUppercase extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} value The value being validated.\n   */\n  constructor(value) {\n    'use strict';\n\n    super();\n    this[sValue] = value;\n  }\n\n  /**\n   * The value causing the error.\n   *\n   * @type {String}\n   */\n  get value() {\n    'use strict';\n\n    return this[sValue];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EMustContainUppercase.js",
    "longname": "lib/Validators/Errors/EMustContainUppercase.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainUppercase.js",
    "importStyle": null,
    "description": "Provides the EMustContainLowercase error which is thrown when the provided\nvalue doesnt conain at least 1 uppercase character.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sValue",
    "memberof": "lib/Validators/Errors/EMustContainUppercase.js",
    "longname": "lib/Validators/Errors/EMustContainUppercase.js~sValue",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainUppercase.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EMustContainUppercase",
    "memberof": "lib/Validators/Errors/EMustContainUppercase.js",
    "longname": "lib/Validators/Errors/EMustContainUppercase.js~EMustContainUppercase",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EMustContainUppercase.js",
    "importStyle": "EMustContainUppercase",
    "description": "Thrown when tryng to validate a value which doesnt contain at least 1\nuppercase character.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EMustContainUppercase.js~EMustContainUppercase",
    "longname": "lib/Validators/Errors/EMustContainUppercase.js~EMustContainUppercase#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/Validators/Errors/EMustContainUppercase.js~EMustContainUppercase",
    "longname": "lib/Validators/Errors/EMustContainUppercase.js~EMustContainUppercase#value",
    "access": null,
    "description": "The value causing the error.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Errors/EUnknownValidator.js",
    "memberof": null,
    "longname": "lib/Validators/Errors/EUnknownValidator.js",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the EUnknownValidator error which is used when attempting to use\n * an unknown validator.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EError = loader('EntityCI/EError');\n\nvar sRule = Symbol('EUnknownValidator.rule');\n\n/**\n * Thrown when tryng to use an unknown validator.\n *\n * @extends {EError}\n */\nexport default class EUnknownValidator extends EError {\n\n  /**\n   * The error constructor.\n   *\n   * @param {String} rule The rule being validated.\n   */\n  constructor(rule) {\n    'use strict';\n\n    super();\n    this[sRule] = rule;\n  }\n\n  /**\n   * The rule causing the error.\n   *\n   * @type {String}\n   */\n  get rule() {\n    'use strict';\n\n    return this[sRule];\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Errors/EUnknownValidator.js",
    "longname": "lib/Validators/Errors/EUnknownValidator.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EUnknownValidator.js",
    "importStyle": null,
    "description": "Provides the EUnknownValidator error which is used when attempting to use\nan unknown validator.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sRule",
    "memberof": "lib/Validators/Errors/EUnknownValidator.js",
    "longname": "lib/Validators/Errors/EUnknownValidator.js~sRule",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Errors/EUnknownValidator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EUnknownValidator",
    "memberof": "lib/Validators/Errors/EUnknownValidator.js",
    "longname": "lib/Validators/Errors/EUnknownValidator.js~EUnknownValidator",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Errors/EUnknownValidator.js",
    "importStyle": "EUnknownValidator",
    "description": "Thrown when tryng to use an unknown validator.",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EError"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/Errors/EUnknownValidator.js~EUnknownValidator",
    "longname": "lib/Validators/Errors/EUnknownValidator.js~EUnknownValidator#constructor",
    "access": null,
    "description": "The error constructor.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "The rule being validated."
      }
    ],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rule",
    "memberof": "lib/Validators/Errors/EUnknownValidator.js~EUnknownValidator",
    "longname": "lib/Validators/Errors/EUnknownValidator.js~EUnknownValidator#rule",
    "access": null,
    "description": "The rule causing the error.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Rules/Email.js",
    "memberof": null,
    "longname": "lib/Validators/Rules/Email.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the email address validator rule.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EInvalidEmail = loader('EntityCI/Validators/Errors/EInvalidEmail');\n\n/**\n * Validate email address.\n *\n * @param {Mixed} value The value to validate.\n * @param {Object} options The options passed to the validator.\n * @param {Function} next The next callback.\n * @param {Error} next.err Any raised errors.\n * @throws {EInvalidEmail} Thrown if the value is an invalid email address.\n */\nexport default function validateEmail(value, options, next) {\n  'use strict';\n\n  /*jshint ignore:start,-W101*/\n  /*eslint-disable*/\n  if (! /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value)) {\n    return next(new EInvalidEmail(value));\n  }\n  /*eslint-enable*/\n  /*jshint ignore:end,+W101*/\n\n  next();\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Rules/Email.js",
    "longname": "lib/Validators/Rules/Email.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Rules/Email.js",
    "importStyle": null,
    "description": "Provides the email address validator rule.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validateEmail",
    "memberof": "lib/Validators/Rules/Email.js",
    "longname": "lib/Validators/Rules/Email.js~validateEmail",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Rules/Email.js",
    "importStyle": "validateEmail",
    "description": "Validate email address.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "next.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EInvalidEmail"
        ],
        "description": "Thrown if the value is an invalid email address."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Rules/MachineName.js",
    "memberof": null,
    "longname": "lib/Validators/Rules/MachineName.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the machine name validator rule.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EInvalidLength = loader('EntityCI/Validators/Errors/EInvalidLength'),\n    EInvalidCharacters = loader(\n      'EntityCI/Validators/Errors/EInvalidCharacters'\n    );\n\n/**\n * Validate machine name.\n *\n * @param {Mixed} value The value to validate.\n * @param {Object} options The options passed to the validator.\n * @param {Function} next The next callback.\n * @param {Error} next.err Any raised errors.\n * @throws {EInvalidLength} Thrown if the value is too long or short.\n * @throws {EInvalidCharacters} If the value contains invalid characters.\n */\nexport default function validateMachineName(value, options, next) {\n  'use strict';\n\n  var min = 3,\n      max = 128;\n\n  if (value.length < min || value.length > max) {\n    return next(new EInvalidLength(value, min, max));\n  }\n\n  if (value.match(/[^-_a-z0-9]/) !== null) {\n    return next(new EInvalidCharacters(value, '- _ a-z 0-9'));\n  }\n\n  next();\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Rules/MachineName.js",
    "longname": "lib/Validators/Rules/MachineName.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Rules/MachineName.js",
    "importStyle": null,
    "description": "Provides the machine name validator rule.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validateMachineName",
    "memberof": "lib/Validators/Rules/MachineName.js",
    "longname": "lib/Validators/Rules/MachineName.js~validateMachineName",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Rules/MachineName.js",
    "importStyle": "validateMachineName",
    "description": "Validate machine name.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "next.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EInvalidLength"
        ],
        "description": "Thrown if the value is too long or short."
      },
      {
        "types": [
          "EInvalidCharacters"
        ],
        "description": "If the value contains invalid characters."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Rules/Password.js",
    "memberof": null,
    "longname": "lib/Validators/Rules/Password.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the password validator rule.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EInvalidLength = loader('EntityCI/Validators/Errors/EInvalidLength'),\n    EInvalidCharacters = loader(\n      'EntityCI/Validators/Errors/EInvalidCharacters'\n    ),\n    EMustContainDigit = loader('EntityCI/Validators/Errors/EMustContainDigit'),\n    EMustContainLowercase = loader(\n      'EntityCI/Validators/Errors/EMustContainLowercase'\n    ),\n    EMustContainUppercase = loader(\n      'EntityCI/Validators/Errors/EMustContainUppercase'\n    );\n\n/**\n * Validate password.\n *\n * @param {Mixed} value The value to validate.\n * @param {Object} options The options passed to the validator.\n * @param {Function} next The next callback.\n * @param {Error} next.err Any raised errors.\n * @throws {EInvalidLength} Thrown if the value is too long or short.\n * @throws {EInvalidCharacters} If the value contains invalid characters.\n */\nexport default function validatePassword(value, options, next) {\n  'use strict';\n\n  var min = options.minLength || 5,\n      max = options.maxLength || 128;\n\n  if (value.length < min || value.length > max) {\n    return next(new EInvalidLength(value, min, max));\n  }\n\n  if (value.match(/^.*(?=\\d).*$/) === null) {\n    return next(new EMustContainDigit(value));\n  }\n\n  if (value.match(/^.*(?=[a-z]).*$/) === null) {\n    return next(new EMustContainLowercase(value));\n  }\n\n  if (value.match(/^.*(?=[A-Z]).*$/) === null) {\n    return next(new EMustContainUppercase(value));\n  }\n\n  if (value.match(/[^0-9a-zA-Z!%^&*\\-_+#~@?]/) !== null) {\n    return next(new EInvalidCharacters(value, '0-9 a-z A-Z !%^&*-_+#~@?'));\n  }\n\n  next();\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Rules/Password.js",
    "longname": "lib/Validators/Rules/Password.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Rules/Password.js",
    "importStyle": null,
    "description": "Provides the password validator rule.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validatePassword",
    "memberof": "lib/Validators/Rules/Password.js",
    "longname": "lib/Validators/Rules/Password.js~validatePassword",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Rules/Password.js",
    "importStyle": "validatePassword",
    "description": "Validate password.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "next.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EInvalidLength"
        ],
        "description": "Thrown if the value is too long or short."
      },
      {
        "types": [
          "EInvalidCharacters"
        ],
        "description": "If the value contains invalid characters."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/Rules/Url.js",
    "memberof": null,
    "longname": "lib/Validators/Rules/Url.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the URL address validator rule.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar loader = require('nsloader'),\n    EInvalidURL = loader('EntityCI/Validators/Errors/EInvalidURL');\n\n/**\n * Validate URL address.\n *\n * @param {Mixed} value The value to validate.\n * @param {Object} options The options passed to the validator.\n * @param {Function} next The next callback.\n * @param {Error} next.err Any raised errors.\n * @throws {EInvalidUrl} Thrown if the value is an invalid url address.\n */\nexport default function validateUrl (value, options, next) {\n  'use strict';\n\n  var rx = new RegExp(\n    '^' +\n    // protocol identifier\n    '(?:(?:https?|ftp)://)' +\n    // user:pass authentication\n    '(?:\\\\S+(?::\\\\S*)?@)?' +\n    '(?:' +\n    // IP address exclusion\n    // private & local networks\n    '(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n    '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n    '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space >= 224.0.0.0\n    // excludes network & broacast addresses\n    // (first & last IP address of each class)\n    '(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n    '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n    '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n    '|' +\n    // host name\n    '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n    // domain name\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n    // TLD identifier\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' +\n    ')' +\n    // port number\n    '(?::\\\\d{2,5})?' +\n    // resource path\n    '(?:/\\\\S*)?' +\n    '$', 'i');\n\n  if (!rx.test(value)) {\n    return next(new EInvalidURL(value));\n  }\n\n  next();\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loader",
    "memberof": "lib/Validators/Rules/Url.js",
    "longname": "lib/Validators/Rules/Url.js~loader",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/Rules/Url.js",
    "importStyle": null,
    "description": "Provides the URL address validator rule.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validateUrl",
    "memberof": "lib/Validators/Rules/Url.js",
    "longname": "lib/Validators/Rules/Url.js~validateUrl",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/Rules/Url.js",
    "importStyle": "validateUrl",
    "description": "Validate URL address.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "next.err",
        "description": "Any raised errors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "EInvalidUrl"
        ],
        "description": "Thrown if the value is an invalid url address."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Validators/index.js",
    "memberof": null,
    "longname": "lib/Validators/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * Provides the Validators class.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar async = require('async'),\n    loader = require('nsloader'),\n    sortBy = loader('EntityCI/Utils/SortBy'),\n    EUnknownValidator = loader('EntityCI/Validators/Errors/EUnknownValidator');\n\nvar sRules = Symbol.for('Validators.rules');\n\n/**\n * The Validators class.\n */\nexport default class Validators {\n\n  /**\n   * The validators class constructor.\n   */\n  constructor() {\n    'use strict';\n\n    this[sRules] = {};\n\n    this\n      .register('machine-name', loader('EntityCI/Validators/Rules/MachineName'))\n      .register('email', loader('EntityCI/Validators/Rules/Email'))\n      .register('url', loader('EntityCI/Validators/Rules/Url'))\n      .register('password', loader('EntityCI/Validators/Rules/Password'));\n  }\n\n  /**\n   * The names of the defined rules.\n   *\n   * @type {Array}\n   */\n  get rules() {\n    'use strict';\n\n    return Object.keys(this[sRules]);\n  }\n\n  /**\n   * Registers a new validator rule.\n   *\n   * @param {String} name The name of the validator rule.\n   * @param {Function} cb The validator callback.\n   * @param {Mixed} cb.value The value to be validated.\n   * @param {Object} cb.options The options passed to the validator.\n   * @param {Function} cb.next Call the next rule callback.\n   * @param {Error} cb.next.err Any raised errors.\n   * @param {Integer} [weight=0] The weight to apply to the callback.\n   * @returns {Validators} Returns self.\n   */\n  register(name, cb, weight) {\n    'use strict';\n\n    if (this[sRules][name] === undefined) {\n      this[sRules][name] = [];\n    }\n\n    this[sRules][name].push({\n      callback: cb,\n      weight: weight || 0\n    });\n\n    sortBy(this[sRules][name], 'weight');\n    return this;\n  }\n\n  /**\n   * Determines if a validator has been registered.\n   *\n   * @param {String} name The name of the validator.\n   * @returns {Boolean} Returns true or false.\n   */\n  registered(name) {\n    'use strict';\n\n    return this[sRules][name] !== undefined;\n  }\n\n  /**\n   * Unregisters a validator or a validators callback.\n   *\n   * @param {String} name The name of the validator to remove.\n   * @param {Function} [cb] The specific callback to remove.\n   * @returns {Validators} Returns self.\n   */\n  unregister(name, cb) {\n    'use strict';\n\n    if (this[sRules][name] === undefined) {\n      throw new EUnknownValidator(name);\n    }\n\n    if (cb === undefined) {\n      delete this[sRules][name];\n    } else {\n      var tmp = [];\n\n      for (var i = 0, len = this[sRules][name].length; i < len; i++) {\n        if (this[sRules][name][i].callback === cb) {\n          continue;\n        }\n\n        tmp.push(this[sRules][name][i]);\n      }\n\n      if (tmp.length > 0) {\n        this[sRules][name] = tmp;\n      } else {\n        delete this[sRules][name];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Attempts to validate the value.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any raised errors.\n   * @param {Mixed} done.value The value being validated.\n   * @param {String} name The name of the validator rule to run.\n   * @param {Mixed} value The value to validate.\n   * @param {Object} [options] Any options to pass to the validator.\n   */\n  validate(done, name, value, options) {\n    'use strict';\n\n    if (this[sRules][name] === undefined) {\n      return done(new EUnknownValidator(name));\n    }\n\n    function execValidator(validator) {\n      return function (next) {\n        try {\n          validator.callback.call(null, value, options || {}, next);\n        } catch (e) {\n          next(e);\n        }\n      };\n    }\n\n    var queue = [];\n    for (var i = 0, len = this[sRules][name].length; i < len; i++) {\n      queue.push(execValidator(this[sRules][name][i]));\n    }\n\n    async.series(queue, function (err) {\n      done(err ? err : null, value);\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "async",
    "memberof": "lib/Validators/index.js",
    "longname": "lib/Validators/index.js~async",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/index.js",
    "importStyle": null,
    "description": "Provides the Validators class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sRules",
    "memberof": "lib/Validators/index.js",
    "longname": "lib/Validators/index.js~sRules",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/Validators/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Validators",
    "memberof": "lib/Validators/index.js",
    "longname": "lib/Validators/index.js~Validators",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/Validators/index.js",
    "importStyle": "Validators",
    "description": "The Validators class.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Validators/index.js~Validators",
    "longname": "lib/Validators/index.js~Validators#constructor",
    "access": null,
    "description": "The validators class constructor.",
    "lineNumber": 36,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "rules",
    "memberof": "lib/Validators/index.js~Validators",
    "longname": "lib/Validators/index.js~Validators#rules",
    "access": null,
    "description": "The names of the defined rules.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "register",
    "memberof": "lib/Validators/index.js~Validators",
    "longname": "lib/Validators/index.js~Validators#register",
    "access": null,
    "description": "Registers a new validator rule.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Validators} Returns self."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the validator rule."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "The validator callback."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.value",
        "description": "The value to be validated."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.options",
        "description": "The options passed to the validator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.next",
        "description": "Call the next rule callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "cb.next.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "weight",
        "description": "The weight to apply to the callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validators"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registered",
    "memberof": "lib/Validators/index.js~Validators",
    "longname": "lib/Validators/index.js~Validators#registered",
    "access": null,
    "description": "Determines if a validator has been registered.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Returns true or false."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the validator."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true or false."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregister",
    "memberof": "lib/Validators/index.js~Validators",
    "longname": "lib/Validators/index.js~Validators#unregister",
    "access": null,
    "description": "Unregisters a validator or a validators callback.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Validators} Returns self."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the validator to remove."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "cb",
        "description": "The specific callback to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Validators"
      ],
      "spread": false,
      "description": "Returns self."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "lib/Validators/index.js~Validators",
    "longname": "lib/Validators/index.js~Validators#validate",
    "access": null,
    "description": "Attempts to validate the value.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any raised errors."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "done.value",
        "description": "The value being validated."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the validator rule to run."
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to validate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Any options to pass to the validator."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/index.js",
    "memberof": null,
    "longname": "lib/index.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\n/**\n * The entity ci core component.\n *\n * @author Orgun109uk <orgun109uk@gmail.com>\n */\n\nvar path = require('path'),\n    async = require('async'),\n    loader = require('nsloader'),\n    Config = loader('EntityCI/Utils/Config'),\n    Locale = loader('EntityCI/Locale'),\n    Database = loader('EntityCI/Database'),\n    Validators = loader('EntityCI/Validators'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    EventManager = loader('EntityCI/EventManager'),\n    PluginManager = loader('EntityCI/PluginManager'),\n    EntityManager = loader('EntityCI/EntityManager');\n\nvar sConfig = Symbol('EntityCICore.config'),\n    sLocale = Symbol('EntityCICore.locale'),\n    sDatabase = Symbol('EntityCICore.database'),\n    sValidators = Symbol('EntityCICore.validators'),\n    sSanitizers = Symbol('EntityCICore.sanitizers'),\n    sEventManager = Symbol('EntityCICore.eventManager'),\n    sPluginManager = Symbol('EntityCICore.pluginManager'),\n    sEntityManager = Symbol('EntityCICore.entityManager'),\n    sIsInitialized = Symbol('EntityCICore.isInitialized');\n\n/**\n * The core EntityCI class.\n *\n * This is used to initialize all subsystems of EntityCI.\n */\nexport default class EntityCICore {\n\n  /**\n   * The EntityCICore class constructor.\n   */\n  constructor() {\n    'use strict';\n\n    this[sIsInitialized] = false;\n    this[sConfig] = null;\n    this[sDatabase] = new Database();\n    this[sValidators] = new Validators();\n    this[sSanitizers] = new Sanitizers();\n    this[sEventManager] = new EventManager();\n    this[sPluginManager] = new PluginManager();\n    this[sEntityManager] = new EntityManager(\n      this[sDatabase],\n      this[sValidators],\n      this[sSanitizers]\n    );\n  }\n\n  /**\n   * Determine if the core has been initialized.\n   *\n   * @type {Boolean}\n   */\n  get initialized() {\n    'use strict';\n\n    return this[sIsInitialized];\n  }\n\n  /**\n   * Get the config object.\n   *\n   * @type {Config}\n   */\n  get config() {\n    'use strict';\n\n    return this[sConfig];\n  }\n\n  /**\n   * Get the locale object.\n   *\n   * @type {Locale}\n   */\n  get locale() {\n    'use strict';\n\n    return this[sLocale];\n  }\n\n  /**\n   * Get the database manager object.\n   *\n   * @type {Database}\n   */\n  get database() {\n    'use strict';\n\n    return this[sDatabase];\n  }\n\n  /**\n   * Get the event manager object.\n   *\n   * @type {EventManager}\n   */\n  get eventManager() {\n    'use strict';\n\n    return this[sEventManager];\n  }\n\n  /**\n   * Get the plugin manager object.\n   *\n   * @type {PluginManager}\n   */\n  get pluginManager() {\n    'use strict';\n\n    return this[sPluginManager];\n  }\n\n  /**\n   * Load the configuration file.\n   *\n   * @param {String} filename - The config filename.\n   * @param {Function} done - The done callback.\n   * @param {Error} done.err - Any errors raised.\n   * @private\n   */\n  _loadConfig(filename, done) {\n    'use strict';\n\n    this[sConfig] = new Config(filename);\n    this[sConfig].load(done);\n  }\n\n  /**\n   * Connects to the MongoDB, details provided by the config.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any errors raised.\n   * @private\n   */\n  _connectToMongo(done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    function connect(name) {\n      return function (next) {\n        me[sDatabase].connect(\n          name,\n          me[sConfig].get('database.' + name, {\n            host: '0.0.0.0',\n            name: 'entityci'\n          })\n        );\n\n        next();\n      };\n    }\n\n    // @todo - multiple connections?\n    queue.push(connect('default'));\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Indexes and initializes the plugin manager and enabled plugins.\n   *\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any errors raised.\n   * @private\n   */\n  _plugins(done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    queue.push(function (next) {\n      me[sPluginManager].index(\n        me[sConfig].get(\n          'plugins.path',\n          path.join(__dirname, '..', 'plugins')\n        ),\n        next\n      );\n    });\n\n    queue.push(function (next) {\n      me[sPluginManager].initialize(\n        me[sConfig].get('plugins.enabled', []),\n        next\n      );\n    });\n\n    async.series(queue, function (err) {\n      done(err ? err : null);\n    });\n  }\n\n  /**\n   * Initializes the core application.\n   *\n   * @param {String} filename The filename of the config file to load.\n   * @param {Function} done The done callback.\n   * @param {Error} done.err Any errors raised.\n   */\n  initialize(filename, done) {\n    'use strict';\n\n    var me = this,\n        queue = [];\n\n    queue.push(function (next) {\n      me._loadConfig(filename, next);\n    });\n\n    queue.push(function (next) {\n      me._connectToMongo(next);\n    });\n\n    queue.push(function (next) {\n      me[sLocale] = new Locale(me[sDatabase]);\n      me[sLocale].initialize(me[sConfig].get('locale.dir'), next);\n    });\n\n    queue.push(function (next) {\n      me._plugins(next);\n    });\n\n    queue.push(function (next) {\n      me[sEventManager].fire('initialized', next, {\n        core: me\n      });\n    });\n\n    async.series(queue, function (err) {\n      if (!err) {\n        me[sIsInitialized] = true;\n      }\n\n      done(err ? err : null);\n    });\n  }\n\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "path",
    "memberof": "lib/index.js",
    "longname": "lib/index.js~path",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/index.js",
    "importStyle": null,
    "description": "The entity ci core component.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Orgun109uk <orgun109uk@gmail.com>"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sConfig",
    "memberof": "lib/index.js",
    "longname": "lib/index.js~sConfig",
    "access": null,
    "export": false,
    "importPath": "entity-ci-core/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EntityCICore",
    "memberof": "lib/index.js",
    "longname": "lib/index.js~EntityCICore",
    "access": null,
    "export": true,
    "importPath": "entity-ci-core/lib/index.js",
    "importStyle": "EntityCICore",
    "description": "The core EntityCI class.\n\nThis is used to initialize all subsystems of EntityCI.",
    "lineNumber": 48,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#constructor",
    "access": null,
    "description": "The EntityCICore class constructor.",
    "lineNumber": 53,
    "params": [],
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "initialized",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#initialized",
    "access": null,
    "description": "Determine if the core has been initialized.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#config",
    "access": null,
    "description": "Get the config object.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "locale",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#locale",
    "access": null,
    "description": "Get the locale object.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "Locale"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "database",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#database",
    "access": null,
    "description": "Get the database manager object.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "eventManager",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#eventManager",
    "access": null,
    "description": "Get the event manager object.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "pluginManager",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#pluginManager",
    "access": null,
    "description": "Get the plugin manager object.",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "PluginManager"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadConfig",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#_loadConfig",
    "access": "private",
    "description": "Load the configuration file.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The config filename."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any errors raised."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_connectToMongo",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#_connectToMongo",
    "access": "private",
    "description": "Connects to the MongoDB, details provided by the config.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any errors raised."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_plugins",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#_plugins",
    "access": "private",
    "description": "Indexes and initializes the plugin manager and enabled plugins.",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any errors raised."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initialize",
    "memberof": "lib/index.js~EntityCICore",
    "longname": "lib/index.js~EntityCICore#initialize",
    "access": null,
    "description": "Initializes the core application.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The filename of the config file to load."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "The done callback."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "done.err",
        "description": "Any errors raised."
      }
    ],
    "generator": false
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Database/Database.test.js",
    "memberof": null,
    "longname": "tests/Database/Database.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Database = loader('EntityCI/Database'),\n    Connection = loader('EntityCI/Database/Connection'),\n    EDefinedConnection = loader('EntityCI/Database/Errors/EDefinedConnection'),\n    EUndefinedConnection = loader(\n      'EntityCI/Database/Errors/EUndefinedConnection'\n    );\n\nvar database = null;\n\ndescribe('entity-ci/entity-ci-core/Database', function () {\n\n  'use strict';\n\n  afterEach(function (done) {\n\n    var queue = [],\n        connections = database ? database.connections : [];\n\n    function clearAndDrop(name) {\n      return function (next) {\n        database.collection('test', name).drop(function () {\n          database.disconnect(name);\n          next();\n        });\n      };\n    }\n\n    for (var i = 0, len = connections.length; i < len; i++) {\n      queue.push(clearAndDrop(connections[i]));\n    }\n\n    async.series(queue, done);\n\n  });\n\n  describe('Database.connect()', function () {\n\n    it('shouldConnectAndMakeDefault', function () {\n\n      database = new Database();\n      database.connect('default', {\n        name: 'test'\n      });\n\n      test.string(\n        database.defaultConnection\n      ).is('default');\n\n    });\n\n    it('shouldThrowAnErrorIfConnectionExists', function () {\n\n      database = new Database();\n      database.connect('default', {\n        name: 'test'\n      });\n\n      test.error(function () {\n        database.connect('default', {\n          name: 'test'\n        });\n      }).isInstanceOf(EDefinedConnection);\n\n    });\n\n  });\n\n  describe('Database.disconnect()', function () {\n\n    it('shouldThrowAnErrorIfConnectionsUndefined', function () {\n\n      var database = new Database();\n      test.exception(function () {\n\n        database.disconnect('test');\n\n      }).isInstanceOf(EUndefinedConnection);\n\n    });\n\n    it('shouldDisconnectDefinedConnection', function () {\n\n      var database = new Database();\n      database.connect('test', {\n        name: 'test'\n      });\n\n      database.disconnect('test');\n\n      test.error(function () {\n        database.connection('test');\n      }).isInstanceOf(EUndefinedConnection);\n\n    });\n\n    it('shouldDisconnectDefaultConnection', function () {\n\n      var database = new Database();\n      database.connect('test', {\n        name: 'test'\n      });\n\n      database.connect('test2', {\n        name: 'test2'\n      });\n\n      database.disconnect();\n\n      test.error(function () {\n        database.connection('test');\n      }).isInstanceOf(EUndefinedConnection);\n\n      test.object(\n        database.connection('test2')\n      ).isInstanceOf(Connection);\n\n    });\n\n  });\n\n  describe('Database.collection()', function () {\n\n    it('shouldThrowAnErrorIfConnectionsUndefined', function () {\n\n      var database = new Database();\n      test.exception(function () {\n        database.collection('test');\n      }).isInstanceOf(EUndefinedConnection);\n\n    });\n\n    it('shouldReturnCollectionObject', function () {\n\n      var database = new Database();\n      database.connect('test', {\n        name: 'test'\n      });\n\n      test.object(\n        database.collection('test')\n      );\n\n    });\n\n  });\n\n  describe('Database.connection()', function () {\n\n    it('shouldThrowAnErrorIfConnectionsUndefined', function () {\n\n      var database = new Database();\n      test.error(function () {\n        database.connection('test');\n      }).isInstanceOf(EUndefinedConnection);\n\n    });\n\n    it('shouldReturnConnectionObjectIfExists', function () {\n\n      var database = new Database();\n      database.connect('test', {\n        name: 'test'\n      });\n\n      test.object(\n        database.connection('test')\n      ).isInstanceOf(Connection);\n\n    });\n\n  });\n\n  describe('Database.connections', function () {\n\n    it('shouldReturnAnArrayOfConnectionNames', function () {\n\n      var database = new Database();\n      database.connect('default', {\n        name: 'test'\n      });\n\n      database.connect('test', {\n        name: 'test'\n      });\n\n      test.array(\n        database.connections\n      ).hasLength(2).is(['default', 'test']);\n\n    });\n\n  });\n\n  describe('Database.defaultConnection', function () {\n\n    it('shouldReturnUndefinedIfNotSet', function () {\n\n      var database = new Database();\n      test.string(\n        database.defaultConnection\n      ).is('');\n\n    });\n\n    it('shouldReturnTheNameOfTheDefaultConnection', function () {\n\n      var database = new Database();\n      database.connect('default', {\n        name: 'test'\n      });\n\n      database.connect('test', {\n        name: 'test'\n      }, true);\n\n      database.connect('test2', {\n        name: 'test'\n      });\n\n      test.string(\n        database.defaultConnection\n      ).is('test');\n\n    });\n\n    it('shouldSetTheDefault', function () {\n\n      var database = new Database();\n      database.connect('default', {\n        name: 'test'\n      });\n\n      database.connect('test', {\n        name: 'test'\n      });\n\n      test.string(\n        database.defaultConnection\n      ).is('default');\n\n      database.defaultConnection = 'test';\n\n      test.string(\n        database.defaultConnection\n      ).is('test');\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/Database/Database.test.js",
    "testDepth": 0,
    "longname": "tests/Database/Database.test.js~describe0",
    "access": null,
    "description": "entity-ci/entity-ci-core/Database",
    "lineNumber": 27
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/Database/Database.test.js~describe0",
    "testDepth": 1,
    "longname": "tests/Database/Database.test.js~describe0.describe1",
    "access": null,
    "description": "Database.connect()",
    "lineNumber": 53
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "tests/Database/Database.test.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe1.it2",
    "access": null,
    "description": "shouldConnectAndMakeDefault",
    "lineNumber": 55
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "tests/Database/Database.test.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe1.it3",
    "access": null,
    "description": "shouldThrowAnErrorIfConnectionExists",
    "lineNumber": 68
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe4",
    "testId": 4,
    "memberof": "tests/Database/Database.test.js~describe0",
    "testDepth": 1,
    "longname": "tests/Database/Database.test.js~describe0.describe4",
    "access": null,
    "description": "Database.disconnect()",
    "lineNumber": 85
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "tests/Database/Database.test.js~describe0.describe4",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe4.it5",
    "access": null,
    "description": "shouldThrowAnErrorIfConnectionsUndefined",
    "lineNumber": 87
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "tests/Database/Database.test.js~describe0.describe4",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe4.it6",
    "access": null,
    "description": "shouldDisconnectDefinedConnection",
    "lineNumber": 98
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "tests/Database/Database.test.js~describe0.describe4",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe4.it7",
    "access": null,
    "description": "shouldDisconnectDefaultConnection",
    "lineNumber": 113
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe8",
    "testId": 8,
    "memberof": "tests/Database/Database.test.js~describe0",
    "testDepth": 1,
    "longname": "tests/Database/Database.test.js~describe0.describe8",
    "access": null,
    "description": "Database.collection()",
    "lineNumber": 138
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "tests/Database/Database.test.js~describe0.describe8",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe8.it9",
    "access": null,
    "description": "shouldThrowAnErrorIfConnectionsUndefined",
    "lineNumber": 140
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "tests/Database/Database.test.js~describe0.describe8",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe8.it10",
    "access": null,
    "description": "shouldReturnCollectionObject",
    "lineNumber": 149
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe11",
    "testId": 11,
    "memberof": "tests/Database/Database.test.js~describe0",
    "testDepth": 1,
    "longname": "tests/Database/Database.test.js~describe0.describe11",
    "access": null,
    "description": "Database.connection()",
    "lineNumber": 164
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "tests/Database/Database.test.js~describe0.describe11",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe11.it12",
    "access": null,
    "description": "shouldThrowAnErrorIfConnectionsUndefined",
    "lineNumber": 166
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "tests/Database/Database.test.js~describe0.describe11",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe11.it13",
    "access": null,
    "description": "shouldReturnConnectionObjectIfExists",
    "lineNumber": 175
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe14",
    "testId": 14,
    "memberof": "tests/Database/Database.test.js~describe0",
    "testDepth": 1,
    "longname": "tests/Database/Database.test.js~describe0.describe14",
    "access": null,
    "description": "Database.connections",
    "lineNumber": 190
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "tests/Database/Database.test.js~describe0.describe14",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe14.it15",
    "access": null,
    "description": "shouldReturnAnArrayOfConnectionNames",
    "lineNumber": 192
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe16",
    "testId": 16,
    "memberof": "tests/Database/Database.test.js~describe0",
    "testDepth": 1,
    "longname": "tests/Database/Database.test.js~describe0.describe16",
    "access": null,
    "description": "Database.defaultConnection",
    "lineNumber": 211
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "tests/Database/Database.test.js~describe0.describe16",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe16.it17",
    "access": null,
    "description": "shouldReturnUndefinedIfNotSet",
    "lineNumber": 213
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "tests/Database/Database.test.js~describe0.describe16",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe16.it18",
    "access": null,
    "description": "shouldReturnTheNameOfTheDefaultConnection",
    "lineNumber": 222
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "tests/Database/Database.test.js~describe0.describe16",
    "testDepth": 2,
    "longname": "tests/Database/Database.test.js~describe0.describe16.it19",
    "access": null,
    "description": "shouldSetTheDefault",
    "lineNumber": 243
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EntityCICore.test.js",
    "memberof": null,
    "longname": "tests/EntityCICore.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar path = require('path'),\n    fs = require('fs'),\n    os = require('os'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    EntityCICore = loader('EntityCI/index'),\n    Config = loader('EntityCI/Utils/Config');\n\ndescribe('entity-ci/entity-ci-core/EntityCICore', function () {\n\n  'use strict';\n\n  var tmpPath = path.join(\n        os.tmpdir(), 'entityci-tests--config--' + process.pid\n      ),\n      cfgFilename = path.join(tmpPath, 'config.json'),\n      cfgData = {\n        test: {value: 'hello'}\n      };\n\n  beforeEach(function () {\n\n    fs.mkdirSync(tmpPath);\n    fs.writeFileSync(cfgFilename, JSON.stringify(cfgData));\n\n  });\n\n  afterEach(function () {\n\n      fs.unlinkSync(cfgFilename);\n      fs.rmdirSync(tmpPath);\n\n    });\n\n  describe('EntityCICore.loadConfig()', function () {\n\n    it('shouldThrowAnErrorIfConfigDoesntExist', function (done) {\n\n      var entityCICore = new EntityCICore();\n\n      entityCICore._loadConfig(cfgFilename, function (err) {\n\n        test.error(\n          err\n        ).isInstanceOf(Error);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldLoadConfig', function (done) {\n\n      var entityCICore = new EntityCICore();\n\n      entityCICore._loadConfig(cfgFilename, function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.object(\n          entityCICore.config\n        ).isInstanceOf(Config);\n\n        test.object(\n          entityCICore.config.data\n        ).is(cfgData);\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('EntityCICore.initialize()', function () {\n\n    it('shouldInitializeWithoutIssues', function (done) {\n\n      var entityCICore = new EntityCICore();\n\n      test.bool(\n        entityCICore.initialized\n      ).isNotTrue();\n\n      entityCICore.initialize(cfgFilename, function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.bool(\n          entityCICore.initialized\n        ).isTrue();\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('EntityCICore.config', function () {\n\n    it('shouldReturnNullBeforeInitialize', function () {\n\n      var entityCICore = new EntityCICore();\n\n      test.value(\n        entityCICore.config\n      ).isNull();\n\n    });\n\n    it('shouldInitializeWithoutIssues', function (done) {\n\n      var entityCICore = new EntityCICore();\n\n      entityCICore.initialize('', function (err) {\n\n        test.object(\n          entityCICore.config\n        ).isInstanceOf(Config);\n\n        done();\n\n      });\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe20",
    "testId": 20,
    "memberof": "tests/EntityCICore.test.js",
    "testDepth": 0,
    "longname": "tests/EntityCICore.test.js~describe20",
    "access": null,
    "description": "entity-ci/entity-ci-core/EntityCICore",
    "lineNumber": 23
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe21",
    "testId": 21,
    "memberof": "tests/EntityCICore.test.js~describe20",
    "testDepth": 1,
    "longname": "tests/EntityCICore.test.js~describe20.describe21",
    "access": null,
    "description": "EntityCICore.loadConfig()",
    "lineNumber": 49
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "tests/EntityCICore.test.js~describe20.describe21",
    "testDepth": 2,
    "longname": "tests/EntityCICore.test.js~describe20.describe21.it22",
    "access": null,
    "description": "shouldThrowAnErrorIfConfigDoesntExist",
    "lineNumber": 51
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "tests/EntityCICore.test.js~describe20.describe21",
    "testDepth": 2,
    "longname": "tests/EntityCICore.test.js~describe20.describe21.it23",
    "access": null,
    "description": "shouldLoadConfig",
    "lineNumber": 67
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe24",
    "testId": 24,
    "memberof": "tests/EntityCICore.test.js~describe20",
    "testDepth": 1,
    "longname": "tests/EntityCICore.test.js~describe20.describe24",
    "access": null,
    "description": "EntityCICore.initialize()",
    "lineNumber": 93
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "tests/EntityCICore.test.js~describe20.describe24",
    "testDepth": 2,
    "longname": "tests/EntityCICore.test.js~describe20.describe24.it25",
    "access": null,
    "description": "shouldInitializeWithoutIssues",
    "lineNumber": 95
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe26",
    "testId": 26,
    "memberof": "tests/EntityCICore.test.js~describe20",
    "testDepth": 1,
    "longname": "tests/EntityCICore.test.js~describe20.describe26",
    "access": null,
    "description": "EntityCICore.config",
    "lineNumber": 121
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it27",
    "testId": 27,
    "memberof": "tests/EntityCICore.test.js~describe20.describe26",
    "testDepth": 2,
    "longname": "tests/EntityCICore.test.js~describe20.describe26.it27",
    "access": null,
    "description": "shouldReturnNullBeforeInitialize",
    "lineNumber": 123
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "tests/EntityCICore.test.js~describe20.describe26",
    "testDepth": 2,
    "longname": "tests/EntityCICore.test.js~describe20.describe26.it28",
    "access": null,
    "description": "shouldInitializeWithoutIssues",
    "lineNumber": 133
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EntityManager/BaseEntity.test.js",
    "memberof": null,
    "longname": "tests/EntityManager/BaseEntity.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Database = loader('EntityCI/Database'),\n    EntityManager = loader('EntityCI/EntityManager'),\n    Validators = loader('EntityCI/Validators'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    BaseEntity = loader('EntityCI/EntityManager/BaseEntity'),\n    EMissingMachineName = loader(\n      'EntityCI/EntityManager/Errors/EMissingMachineName'\n    ),\n    EMachineNameExists = loader(\n      'EntityCI/EntityManager/Errors/EMachineNameExists'\n    ),\n    ECantFindEntity = loader(\n      'EntityCI/EntityManager/Errors/ECantFindEntity'\n    );\n\nvar database, entityManager, validators, sanitizers,\n    collectionName = 'entity-test';\n\nfunction createBaseEntity() {\n  'use strict';\n\n  var entity = new BaseEntity(entityManager);\n  entity.collectionName = function () {\n    return collectionName;\n  };\n\n  return entity;\n}\n\ndescribe('entity-ci/entity-ci-core/EntityManager/BaseEntity', function () {\n\n  'use strict';\n\n  beforeEach(function (done) {\n\n    database = new Database();\n    database.connect('test', {\n      name: 'test',\n      host: '0.0.0.0'\n    }, true);\n\n    validators = new Validators();\n    sanitizers = new Sanitizers();\n    entityManager = new EntityManager(database, validators, sanitizers);\n\n    done();\n\n  });\n\n  afterEach(function (done) {\n\n    var queue = [];\n\n    queue.push(function (next) {\n      database.collection(collectionName).drop(function () {\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      entityManager.trashCollection.drop(function () {\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      database.disconnect('test');\n      next();\n    });\n\n    async.series(queue, done);\n\n  });\n\n  describe('BaseEntity.constructor()', function () {\n\n    it('shouldHaveNullIdAndMachineName', function () {\n\n      var entity = createBaseEntity();\n\n      test.value(\n        entity.id\n      ).isNull();\n\n      test.value(\n        entity.machineName\n      ).isNull();\n\n    });\n\n    it('shouldDefaultAsNew', function () {\n\n      var entity = createBaseEntity();\n\n      test.bool(\n        entity.isNew\n      ).isTrue();\n\n    });\n\n    it('shouldDefaultAsNotRenaming', function () {\n\n      var entity = createBaseEntity();\n\n      test.bool(\n        entity.isRenaming\n      ).isNotTrue();\n\n    });\n\n    it('shouldDefaultAsNotUpdated', function () {\n\n      var entity = createBaseEntity();\n\n      test.bool(\n        entity.isUpdated\n      ).isNotTrue();\n\n    });\n\n  });\n\n  describe('BaseEntity.validate()', function () {\n\n    it('shouldThrowAnErrorIfMachineNameIsMissing', function (done) {\n\n      var entity = createBaseEntity();\n\n      entity.validate(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EMissingMachineName);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldThrowAnErrorIfMachineNameIsInvalid', function (done) {\n\n      var entity = createBaseEntity();\n      entity.machineName = 'Not a valid machine name';\n\n      entity.validate(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(Error).isNotInstanceOf(EMissingMachineName);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldValidate', function (done) {\n\n      var entity = createBaseEntity();\n      entity.machineName = 'test-entity';\n\n      entity.validate(function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('BaseEntity.save()', function () {\n\n    it('shouldThrowAnErrorIfValidationFails', function (done) {\n\n      var entity = createBaseEntity();\n\n      entity.save(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(Error);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldSuccessfullySave', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      entity.machineName = 'test-entity';\n\n      queue.push(function (next) {\n\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find({}, function (err, docs) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(\n            docs[0]\n          ).hasKey('machineName', 'test-entity');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldRenameEntity', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      entity.machineName = 'test-entity';\n\n      queue.push(function (next) {\n\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.machineName = 'test-entity-2';\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find({}, function (err, docs) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(\n            docs[0]\n          ).hasKey('machineName', 'test-entity-2');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldFailToSaveIfMachineNameExistsAndNotRenaming', function (done) {\n\n      var entity = createBaseEntity(),\n          entity2 = createBaseEntity(),\n          queue = [];\n\n      entity.machineName = 'test-entity';\n      entity2.machineName = 'test-entity';\n\n      queue.push(function (next) {\n\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity2.save(function (err) {\n\n          test.object(\n            err\n          ).isInstanceOf(EMachineNameExists);\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find({}, function (err, docs) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(\n            docs[0]\n          ).hasKey('machineName', 'test-entity');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('BaseEntity.load()', function () {\n\n    it('shouldThrowAnErrorIfInvalidConditions', function (done) {\n\n      var entity = createBaseEntity();\n\n      entity.load(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EMissingMachineName);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldThrowAnErrorIfNoDocumentsMatch', function (done) {\n\n      var entity = createBaseEntity();\n\n      entity.load(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      }, {\n        machineName: 'test-entity'\n      });\n\n    });\n\n    it('shouldLoadByConditions', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity.collection.save({\n          machineName: 'test-entity'\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.load(function (err) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.bool(\n            entity.isNew\n          ).isNotTrue();\n\n          test.string(\n            entity.machineName\n          ).is('test-entity');\n\n          done();\n\n        }, 'test-entity');\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldLoadByMachineName', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      entity.machineName = 'test-entity';\n\n      queue.push(function (next) {\n\n        entity.collection.save({\n          machineName: 'test-entity'\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.load(function (err) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.bool(\n            entity.isNew\n          ).isNotTrue();\n\n          test.string(\n            entity.machineName\n          ).is('test-entity');\n\n          done();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('BaseEntity.delete()', function () {\n\n    it('shouldThrowAnErrorIfNoMachineName', function (done) {\n\n      var entity = createBaseEntity();\n\n      entity.delete(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EMissingMachineName);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldThrowAnErrorIfNoDocumentsMatch', function (done) {\n\n      var entity = createBaseEntity();\n      entity.machineName = 'test-entity';\n\n      entity.delete(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldMoveToTrash', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity.collection.save({\n          machineName: 'test-entity'\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.machineName = 'test-entity';\n        entity.delete(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(0);\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        entity.manager.trashCollection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(docs[0])\n            .hasKey('collection', 'entity-test')\n            .hasKey('machineName', 'test-entity');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldDeleteOnceTrashed', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity.collection.save({\n          machineName: 'test-entity'\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.machineName = 'test-entity';\n        entity.delete(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.delete(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.manager.trashCollection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(0);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldDelete', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity.collection.save({\n          machineName: 'test-entity'\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.machineName = 'test-entity';\n        entity.delete(next, null, true);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(0);\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        entity.manager.trashCollection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(0);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldLoadEntityFromTrash', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity.manager.trashCollection.save({\n          collection: collectionName,\n          machineName: 'test-entity',\n          doc: {}\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.load(next, 'test-entity');\n\n      });\n\n      queue.push(function (next) {\n\n        test.bool(\n          entity.isTrashed\n        ).isTrue();\n\n        test.string(\n          entity.machineName\n        ).is('test-entity');\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldRestoreIfTheEntityIsSaved', function (done) {\n\n      var entity = createBaseEntity(),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity.manager.trashCollection.save({\n          collection: collectionName,\n          machineName: 'test-entity',\n          doc: {}\n        }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.load(next, 'test-entity');\n\n      });\n\n      queue.push(function (next) {\n\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.bool(\n          entity.isTrashed\n        ).isNotTrue();\n\n        next();\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(\n            docs[0]\n          ).hasKey('machineName', 'test-entity');\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        entity.manager.trashCollection.find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(0);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n});\n\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe29",
    "testId": 29,
    "memberof": "tests/EntityManager/BaseEntity.test.js",
    "testDepth": 0,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29",
    "access": null,
    "description": "entity-ci/entity-ci-core/EntityManager/BaseEntity",
    "lineNumber": 47
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe30",
    "testId": 30,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29",
    "testDepth": 1,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe30",
    "access": null,
    "description": "BaseEntity.constructor()",
    "lineNumber": 92
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe30",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe30.it31",
    "access": null,
    "description": "shouldHaveNullIdAndMachineName",
    "lineNumber": 94
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe30",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe30.it32",
    "access": null,
    "description": "shouldDefaultAsNew",
    "lineNumber": 108
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe30",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe30.it33",
    "access": null,
    "description": "shouldDefaultAsNotRenaming",
    "lineNumber": 118
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it34",
    "testId": 34,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe30",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe30.it34",
    "access": null,
    "description": "shouldDefaultAsNotUpdated",
    "lineNumber": 128
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe35",
    "testId": 35,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29",
    "testDepth": 1,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe35",
    "access": null,
    "description": "BaseEntity.validate()",
    "lineNumber": 140
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe35",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe35.it36",
    "access": null,
    "description": "shouldThrowAnErrorIfMachineNameIsMissing",
    "lineNumber": 142
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe35",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe35.it37",
    "access": null,
    "description": "shouldThrowAnErrorIfMachineNameIsInvalid",
    "lineNumber": 158
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe35",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe35.it38",
    "access": null,
    "description": "shouldValidate",
    "lineNumber": 175
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe39",
    "testId": 39,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29",
    "testDepth": 1,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe39",
    "access": null,
    "description": "BaseEntity.save()",
    "lineNumber": 194
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it40",
    "testId": 40,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe39",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe39.it40",
    "access": null,
    "description": "shouldThrowAnErrorIfValidationFails",
    "lineNumber": 196
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe39",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe39.it41",
    "access": null,
    "description": "shouldSuccessfullySave",
    "lineNumber": 212
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe39",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe39.it42",
    "access": null,
    "description": "shouldRenameEntity",
    "lineNumber": 251
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe39",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe39.it43",
    "access": null,
    "description": "shouldFailToSaveIfMachineNameExistsAndNotRenaming",
    "lineNumber": 297
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe44",
    "testId": 44,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29",
    "testDepth": 1,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe44",
    "access": null,
    "description": "BaseEntity.load()",
    "lineNumber": 354
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe44",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe44.it45",
    "access": null,
    "description": "shouldThrowAnErrorIfInvalidConditions",
    "lineNumber": 356
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe44",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe44.it46",
    "access": null,
    "description": "shouldThrowAnErrorIfNoDocumentsMatch",
    "lineNumber": 372
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe44",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe44.it47",
    "access": null,
    "description": "shouldLoadByConditions",
    "lineNumber": 390
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe44",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe44.it48",
    "access": null,
    "description": "shouldLoadByMachineName",
    "lineNumber": 429
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe49",
    "testId": 49,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29",
    "testDepth": 1,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "access": null,
    "description": "BaseEntity.delete()",
    "lineNumber": 472
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it50",
    "access": null,
    "description": "shouldThrowAnErrorIfNoMachineName",
    "lineNumber": 474
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it51",
    "access": null,
    "description": "shouldThrowAnErrorIfNoDocumentsMatch",
    "lineNumber": 490
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it52",
    "access": null,
    "description": "shouldMoveToTrash",
    "lineNumber": 507
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it53",
    "access": null,
    "description": "shouldDeleteOnceTrashed",
    "lineNumber": 571
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it54",
    "testId": 54,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it54",
    "access": null,
    "description": "shouldDelete",
    "lineNumber": 619
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it55",
    "access": null,
    "description": "shouldLoadEntityFromTrash",
    "lineNumber": 679
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "tests/EntityManager/BaseEntity.test.js~describe29.describe49",
    "testDepth": 2,
    "longname": "tests/EntityManager/BaseEntity.test.js~describe29.describe49.it56",
    "access": null,
    "description": "shouldRestoreIfTheEntityIsSaved",
    "lineNumber": 718
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EntityManager/Entity.test.js",
    "memberof": null,
    "longname": "tests/EntityManager/Entity.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Database = loader('EntityCI/Database'),\n    Validators = loader('EntityCI/Validators'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    EntityManager = loader('EntityCI/EntityManager'),\n    Schema = loader('EntityCI/EntityManager/Schema'),\n    Entity = loader('EntityCI/EntityManager/Entity'),\n    EUnknownSchemaField = loader(\n      'EntityCI/EntityManager/Errors/EUnknownSchemaField'\n    );\n\nvar sFieldData = Symbol.for('Entity.fieldData'),\n    database, entityManager, schema;\n\ndescribe('entity-ci/entity-ci-core/EntityManager/Entity', function () {\n\n  'use strict';\n\n  beforeEach(function (done) {\n\n    database = new Database();\n    database.connect('test', {\n      name: 'test',\n      host: '0.0.0.0'\n    }, true);\n\n    var validators = new Validators(),\n        sanitizers = new Sanitizers();\n\n    entityManager = new EntityManager(database, validators, sanitizers);\n\n    schema = new Schema(entityManager);\n    schema.machineName = 'test';\n    schema\n      .addField(\n        'title',\n        'Title',\n        'A title of this entity.',\n        'String',\n        {\n          'default': ''\n        }\n      )\n      .addFieldSanitization('title', 'trim')\n      .addField(\n        'description',\n        'Description',\n        'A description of this entity',\n        'String'\n      )\n      .addField('subentity', 'Sub', 'A sub entity.', 'Entity')\n      .addFieldValidation('subentity', 'entity', {\n        type: 'test'\n      })\n      .save(done);\n\n  });\n\n  afterEach(function (done) {\n\n    var queue = [];\n\n    queue.push(function (next) {\n      database.collection('schemas', 'test').drop(function () {\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      database.collection('entity-test', 'test').drop(function () {\n        next();\n      });\n    });\n\n    async.series(queue, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      database.disconnect('test');\n      done();\n    });\n\n  });\n\n  describe('Entity.constructor()', function () {\n\n    it('shouldUseTheSchemaMachineNameAsTheEntityType', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      test.string(\n        entity.type\n      ).is('test');\n\n    });\n\n  });\n\n  describe('Entity.fields', function () {});\n\n  describe('Entity.get()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      test.error(function () {\n        entity.get('test');\n      }).isInstanceOf(EUnknownSchemaField);\n\n    });\n\n    it('shouldReturnNullIfNoValueOrDefaultValue', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      test.value(\n        entity.get('description')\n      ).isNull();\n\n    });\n\n    it('shouldReturnTheDefaultValue', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      test.string(\n        entity.get('title')\n      ).is('');\n\n    });\n\n    it('shouldReturnTheSetValue', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      entity[sFieldData].title = 'test';\n\n      test.string(\n        entity.get('title')\n      ).is('test');\n\n    });\n\n  });\n\n  describe('Entity.set()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      test.error(function () {\n        entity.set('test', 'value');\n      }).isInstanceOf(EUnknownSchemaField);\n\n    });\n\n    it('shouldSetTheFieldValue', function () {\n\n      var entity = new Entity(entityManager, schema);\n\n      entity.set('title', 'hello world');\n\n      test.string(\n        entity[sFieldData].title\n      ).is('hello world');\n\n    });\n\n  });\n\n  describe('Entity.save()', function () {\n\n    it('shouldSave', function (done) {\n\n      var entity = new Entity(entityManager, schema),\n          queue = [];\n\n      entity.machineName = 'test';\n      entity\n        .set('title', 'Test')\n        .set('description', 'A test entity.');\n\n      queue.push(function (next) {\n\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity.collection.find(function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(docs[0])\n            .hasKey('type', 'test')\n            .hasKey('machineName', 'test');\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        entity = new Entity(entityManager, schema);\n        entity.machineName = 'test';\n        entity.load(next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.string(\n          entity.machineName\n        ).is('test');\n\n        test.string(\n          entity.get('title')\n        ).is('Test');\n\n        test.string(\n          entity.get('description')\n        ).is('A test entity.');\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldSaveWithEntityFields', function (done) {\n\n      var entity1, entity2,\n          queue = [];\n\n      queue.push(function (next) {\n\n        entity1 = new Entity(entityManager, schema);\n        entity1.machineName = 'test1';\n        entity1\n          .set('title', 'Test 1')\n          .set('description', 'A test entity.');\n\n        entity1.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity2 = new Entity(entityManager, schema);\n        entity2.machineName = 'test2';\n        entity2\n          .set('title', 'Test 2')\n          .set('description', 'A test entity.')\n          .set('subentity', entity1);\n\n        entity2.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entity1.collection.find(function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(2);\n\n          test.object(docs[0])\n            .hasKey('type', 'test')\n            .hasKey('machineName', 'test1');\n\n          test.object(docs[1])\n            .hasKey('type', 'test')\n            .hasKey('machineName', 'test2');\n\n          test.object(\n            docs[1].fieldData\n          ).is({\n            title: 'Test 2',\n            description: 'A test entity.',\n            subentity: {\n              type: 'test',\n              machineName: 'test1'\n            }\n          });\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        entity2 = new Entity(entityManager, schema);\n        entity2.machineName = 'test2';\n        entity2.load(next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.string(\n          entity2.machineName\n        ).is('test2');\n\n        test.string(\n          entity2.get('title')\n        ).is('Test 2');\n\n        test.string(\n          entity2.get('description')\n        ).is('A test entity.');\n\n        test.object(entity2.get('subentity'))\n          .isInstanceOf(Entity)\n          .hasKey('machineName', 'test1');\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe57",
    "testId": 57,
    "memberof": "tests/EntityManager/Entity.test.js",
    "testDepth": 0,
    "longname": "tests/EntityManager/Entity.test.js~describe57",
    "access": null,
    "description": "entity-ci/entity-ci-core/EntityManager/Entity",
    "lineNumber": 31
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe58",
    "testId": 58,
    "memberof": "tests/EntityManager/Entity.test.js~describe57",
    "testDepth": 1,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe58",
    "access": null,
    "description": "Entity.constructor()",
    "lineNumber": 102
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe58",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe58.it59",
    "access": null,
    "description": "shouldUseTheSchemaMachineNameAsTheEntityType",
    "lineNumber": 104
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe60",
    "testId": 60,
    "memberof": "tests/EntityManager/Entity.test.js~describe57",
    "testDepth": 1,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe60",
    "access": null,
    "description": "Entity.fields",
    "lineNumber": 116
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe61",
    "testId": 61,
    "memberof": "tests/EntityManager/Entity.test.js~describe57",
    "testDepth": 1,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe61",
    "access": null,
    "description": "Entity.get()",
    "lineNumber": 118
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe61",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe61.it62",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 120
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe61",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe61.it63",
    "access": null,
    "description": "shouldReturnNullIfNoValueOrDefaultValue",
    "lineNumber": 130
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe61",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe61.it64",
    "access": null,
    "description": "shouldReturnTheDefaultValue",
    "lineNumber": 140
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it65",
    "testId": 65,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe61",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe61.it65",
    "access": null,
    "description": "shouldReturnTheSetValue",
    "lineNumber": 150
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe66",
    "testId": 66,
    "memberof": "tests/EntityManager/Entity.test.js~describe57",
    "testDepth": 1,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe66",
    "access": null,
    "description": "Entity.set()",
    "lineNumber": 164
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe66",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe66.it67",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 166
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe66",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe66.it68",
    "access": null,
    "description": "shouldSetTheFieldValue",
    "lineNumber": 176
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe69",
    "testId": 69,
    "memberof": "tests/EntityManager/Entity.test.js~describe57",
    "testDepth": 1,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe69",
    "access": null,
    "description": "Entity.save()",
    "lineNumber": 190
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe69",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe69.it70",
    "access": null,
    "description": "shouldSave",
    "lineNumber": 192
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "tests/EntityManager/Entity.test.js~describe57.describe69",
    "testDepth": 2,
    "longname": "tests/EntityManager/Entity.test.js~describe57.describe69.it71",
    "access": null,
    "description": "shouldSaveWithEntityFields",
    "lineNumber": 260
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EntityManager/EntityManager.test.js",
    "memberof": null,
    "longname": "tests/EntityManager/EntityManager.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Database = loader('EntityCI/Database'),\n    Validators = loader('EntityCI/Validators'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    EntityManager = loader('EntityCI/EntityManager'),\n    Schema = loader('EntityCI/EntityManager/Schema'),\n    Entity = loader('EntityCI/EntityManager/Entity'),\n    ECantFindEntity = loader(\n      'EntityCI/EntityManager/Errors/ECantFindEntity'\n    );\n\nvar database, validators, sanitizers;\n\nfunction createSchema(entityManager, done) {\n  'use strict';\n\n  var schema = new Schema(entityManager);\n  schema.machineName = 'test';\n  schema\n    .addField(\n      'title',\n      'Title',\n      'A title of this entity.',\n      'String',\n      {\n        'default': ''\n      }\n    )\n    .addFieldSanitization('title', 'trim')\n    .addField(\n      'description',\n      'Description',\n      'A description of this entity',\n      'String'\n    )\n    .addField('subentity', 'Sub', 'A sub entity.', 'Entity')\n    .addFieldValidation('subentity', 'entity', {\n      type: 'test'\n    })\n    .save(function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      return done(null, schema);\n    });\n}\n\ndescribe('entity-ci/entity-ci-core/EntityManager', function () {\n\n  'use strict';\n\n  beforeEach(function () {\n\n    database = new Database();\n    database.connect('test', {\n      name: 'test',\n      host: '0.0.0.0'\n    }, true);\n\n    validators = new Validators();\n    sanitizers = new Sanitizers();\n\n  });\n\n  afterEach(function (done) {\n\n    var queue = [];\n\n    queue.push(function (next) {\n      database.collection('schemas', 'test').drop(function () {\n        next();\n      });\n    });\n\n    queue.push(function (next) {\n      database.collection('entity-test', 'test').drop(function () {\n        next();\n      });\n    });\n\n    async.series(queue, function (err) {\n      if (err) {\n        return done(err);\n      }\n\n      database.disconnect('test');\n      done();\n    });\n\n  });\n\n  describe('EntityManager.schemas()', function () {\n\n    it('shouldReturnAnEmptyArray', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        entityManager.schemas(function (err, schemas) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            schemas\n          ).hasLength(0);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('ShouldReturnAnArrayWithSchemaName', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.schemas(function (err, schemas) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            schemas\n          ).hasLength(1).is([{\n            machineName: 'test',\n            title: '',\n            description: ''\n          }]);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('EntityManager.schema()', function () {\n\n    it('shouldThrowAnErrorIfTheSchemaIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers);\n\n      entityManager.schema('test', function (err, schema) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldReturnTheSchema', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.schema('test', function (err, schema) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.object(schema)\n            .isInstanceOf(Schema)\n            .hasKey('machineName', 'test');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('EntityManager.exists()', function () {\n\n    it('shouldThrowAnErrorIfTheSchemaIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers);\n\n      entityManager.exists('test', 'test', function (err, exists) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldReturnFalseIfEntityDoesntExist', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.exists('test', 'test', function (err, exists) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.bool(\n            exists\n          ).isNotTrue();\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldReturnTrueIfEntityExists', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          schema,\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, function (err, s) {\n          if (err) {\n            return next(err);\n          }\n\n          schema = s;\n          next();\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        var entity = new Entity(entityManager, schema);\n        entity.machineName = 'test';\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.exists('test', 'test', function (err, exists) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.bool(\n            exists\n          ).isTrue();\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('EntityManager.count()', function () {\n\n    it('shouldThrowAnErrorIfTheSchemaIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers);\n\n      entityManager.count('test', function (err, count) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldReturnZeroIfNoEntities', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.count('test', function (err, count) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.number(\n            count\n          ).is(0);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldReturnTrueIfEntityExists', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          schema,\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, function (err, s) {\n          if (err) {\n            return next(err);\n          }\n\n          schema = s;\n          next();\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        var entity = new Entity(entityManager, schema);\n        entity.machineName = 'test';\n        entity.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.count('test', function (err, count) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.number(\n            count\n          ).is(1);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('EntityManager.create()', function () {\n\n    it('shouldThrowAnErrorIfTheSchemaIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers);\n\n      entityManager.create(function (err, entity) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      }, 'test');\n\n    });\n\n    it('shouldCreateTheEntity', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.object(\n            entity\n          ).isInstanceOf(Entity);\n\n          test.string(\n            entity.type\n          ).is('test');\n\n          next();\n\n        }, 'test');\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('EntityManager.load()', function () {\n\n    it('shouldThrowAnErrorIfTheSchemaIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers);\n\n      entityManager.load('test', 'test', function (err, entity) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      }, 'test');\n\n    });\n\n    it('shouldThrowAnErrorIfTheEntityIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.load('test', 'test', function (err, entity) {\n\n          test.object(\n            err\n          ).isInstanceOf(ECantFindEntity);\n\n          test.value(\n            entity\n          ).isNull();\n\n          done();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldCreateTheEntityIfForced', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.load('test', 'test', function (err, entity) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.object(\n            entity\n          ).isInstanceOf(Entity);\n\n          test.bool(\n            entity.isNew\n          ).isTrue();\n\n          done();\n\n        }, true);\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldLoadTheEntity', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.load('test', 'test', function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.value(\n            err\n          ).isNull();\n\n          test.object(\n            entity\n          ).isInstanceOf(Entity);\n\n          test.bool(\n            entity.isNew\n          ).isNotTrue();\n\n          test.string(\n            entity.machineName\n          ).is('test');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('EntityManager.find()', function () {\n\n    it('shouldThrowAnErrorIfTheSchemaIsUndefined', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers);\n\n      entityManager.find('test', {}, function (err, entities) {\n\n        test.object(\n          err\n        ).isInstanceOf(ECantFindEntity);\n\n        done();\n\n      }, 'test');\n\n    });\n\n    it('shouldReturnEmptyArrayIfNoMatches', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.find('test', {}, function (err, entities) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.array(\n            entities\n          ).hasLength(0);\n\n          done();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldFindMultipleEntities', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test2';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test3';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'unknown4';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.find('test', {\n          machineName: /test/\n        }, function (err, entities) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            entities\n          ).hasLength(3);\n\n          test.object(entities[0])\n            .isInstanceOf(Entity)\n            .hasKey('type', 'test')\n            .hasKey('machineName', 'test');\n\n          test.object(entities[1])\n            .isInstanceOf(Entity)\n            .hasKey('type', 'test')\n            .hasKey('machineName', 'test2');\n\n          test.object(entities[2])\n            .isInstanceOf(Entity)\n            .hasKey('type', 'test')\n            .hasKey('machineName', 'test3');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldOrderResults', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test2';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test3';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'unknown4';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.find('test', {\n          '$query': {\n            machineName: /test/\n          },\n          '$orderby': {\n            machineName: -1\n          }\n        }, function (err, entities) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            entities\n          ).hasLength(3);\n\n          test.object(entities[0])\n            .hasKey('machineName', 'test3');\n\n          test.object(entities[1])\n            .hasKey('machineName', 'test2');\n\n          test.object(entities[2])\n            .hasKey('machineName', 'test');\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldLimitResults', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test2';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test3';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'unknown4';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.find('test', {\n          // Nothing.\n        }, function (err, entities, page, count, perPage, pages) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            entities\n          ).hasLength(2);\n\n          test.object(\n            entities[0]\n          ).hasKey('machineName', 'test');\n\n          test.object(\n            entities[1]\n          ).hasKey('machineName', 'test2');\n\n          test.number(\n            page\n          ).is(1);\n\n          test.number(\n            count\n          ).is(4);\n\n          test.number(\n            perPage\n          ).is(2);\n\n          test.number(\n            pages\n          ).is(2);\n\n          next();\n\n        }, 2);\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldPageResults', function (done) {\n\n      var entityManager = new EntityManager(database, validators, sanitizers),\n          queue = [];\n\n      queue.push(function (next) {\n\n        createSchema(entityManager, next);\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test2';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'test3';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.create(function (err, entity) {\n\n          if (err) {\n            return next(err);\n          }\n\n          entity.machineName = 'unknown4';\n          entity.save(next);\n\n        }, 'test');\n\n      });\n\n      queue.push(function (next) {\n\n        entityManager.find('test', {\n          // Nothing.\n        }, function (err, entities, page, count, perPage, pages) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            entities\n          ).hasLength(2);\n\n          test.object(\n            entities[0]\n          ).hasKey('machineName', 'test3');\n\n          test.object(\n            entities[1]\n          ).hasKey('machineName', 'unknown4');\n\n          test.number(\n            page\n          ).is(2);\n\n          test.number(\n            count\n          ).is(4);\n\n          test.number(\n            perPage\n          ).is(2);\n\n          test.number(\n            pages\n          ).is(2);\n\n          next();\n\n        }, 2, 2);\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe72",
    "testId": 72,
    "memberof": "tests/EntityManager/EntityManager.test.js",
    "testDepth": 0,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72",
    "access": null,
    "description": "entity-ci/entity-ci-core/EntityManager",
    "lineNumber": 65
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe73",
    "testId": 73,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe73",
    "access": null,
    "description": "EntityManager.schemas()",
    "lineNumber": 109
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe73",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe73.it74",
    "access": null,
    "description": "shouldReturnAnEmptyArray",
    "lineNumber": 111
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe73",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe73.it75",
    "access": null,
    "description": "ShouldReturnAnArrayWithSchemaName",
    "lineNumber": 138
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe76",
    "testId": 76,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe76",
    "access": null,
    "description": "EntityManager.schema()",
    "lineNumber": 177
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe76",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe76.it77",
    "access": null,
    "description": "shouldThrowAnErrorIfTheSchemaIsUndefined",
    "lineNumber": 179
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it78",
    "testId": 78,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe76",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe76.it78",
    "access": null,
    "description": "shouldReturnTheSchema",
    "lineNumber": 195
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe79",
    "testId": 79,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe79",
    "access": null,
    "description": "EntityManager.exists()",
    "lineNumber": 230
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it80",
    "testId": 80,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe79",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe79.it80",
    "access": null,
    "description": "shouldThrowAnErrorIfTheSchemaIsUndefined",
    "lineNumber": 232
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it81",
    "testId": 81,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe79",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe79.it81",
    "access": null,
    "description": "shouldReturnFalseIfEntityDoesntExist",
    "lineNumber": 248
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it82",
    "testId": 82,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe79",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe79.it82",
    "access": null,
    "description": "shouldReturnTrueIfEntityExists",
    "lineNumber": 281
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe83",
    "testId": 83,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe83",
    "access": null,
    "description": "EntityManager.count()",
    "lineNumber": 332
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it84",
    "testId": 84,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe83",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe83.it84",
    "access": null,
    "description": "shouldThrowAnErrorIfTheSchemaIsUndefined",
    "lineNumber": 334
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it85",
    "testId": 85,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe83",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe83.it85",
    "access": null,
    "description": "shouldReturnZeroIfNoEntities",
    "lineNumber": 350
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it86",
    "testId": 86,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe83",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe83.it86",
    "access": null,
    "description": "shouldReturnTrueIfEntityExists",
    "lineNumber": 383
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe87",
    "testId": 87,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe87",
    "access": null,
    "description": "EntityManager.create()",
    "lineNumber": 434
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it88",
    "testId": 88,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe87",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe87.it88",
    "access": null,
    "description": "shouldThrowAnErrorIfTheSchemaIsUndefined",
    "lineNumber": 436
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it89",
    "testId": 89,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe87",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe87.it89",
    "access": null,
    "description": "shouldCreateTheEntity",
    "lineNumber": 452
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe90",
    "testId": 90,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe90",
    "access": null,
    "description": "EntityManager.load()",
    "lineNumber": 491
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it91",
    "testId": 91,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe90",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe90.it91",
    "access": null,
    "description": "shouldThrowAnErrorIfTheSchemaIsUndefined",
    "lineNumber": 493
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it92",
    "testId": 92,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe90",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe90.it92",
    "access": null,
    "description": "shouldThrowAnErrorIfTheEntityIsUndefined",
    "lineNumber": 509
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it93",
    "testId": 93,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe90",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe90.it93",
    "access": null,
    "description": "shouldCreateTheEntityIfForced",
    "lineNumber": 542
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it94",
    "testId": 94,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe90",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe90.it94",
    "access": null,
    "description": "shouldLoadTheEntity",
    "lineNumber": 579
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe95",
    "testId": 95,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72",
    "testDepth": 1,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "access": null,
    "description": "EntityManager.find()",
    "lineNumber": 641
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it96",
    "testId": 96,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95.it96",
    "access": null,
    "description": "shouldThrowAnErrorIfTheSchemaIsUndefined",
    "lineNumber": 643
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it97",
    "testId": 97,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95.it97",
    "access": null,
    "description": "shouldReturnEmptyArrayIfNoMatches",
    "lineNumber": 659
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it98",
    "testId": 98,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95.it98",
    "access": null,
    "description": "shouldFindMultipleEntities",
    "lineNumber": 692
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it99",
    "testId": 99,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95.it99",
    "access": null,
    "description": "shouldOrderResults",
    "lineNumber": 802
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it100",
    "testId": 100,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95.it100",
    "access": null,
    "description": "shouldLimitResults",
    "lineNumber": 911
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it101",
    "testId": 101,
    "memberof": "tests/EntityManager/EntityManager.test.js~describe72.describe95",
    "testDepth": 2,
    "longname": "tests/EntityManager/EntityManager.test.js~describe72.describe95.it101",
    "access": null,
    "description": "shouldPageResults",
    "lineNumber": 1030
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EntityManager/Schema.test.js",
    "memberof": null,
    "longname": "tests/EntityManager/Schema.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Database = loader('EntityCI/Database'),\n    Validators = loader('EntityCI/Validators'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    EntityManager = loader('EntityCI/EntityManager'),\n    Schema = loader('EntityCI/EntityManager/Schema'),\n    EUnknownFieldType = loader(\n      'EntityCI/EntityManager/Errors/EUnknownFieldType'\n    ),\n    ESchemaFieldDefined = loader(\n      'EntityCI/EntityManager/Errors/ESchemaFieldDefined'\n    ),\n    EUnknownSchemaField = loader(\n      'EntityCI/EntityManager/Errors/EUnknownSchemaField'\n    ),\n    EUnknownSanitizer = loader(\n      'EntityCI/Sanitizers/Errors/EUnknownSanitizer'\n    ),\n    EUnknownValidator = loader(\n      'EntityCI/Validators/Errors/EUnknownValidator'\n    );\n\nvar database, entityManager,\n    sFields = Symbol.for('Schema.fields');\n\ndescribe('entity-ci/entity-ci-core/EntityManager/Schema', function () {\n\n  'use strict';\n\n  beforeEach(function (done) {\n\n    database = new Database();\n    database.connect('test', {\n      name: 'test',\n      host: '0.0.0.0'\n    }, true);\n\n    var validators = new Validators(),\n        sanitizers = new Sanitizers();\n    entityManager = new EntityManager(database, validators, sanitizers);\n\n    done();\n\n  });\n\n  afterEach(function (done) {\n\n    database.collection('schemas', 'test').drop(function () {\n      database.disconnect('test');\n      done();\n    });\n\n  });\n\n  describe('Schema.addField', function () {\n\n    it('shouldThrowAnErrorIfTheFieldTypeIsUnknown', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.error(function () {\n        schema.addField(\n          'test',\n          'Test',\n          'A test field.',\n          'test',\n          {}\n        );\n      }).isInstanceOf(EUnknownFieldType);\n\n    });\n\n    it('shouldAddField', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      test.object(\n        schema[sFields]\n      ).hasKey('test');\n\n      test.object(schema[sFields].test)\n        .hasKey('type', 'String')\n        .hasKey('title', 'Test')\n        .hasKey('description', 'A test field.');\n\n    });\n\n    it('shouldThrowAnErrorIfTheFieldIsAlreadyDefined', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      test.error(function () {\n        schema.addField(\n          'test',\n          'Test',\n          'A test field.',\n          'String',\n          {}\n        );\n      }).isInstanceOf(ESchemaFieldDefined);\n\n    });\n\n  });\n\n  describe('Schema.hasField()', function () {\n\n    it('shouldReturnFalseIfNoFields', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.bool(\n        schema.hasField('test')\n      ).isNotTrue();\n\n    });\n\n    it('shouldReturnTrueIfHasField', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      test.bool(\n        schema.hasField('test')\n      ).isTrue();\n\n    });\n\n  });\n\n  describe('Schema.getField()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.error(function () {\n        schema.getField('test');\n      }).isInstanceOf(EUnknownSchemaField);\n\n    });\n\n    it('shouldReturnTheFieldConfig', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      test.object(schema.getField('test'))\n        .hasKey('type', 'String')\n        .hasKey('title', 'Test')\n        .hasKey('description', 'A test field.');\n\n    });\n\n    it('shouldAlterTheFieldConfig', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      schema.getField('test').title = 'Hello';\n\n      test.string(\n        schema[sFields].test.title\n      ).is('Hello');\n\n    });\n\n  });\n\n  describe('Schema.delField()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.error(function () {\n        schema.delField('test');\n      }).isInstanceOf(EUnknownSchemaField);\n\n    });\n\n    it('shouldDeleteTheField', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      schema.delField('test');\n\n      test.value(\n        schema[sFields].test\n      ).isUndefined();\n\n    });\n\n  });\n\n  describe('Schema.fields', function () {\n\n    it('shouldReturnAnEmptyArray', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.array(\n        schema.fields\n      ).hasLength(0);\n\n    });\n\n    it('shouldReturnAnArrayOfNames', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField(\n        'test',\n        'Test',\n        'A test field.',\n        'String',\n        {}\n      );\n\n      test.value(\n        schema.fields\n      ).hasLength(1).is(['test']);\n\n    });\n\n  });\n\n  describe('Schema.addFieldSanitization()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.error(function () {\n        schema.addFieldSanitization('test', 'test', {});\n      }).isInstanceOf(EUnknownSchemaField);\n\n    });\n\n    it('shouldThrowAnErrorIfTheRuleDoesntExist', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField('test', 'Test', 'A test field.', 'String');\n\n      test.error(function () {\n        schema.addFieldSanitization('test', 'test');\n      }).isInstanceOf(EUnknownSanitizer);\n\n    });\n\n    it('shouldAddTheRule', function (done) {\n\n      var schema = new Schema(entityManager);\n\n      schema\n        .addField('test', 'Test', 'A test field.', 'String')\n        .addFieldSanitization('test', 'trim');\n\n      test.array(\n        schema[sFields].test.sanitizers\n      ).hasLength(1);\n\n      test.object(\n        schema[sFields].test.sanitizers[0]\n      ).hasKey('rule', 'trim');\n\n      done();\n\n    });\n\n  });\n\n  describe('Schema.addFieldValidation()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function () {\n\n      var schema = new Schema(entityManager);\n\n      test.error(function () {\n        schema.addFieldValidation('test', 'test', {});\n      }).isInstanceOf(EUnknownSchemaField);\n\n    });\n\n    it('shouldThrowAnErrorIfTheRuleDoesntExist', function () {\n\n      var schema = new Schema(entityManager);\n\n      schema.addField('test', 'Test', 'A test field.', 'String');\n\n      test.error(function () {\n        schema.addFieldValidation('test', 'test');\n      }).isInstanceOf(EUnknownValidator);\n\n    });\n\n    it('shouldAddTheRule', function (done) {\n\n      var schema = new Schema(entityManager);\n\n      schema\n        .addField('test', 'Test', 'A test field.', 'String')\n        .addFieldValidation('test', 'machine-name');\n\n      test.array(\n        schema[sFields].test.validators\n      ).hasLength(1);\n\n      test.object(\n        schema[sFields].test.validators[0]\n      ).hasKey('rule', 'machine-name');\n\n      done();\n\n    });\n\n  });\n\n  describe('Schema.sanitizeField()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function (done) {\n\n      var schema = new Schema(entityManager);\n\n      schema.sanitizeField('test', 'test value', function (err, value) {\n\n        test.object(\n          err\n        ).isInstanceOf(EUnknownSchemaField);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldSanitizeTheGivenValue', function (done) {\n\n      var schema = new Schema(entityManager);\n\n      schema\n        .addField('test', 'Test', 'A test field.', 'String')\n        .addFieldSanitization('test', 'trim');\n\n      schema.sanitizeField('test', ' test value ', function (err, orig, value) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.string(\n          orig\n        ).is(' test value ');\n\n        test.string(\n          value\n        ).is('test value');\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('Schema.validateField()', function () {\n\n    it('shouldThrowAnErrorIfTheFieldDoesntExist', function (done) {\n\n      var schema = new Schema(entityManager);\n\n      schema.validateField('test', 'test value', function (err, value) {\n\n        test.object(\n          err\n        ).isInstanceOf(EUnknownSchemaField);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldValidateTheGivenValue', function (done) {\n\n      var schema = new Schema(entityManager);\n\n\n      schema\n        .addField('test', 'Test', 'A test field.', 'String')\n        .addFieldSanitization('test', 'trim');\n\n      schema.sanitizeField('test', ' test value ', function (err, orig, value) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.string(\n          orig\n        ).is(' test value ');\n\n        test.string(\n          value\n        ).is('test value');\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('Schema.save()', function () {\n\n    it('shouldSave', function (done) {\n\n      var schema = new Schema(entityManager),\n          queue = [];\n\n      schema.machineName = 'test';\n      schema\n        .addField('test', 'Test', 'A test field.', 'String')\n        .addFieldSanitization('test', 'trim')\n        .addFieldValidation('test', 'machine-name');\n\n      queue.push(function (next) {\n\n        schema.save(next);\n\n      });\n\n      queue.push(function (next) {\n\n        schema.collection.find(function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(\n            docs[0]\n          ).hasKey('machineName', 'test');\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        schema = new Schema(entityManager);\n        schema.machineName = 'test';\n        schema.load(next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.string(\n          schema.machineName\n        ).is('test');\n\n        test.object(\n          schema.getField('test')\n        ).is({\n          type: 'String',\n          title: 'Test',\n          description: 'A test field.',\n          options: {},\n          validators: [{\n            rule: 'machine-name',\n            options: {},\n            weight: 0\n          }],\n          sanitizers: [{\n            rule: 'trim',\n            options: {},\n            weight: 0\n          }]\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n});\n\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe102",
    "testId": 102,
    "memberof": "tests/EntityManager/Schema.test.js",
    "testDepth": 0,
    "longname": "tests/EntityManager/Schema.test.js~describe102",
    "access": null,
    "description": "entity-ci/entity-ci-core/EntityManager/Schema",
    "lineNumber": 42
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe103",
    "testId": 103,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe103",
    "access": null,
    "description": "Schema.addField",
    "lineNumber": 71
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it104",
    "testId": 104,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe103",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe103.it104",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldTypeIsUnknown",
    "lineNumber": 73
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it105",
    "testId": 105,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe103",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe103.it105",
    "access": null,
    "description": "shouldAddField",
    "lineNumber": 89
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it106",
    "testId": 106,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe103",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe103.it106",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldIsAlreadyDefined",
    "lineNumber": 112
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe107",
    "testId": 107,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe107",
    "access": null,
    "description": "Schema.hasField()",
    "lineNumber": 138
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it108",
    "testId": 108,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe107",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe107.it108",
    "access": null,
    "description": "shouldReturnFalseIfNoFields",
    "lineNumber": 140
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it109",
    "testId": 109,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe107",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe107.it109",
    "access": null,
    "description": "shouldReturnTrueIfHasField",
    "lineNumber": 150
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe110",
    "testId": 110,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe110",
    "access": null,
    "description": "Schema.getField()",
    "lineNumber": 170
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it111",
    "testId": 111,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe110",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe110.it111",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 172
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it112",
    "testId": 112,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe110",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe110.it112",
    "access": null,
    "description": "shouldReturnTheFieldConfig",
    "lineNumber": 182
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it113",
    "testId": 113,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe110",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe110.it113",
    "access": null,
    "description": "shouldAlterTheFieldConfig",
    "lineNumber": 201
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe114",
    "testId": 114,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe114",
    "access": null,
    "description": "Schema.delField()",
    "lineNumber": 223
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it115",
    "testId": 115,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe114",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe114.it115",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 225
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it116",
    "testId": 116,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe114",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe114.it116",
    "access": null,
    "description": "shouldDeleteTheField",
    "lineNumber": 235
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe117",
    "testId": 117,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe117",
    "access": null,
    "description": "Schema.fields",
    "lineNumber": 257
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it118",
    "testId": 118,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe117",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe117.it118",
    "access": null,
    "description": "shouldReturnAnEmptyArray",
    "lineNumber": 259
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it119",
    "testId": 119,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe117",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe117.it119",
    "access": null,
    "description": "shouldReturnAnArrayOfNames",
    "lineNumber": 269
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe120",
    "testId": 120,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe120",
    "access": null,
    "description": "Schema.addFieldSanitization()",
    "lineNumber": 289
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it121",
    "testId": 121,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe120",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe120.it121",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 291
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it122",
    "testId": 122,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe120",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe120.it122",
    "access": null,
    "description": "shouldThrowAnErrorIfTheRuleDoesntExist",
    "lineNumber": 301
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it123",
    "testId": 123,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe120",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe120.it123",
    "access": null,
    "description": "shouldAddTheRule",
    "lineNumber": 313
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe124",
    "testId": 124,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe124",
    "access": null,
    "description": "Schema.addFieldValidation()",
    "lineNumber": 335
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it125",
    "testId": 125,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe124",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe124.it125",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 337
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it126",
    "testId": 126,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe124",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe124.it126",
    "access": null,
    "description": "shouldThrowAnErrorIfTheRuleDoesntExist",
    "lineNumber": 347
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it127",
    "testId": 127,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe124",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe124.it127",
    "access": null,
    "description": "shouldAddTheRule",
    "lineNumber": 359
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe128",
    "testId": 128,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe128",
    "access": null,
    "description": "Schema.sanitizeField()",
    "lineNumber": 381
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it129",
    "testId": 129,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe128",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe128.it129",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 383
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it130",
    "testId": 130,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe128",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe128.it130",
    "access": null,
    "description": "shouldSanitizeTheGivenValue",
    "lineNumber": 399
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe131",
    "testId": 131,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe131",
    "access": null,
    "description": "Schema.validateField()",
    "lineNumber": 429
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it132",
    "testId": 132,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe131",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe131.it132",
    "access": null,
    "description": "shouldThrowAnErrorIfTheFieldDoesntExist",
    "lineNumber": 431
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it133",
    "testId": 133,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe131",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe131.it133",
    "access": null,
    "description": "shouldValidateTheGivenValue",
    "lineNumber": 447
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe134",
    "testId": 134,
    "memberof": "tests/EntityManager/Schema.test.js~describe102",
    "testDepth": 1,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe134",
    "access": null,
    "description": "Schema.save()",
    "lineNumber": 478
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it135",
    "testId": 135,
    "memberof": "tests/EntityManager/Schema.test.js~describe102.describe134",
    "testDepth": 2,
    "longname": "tests/EntityManager/Schema.test.js~describe102.describe134.it135",
    "access": null,
    "description": "shouldSave",
    "lineNumber": 480
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EntityManager/Validators/Entity.test.js",
    "memberof": null,
    "longname": "tests/EntityManager/Validators/Entity.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Validators = loader('EntityCI/Validators'),\n    Entity = loader('EntityCI/EntityManager/Entity'),\n    EntityRule = loader('EntityCI/EntityManager/Validators/Entity'),\n    EInvalidEntity = loader('EntityCI/EntityManager/Errors/EInvalidEntity'),\n    EFailedEntity = loader('EntityCI/EntityManager/Errors/EFailedEntity');\n\nclass TestEntity extends Entity {\n\n  constructor(type) {\n    super(null);\n    this._type = type || 'test';\n  }\n\n  get type() {\n    return this._type;\n  }\n\n}\n\nfunction createValidator() {\n  'use strict';\n\n  var validators = new Validators();\n  validators.register('entity', EntityRule);\n\n  return validators;\n}\n\ndescribe(\n  'entity-ci/entity-ci-core/EntityManager/Validators/Entity', function () {\n\n  'use strict';\n\n  it('validatorShouldBeAvailable', function () {\n\n    var validators = createValidator();\n\n    test.bool(\n      validators.registered('entity')\n    ).isTrue();\n\n  });\n\n  it('shouldThrowAnInvalidEntity', function (done) {\n\n    var validators = createValidator(),\n        entity = {\n          type: 'test'\n        };\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidEntity);\n\n      done();\n\n    }, 'entity', entity, {\n      type: 'test'\n    });\n\n  });\n\n  it('shouldThrowFailedEntityError', function (done) {\n\n    var validators = createValidator(),\n        entity = new TestEntity('foo');\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EFailedEntity);\n\n      done();\n\n    }, 'entity', entity, {\n      type: 'test'\n    });\n\n  });\n\n  it('shouldValidateAsValid', function (done) {\n\n    var validators = createValidator(),\n        entity = new TestEntity();\n\n    validators.validate(function (err) {\n\n      test.value(\n        err\n      ).isNull();\n\n      done();\n\n    }, 'entity', entity);\n\n  });\n\n  it('shouldValidateAsValidWithEntityType', function (done) {\n\n    var validators = createValidator(),\n        entity = new TestEntity();\n\n    validators.validate(function (err) {\n\n      test.value(\n        err\n      ).isNull();\n\n      done();\n\n    }, 'entity', entity, {\n      type: 'test'\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe136",
    "testId": 136,
    "memberof": "tests/EntityManager/Validators/Entity.test.js",
    "testDepth": 0,
    "longname": "tests/EntityManager/Validators/Entity.test.js~describe136",
    "access": null,
    "description": "entity-ci/entity-ci-core/EntityManager/Validators/Entity",
    "lineNumber": 45
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it137",
    "testId": 137,
    "memberof": "tests/EntityManager/Validators/Entity.test.js~describe136",
    "testDepth": 1,
    "longname": "tests/EntityManager/Validators/Entity.test.js~describe136.it137",
    "access": null,
    "description": "validatorShouldBeAvailable",
    "lineNumber": 50
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it138",
    "testId": 138,
    "memberof": "tests/EntityManager/Validators/Entity.test.js~describe136",
    "testDepth": 1,
    "longname": "tests/EntityManager/Validators/Entity.test.js~describe136.it138",
    "access": null,
    "description": "shouldThrowAnInvalidEntity",
    "lineNumber": 60
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it139",
    "testId": 139,
    "memberof": "tests/EntityManager/Validators/Entity.test.js~describe136",
    "testDepth": 1,
    "longname": "tests/EntityManager/Validators/Entity.test.js~describe136.it139",
    "access": null,
    "description": "shouldThrowFailedEntityError",
    "lineNumber": 81
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it140",
    "testId": 140,
    "memberof": "tests/EntityManager/Validators/Entity.test.js~describe136",
    "testDepth": 1,
    "longname": "tests/EntityManager/Validators/Entity.test.js~describe136.it140",
    "access": null,
    "description": "shouldValidateAsValid",
    "lineNumber": 100
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it141",
    "testId": 141,
    "memberof": "tests/EntityManager/Validators/Entity.test.js~describe136",
    "testDepth": 1,
    "longname": "tests/EntityManager/Validators/Entity.test.js~describe136.it141",
    "access": null,
    "description": "shouldValidateAsValidWithEntityType",
    "lineNumber": 117
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/EventManager/EventManager.test.js",
    "memberof": null,
    "longname": "tests/EventManager/EventManager.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    EventManager = loader('EntityCI/EventManager'),\n    EUndefinedEvent = loader('EntityCI/EventManager/Errors/EUndefinedEvent');\n\ndescribe('entity-ci/entity-ci-core/EventManager', function () {\n\n  'use strict';\n\n  describe('EventManager.listen()', function () {\n\n    it('shouldRegisterAnEventCallback', function () {\n\n      var eventManager = new EventManager(),\n          callback = function () {};\n\n      eventManager.listen('test', callback);\n\n      test.array(\n        eventManager.events\n      ).is(['test']);\n\n    });\n\n  });\n\n  describe('EventManager.callbacks()', function () {\n\n    it('shouldThrowAnErrorIfEventIsUndefined', function () {\n\n      var eventManager = new EventManager();\n\n      test.error(function () {\n        eventManager.callbacks('test');\n      }).isInstanceOf(EUndefinedEvent);\n\n    });\n\n    it('shouldReturnTheCallbacks', function () {\n\n      var eventManager = new EventManager(),\n          callback = function () {};\n\n      eventManager.listen('test', callback);\n\n      test.array(\n        eventManager.callbacks('test')\n      ).is([{\n        callback: callback,\n        scope: null,\n        weight: 0\n      }]);\n\n    });\n\n    it('shouldBeSortedByWeight', function () {\n\n      var eventManager = new EventManager(),\n          callback1 = function () {},\n          callback2 = function () {},\n          callback3 = function () {};\n\n      eventManager.listen('test', callback1, null, 10);\n      eventManager.listen('test', callback2);\n      eventManager.listen('test', callback3, null, -10);\n\n      var callbacks = eventManager.callbacks('test');\n      test.object(\n        callbacks[0]\n      ).is({\n        callback: callback3,\n        scope: null,\n        weight: -10\n      });\n\n      test.object(\n        callbacks[1]\n      ).is({\n        callback: callback2,\n        scope: null,\n        weight: 0\n      });\n\n      test.object(\n        callbacks[2]\n      ).is({\n        callback: callback1,\n        scope: null,\n        weight: 10\n      });\n\n    });\n\n  });\n\n  describe('EventManager.unlisten()', function () {\n\n    it('shouldThrowAnErrorIfEventIsUndefined', function () {\n\n      var eventManager = new EventManager();\n\n      test.error(function () {\n        eventManager.unlisten('test');\n      }).isInstanceOf(EUndefinedEvent);\n\n    });\n\n    it('shouldRemoveTheSpecifiedCallback', function () {\n\n      var eventManager = new EventManager(),\n          callback1 = function () {},\n          callback2 = function () {},\n          callback3 = function () {};\n\n      eventManager.listen('test', callback1);\n      eventManager.listen('test', callback2);\n      eventManager.listen('test', callback3);\n\n      eventManager.unlisten('test', callback2);\n\n      test.array(\n        eventManager.callbacks('test')\n      ).hasLength(2).is([{\n        callback: callback1,\n        scope: null,\n        weight: 0\n      }, {\n        callback: callback3,\n        scope: null,\n        weight: 0\n      }]);\n\n    });\n\n    it('shouldRemoveTheSpecifiedEvent', function () {\n\n      var eventManager = new EventManager(),\n          callback1 = function () {},\n          callback2 = function () {},\n          callback3 = function () {};\n\n      eventManager.listen('test', callback1);\n      eventManager.listen('test', callback2);\n      eventManager.listen('test', callback3);\n\n      eventManager.unlisten('test');\n\n      test.array(\n        eventManager.events\n      ).hasLength(0).is([]);\n\n      test.error(function () {\n        eventManager.callbacks('test');\n      }).isInstanceOf(Error);\n\n    });\n\n    it('shouldRemoveEventIfLastCallbackHasBeenRemoved', function () {\n\n      var eventManager = new EventManager(),\n          callback = function () {};\n\n      eventManager.listen('test', callback);\n      eventManager.unlisten('test', callback);\n\n      test.array(\n        eventManager.events\n      ).hasLength(0).is([]);\n\n      test.error(function () {\n        eventManager.callbacks('test');\n      }).isInstanceOf(Error);\n\n    });\n\n  });\n\n  describe('EventManager.fire()', function () {\n\n    it('shouldContinueAsExpectedWhenEventHasntBeenRegistered', function (done) {\n\n      var eventManager = new EventManager();\n\n      eventManager.fire('test', function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        done();\n\n      });\n\n    });\n\n    it('shouldFireTheCallbacks', function (done) {\n\n      var eventManager = new EventManager(),\n          callbacks = {},\n          callback1 = function (next, params) {\n            callbacks.callback1 = params.msg1;\n            next();\n          },\n          callback2 = function (next, params) {\n            callbacks.callback2 = params.msg2;\n            next();\n          };\n\n      eventManager.listen('test', callback1);\n      eventManager.listen('test', callback2);\n\n      eventManager.fire('test', function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.object(\n          callbacks\n        ).is({\n          callback1: 'hello',\n          callback2: 'world'\n        });\n\n        done();\n\n      }, {\n        msg1: 'hello',\n        msg2: 'world'\n      });\n\n    });\n\n    it('shouldCatchErrors', function (done) {\n\n      var eventManager = new EventManager(),\n          callbacks = {},\n          callback1 = function (next, params) {\n            throw new Error();\n          },\n          callback2 = function (next, params) {\n            callbacks.callback2 = params.msg2;\n            next();\n          };\n\n      eventManager.listen('test', callback1);\n      eventManager.listen('test', callback2);\n\n      eventManager.fire('test', function (err) {\n\n        test.value(\n          err\n        ).isInstanceOf(Error);\n\n        test.object(\n          callbacks\n        ).is({});\n\n        done();\n\n      }, {\n        msg1: 'hello',\n        msg2: 'world'\n      });\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe142",
    "testId": 142,
    "memberof": "tests/EventManager/EventManager.test.js",
    "testDepth": 0,
    "longname": "tests/EventManager/EventManager.test.js~describe142",
    "access": null,
    "description": "entity-ci/entity-ci-core/EventManager",
    "lineNumber": 20
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe143",
    "testId": 143,
    "memberof": "tests/EventManager/EventManager.test.js~describe142",
    "testDepth": 1,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe143",
    "access": null,
    "description": "EventManager.listen()",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it144",
    "testId": 144,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe143",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe143.it144",
    "access": null,
    "description": "shouldRegisterAnEventCallback",
    "lineNumber": 26
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe145",
    "testId": 145,
    "memberof": "tests/EventManager/EventManager.test.js~describe142",
    "testDepth": 1,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe145",
    "access": null,
    "description": "EventManager.callbacks()",
    "lineNumber": 41
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it146",
    "testId": 146,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe145",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe145.it146",
    "access": null,
    "description": "shouldThrowAnErrorIfEventIsUndefined",
    "lineNumber": 43
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it147",
    "testId": 147,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe145",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe145.it147",
    "access": null,
    "description": "shouldReturnTheCallbacks",
    "lineNumber": 53
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it148",
    "testId": 148,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe145",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe145.it148",
    "access": null,
    "description": "shouldBeSortedByWeight",
    "lineNumber": 70
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe149",
    "testId": 149,
    "memberof": "tests/EventManager/EventManager.test.js~describe142",
    "testDepth": 1,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe149",
    "access": null,
    "description": "EventManager.unlisten()",
    "lineNumber": 110
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it150",
    "testId": 150,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe149",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe149.it150",
    "access": null,
    "description": "shouldThrowAnErrorIfEventIsUndefined",
    "lineNumber": 112
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it151",
    "testId": 151,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe149",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe149.it151",
    "access": null,
    "description": "shouldRemoveTheSpecifiedCallback",
    "lineNumber": 122
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it152",
    "testId": 152,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe149",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe149.it152",
    "access": null,
    "description": "shouldRemoveTheSpecifiedEvent",
    "lineNumber": 149
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it153",
    "testId": 153,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe149",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe149.it153",
    "access": null,
    "description": "shouldRemoveEventIfLastCallbackHasBeenRemoved",
    "lineNumber": 172
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe154",
    "testId": 154,
    "memberof": "tests/EventManager/EventManager.test.js~describe142",
    "testDepth": 1,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe154",
    "access": null,
    "description": "EventManager.fire()",
    "lineNumber": 192
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it155",
    "testId": 155,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe154",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe154.it155",
    "access": null,
    "description": "shouldContinueAsExpectedWhenEventHasntBeenRegistered",
    "lineNumber": 194
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it156",
    "testId": 156,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe154",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe154.it156",
    "access": null,
    "description": "shouldFireTheCallbacks",
    "lineNumber": 210
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it157",
    "testId": 157,
    "memberof": "tests/EventManager/EventManager.test.js~describe142.describe154",
    "testDepth": 2,
    "longname": "tests/EventManager/EventManager.test.js~describe142.describe154.it157",
    "access": null,
    "description": "shouldCatchErrors",
    "lineNumber": 248
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Locale/Locale.test.js",
    "memberof": null,
    "longname": "tests/Locale/Locale.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Locale = loader('EntityCI/Locale');\n\nvar core;\n\ndescribe('entity-ci/entity-ci-core/Locale', function () {\n\n  'use strict';\n\n  var tmpPath = path.join(\n        __dirname, 'entityci-tests--locale--' + process.pid\n      );\n\n  beforeEach(function (done) {\n\n    core = loader('EntityCI');\n    core.database.connect('test', {\n      name: 'test',\n      host: '0.0.0.0'\n    }, true);\n\n    fs.mkdirSync(tmpPath);\n\n    var translations = {\n      'test1.fr.json': {\n        'Hello world': 'Foo bar'\n      },\n      'test2.fr.json': {\n        'Hello world': 'Foo bar 2',\n        'Hello :name, welcome back': 'Foo :name, bar'\n      },\n      'test1.jp.json': {\n        'Hello :name, welcome back': 'Goodbye :name'\n      }\n    };\n\n    for (var filename in translations) {\n      fs.writeFileSync(\n        path.join(tmpPath, filename),\n        JSON.stringify(translations[filename])\n      );\n    }\n\n    done();\n\n  });\n\n  afterEach(function (done) {\n\n    var translations = ['test1.fr.json', 'test2.fr.json', 'test1.jp.json'];\n    for (var i = 0, len = translations.length; i < len; i++) {\n      fs.unlinkSync(path.join(tmpPath, translations[i]));\n    }\n\n    fs.rmdirSync(tmpPath);\n\n    core.database.collection('locales', 'test').drop(function () {\n      core.database.disconnect('test');\n      done();\n    });\n\n  });\n\n  describe('Locale.addFromFile()', function () {\n\n    it('shouldProcessTheTranslationFile', function (done) {\n\n      var locale = new Locale(core.database);\n\n      test.array(\n        locale.languages\n      ).is([]);\n\n      locale.addFromFile(path.join(tmpPath, 'test1.fr.json'), function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.array(\n          locale.languages\n        ).is(['fr']);\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Foo bar'\n        });\n\n        done();\n\n      });\n\n    });\n\n    it('shouldMergeButNotReplace', function (done) {\n\n      var queue = [],\n          locale = new Locale(core.database);\n\n      queue.push(function (next) {\n\n        locale.addFromFile(path.join(tmpPath, 'test1.fr.json'), next);\n\n      });\n\n      queue.push(function (next) {\n\n        locale.addFromFile(path.join(tmpPath, 'test2.fr.json'), next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.array(\n          locale.languages\n        ).is(['fr']);\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Foo bar',\n          'Hello :name, welcome back': 'Foo :name, bar'\n        });\n\n        next();\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('Locale.addFromDir()', function () {\n\n    it('shouldProcessAllTranslationFiles', function (done) {\n\n      var locale = new Locale(core.database);\n\n      test.array(\n        locale.languages\n      ).is([]);\n\n      locale.addFromDir(tmpPath, function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.array(\n          locale.languages\n        ).is(['fr', 'jp']);\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Foo bar',\n          'Hello :name, welcome back': 'Foo :name, bar'\n        });\n\n        test.object(\n          locale.locales('jp')\n        ).is({\n          'Hello :name, welcome back': 'Goodbye :name'\n        });\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('Locale.languages', function () {\n\n    it('shouldReturnAnEmptyArrayIfNoLanguages', function () {\n\n      var locale = new Locale(core.database);\n\n      test.array(\n        locale.languages\n      ).is([]);\n\n    });\n\n    it('shouldReturnLanguageNames', function (done) {\n\n      var locale = new Locale(core.database);\n\n      locale.addFromDir(tmpPath, function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.array(\n          locale.languages\n        ).is(['fr', 'jp']);\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('Locale.locales()', function () {\n\n    it('shouldThrowAnErrorIfLocaleIsUndefined', function () {\n\n      var locale = new Locale(core.database);\n\n      test.error(function () {\n        locale.locales('fr');\n      }).isInstanceOf(Error);\n\n    });\n\n  });\n\n  describe('Locale.translate()', function () {\n\n    it('shouldAddTranslationToTheDatabase', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.database\n          .collection('locales')\n          .find({}, function (err, docs) {\n\n            if (err) {\n              return next(err);\n            }\n\n            test.array(\n              docs\n            ).hasLength(0);\n\n            next();\n\n          });\n\n      });\n\n      queue.push(function (next) {\n\n        locale.translate('fr', 'Hello world', 'Foo bar', next);\n\n      });\n\n      queue.push(function (next) {\n\n        locale.database\n          .collection('locales')\n          .find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(docs[0])\n            .hasKey('language', 'fr')\n            .hasKey('msg', 'Hello world')\n            .hasKey('translation', 'Foo bar');\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Foo bar'\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldOverrideFileTranslation', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.addFromFile(path.join(tmpPath, 'test1.fr.json'), next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Foo bar'\n        });\n\n        next();\n\n      });\n\n      queue.push(function (next) {\n\n        locale.translate('fr', 'Hello world', 'Goodbye', next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Goodbye'\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('translatingUpdatesDatabaseEntry', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.translate('fr', 'Hello world', 'Foo bar', next);\n\n      });\n\n      queue.push(function (next) {\n\n        locale.database\n          .collection('locales')\n          .find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(docs[0])\n            .hasKey('language', 'fr')\n            .hasKey('msg', 'Hello world')\n            .hasKey('translation', 'Foo bar');\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Foo bar'\n        });\n\n        next();\n\n      });\n\n      queue.push(function (next) {\n\n        locale.translate('fr', 'Hello world', 'Goodbye', next);\n\n      });\n\n      queue.push(function (next) {\n\n        locale.database\n          .collection('locales')\n          .find({}, function (err, docs) {\n\n          if (err) {\n            return next(err);\n          }\n\n          test.array(\n            docs\n          ).hasLength(1);\n\n          test.object(docs[0])\n            .hasKey('language', 'fr')\n            .hasKey('msg', 'Hello world')\n            .hasKey('translation', 'Goodbye');\n\n          next();\n\n        });\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Goodbye'\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('cantOverrideDatabaseTranslation', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.translate('fr', 'Hello world', 'Goodbye', next);\n\n      });\n\n      queue.push(function (next) {\n\n        locale.addFromFile(path.join(tmpPath, 'test1.fr.json'), next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Goodbye'\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('Locale.initialize()', function () {\n\n    it('shouldLoadTranslationsFromDirectoryAndDatabase', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.database\n          .collection('locales')\n          .save({\n            language: 'fr',\n            msg: 'Hello world',\n            translation: 'Goodbye'\n          }, next);\n\n      });\n\n      queue.push(function (next) {\n\n        locale.initialize(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.array(\n          locale.languages\n        ).is(['fr', 'jp']);\n\n        test.object(\n          locale.locales('fr')\n        ).is({\n          'Hello world': 'Goodbye',\n          'Hello :name, welcome back': 'Foo :name, bar'\n        });\n\n        test.object(\n          locale.locales('jp')\n        ).is({\n          'Hello :name, welcome back': 'Goodbye :name'\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('Locale.strtr()', function () {\n\n    it('shouldReturnMsgWithNoParams', function () {\n\n      var locale = new Locale(core.database);\n\n      test.string(\n        locale._strtr('Hello world')\n      ).is('Hello world');\n\n    });\n\n    it('shouldReturnMsgWithParams', function () {\n\n      var locale = new Locale(core.database);\n\n      test.string(\n        locale._strtr('Hello :arg', {'arg': 'world'})\n      ).is('Hello world');\n\n    });\n\n  });\n\n  describe('Locale.t()', function () {\n\n    it('shouldReturnMsgIfNoTranslations', function () {\n\n      var locale = new Locale(core.database);\n\n      test.string(\n        locale.t('fr', 'Hello world')\n      ).is('Hello world');\n\n    });\n\n    it('shouldReturnMsgIfNoTranslationsWithParams', function () {\n\n      var locale = new Locale(core.database);\n\n      test.string(\n        locale.t('fr', 'Hello :arg', {'arg': 'world'})\n      ).is('Hello world');\n\n    });\n\n    it('shouldReturnTranslatedMsg', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.addFromFile(path.join(tmpPath, 'test1.fr.json'), next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.string(\n          locale.t('fr', 'Hello world')\n        ).is('Foo bar');\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldReturnTranslatedMsgWithParams', function (done) {\n\n      var locale = new Locale(core.database),\n          queue = [];\n\n      queue.push(function (next) {\n\n        locale.addFromFile(path.join(tmpPath, 'test1.fr.json'), next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.string(\n          locale.t('fr', 'Hello :name, welcome back', {'name': 'John'})\n        ).is('Hello John, welcome back');\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe158",
    "testId": 158,
    "memberof": "tests/Locale/Locale.test.js",
    "testDepth": 0,
    "longname": "tests/Locale/Locale.test.js~describe158",
    "access": null,
    "description": "entity-ci/entity-ci-core/Locale",
    "lineNumber": 24
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe159",
    "testId": 159,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe159",
    "access": null,
    "description": "Locale.addFromFile()",
    "lineNumber": 82
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it160",
    "testId": 160,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe159",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe159.it160",
    "access": null,
    "description": "shouldProcessTheTranslationFile",
    "lineNumber": 84
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it161",
    "testId": 161,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe159",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe159.it161",
    "access": null,
    "description": "shouldMergeButNotReplace",
    "lineNumber": 114
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe162",
    "testId": 162,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe162",
    "access": null,
    "description": "Locale.addFromDir()",
    "lineNumber": 153
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it163",
    "testId": 163,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe162",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe162.it163",
    "access": null,
    "description": "shouldProcessAllTranslationFiles",
    "lineNumber": 155
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe164",
    "testId": 164,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe164",
    "access": null,
    "description": "Locale.languages",
    "lineNumber": 194
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it165",
    "testId": 165,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe164",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe164.it165",
    "access": null,
    "description": "shouldReturnAnEmptyArrayIfNoLanguages",
    "lineNumber": 196
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it166",
    "testId": 166,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe164",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe164.it166",
    "access": null,
    "description": "shouldReturnLanguageNames",
    "lineNumber": 206
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe167",
    "testId": 167,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe167",
    "access": null,
    "description": "Locale.locales()",
    "lineNumber": 228
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it168",
    "testId": 168,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe167",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe167.it168",
    "access": null,
    "description": "shouldThrowAnErrorIfLocaleIsUndefined",
    "lineNumber": 230
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe169",
    "testId": 169,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe169",
    "access": null,
    "description": "Locale.translate()",
    "lineNumber": 242
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it170",
    "testId": 170,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe169",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe169.it170",
    "access": null,
    "description": "shouldAddTranslationToTheDatabase",
    "lineNumber": 244
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it171",
    "testId": 171,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe169",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe169.it171",
    "access": null,
    "description": "shouldOverrideFileTranslation",
    "lineNumber": 316
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it172",
    "testId": 172,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe169",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe169.it172",
    "access": null,
    "description": "translatingUpdatesDatabaseEntry",
    "lineNumber": 361
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it173",
    "testId": 173,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe169",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe169.it173",
    "access": null,
    "description": "cantOverrideDatabaseTranslation",
    "lineNumber": 456
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe174",
    "testId": 174,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe174",
    "access": null,
    "description": "Locale.initialize()",
    "lineNumber": 491
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it175",
    "testId": 175,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe174",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe174.it175",
    "access": null,
    "description": "shouldLoadTranslationsFromDirectoryAndDatabase",
    "lineNumber": 493
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe176",
    "testId": 176,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe176",
    "access": null,
    "description": "Locale.strtr()",
    "lineNumber": 545
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it177",
    "testId": 177,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe176",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe176.it177",
    "access": null,
    "description": "shouldReturnMsgWithNoParams",
    "lineNumber": 547
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it178",
    "testId": 178,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe176",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe176.it178",
    "access": null,
    "description": "shouldReturnMsgWithParams",
    "lineNumber": 557
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe179",
    "testId": 179,
    "memberof": "tests/Locale/Locale.test.js~describe158",
    "testDepth": 1,
    "longname": "tests/Locale/Locale.test.js~describe158.describe179",
    "access": null,
    "description": "Locale.t()",
    "lineNumber": 569
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it180",
    "testId": 180,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe179",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe179.it180",
    "access": null,
    "description": "shouldReturnMsgIfNoTranslations",
    "lineNumber": 571
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it181",
    "testId": 181,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe179",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe179.it181",
    "access": null,
    "description": "shouldReturnMsgIfNoTranslationsWithParams",
    "lineNumber": 581
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it182",
    "testId": 182,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe179",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe179.it182",
    "access": null,
    "description": "shouldReturnTranslatedMsg",
    "lineNumber": 591
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it183",
    "testId": 183,
    "memberof": "tests/Locale/Locale.test.js~describe158.describe179",
    "testDepth": 2,
    "longname": "tests/Locale/Locale.test.js~describe158.describe179.it183",
    "access": null,
    "description": "shouldReturnTranslatedMsgWithParams",
    "lineNumber": 616
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/PluginManager/PluginManager.test.js",
    "memberof": null,
    "longname": "tests/PluginManager/PluginManager.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar path = require('path'),\n    fs = require('fs'),\n    async = require('async'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    PluginManager = loader('EntityCI/PluginManager'),\n    Plugin = loader('EntityCI/PluginManager/Plugin'),\n    EUnknownPlugin = loader('EntityCI/PluginManager/Errors/EUnknownPlugin'),\n    EPluginEnabled = loader('EntityCI/PluginManager/Errors/EPluginEnabled'),\n    EPluginDisabled = loader('EntityCI/PluginManager/Errors/EPluginDisabled'),\n    EPluginUnmetDependencies = loader(\n      'EntityCI/PluginManager/Errors/EPluginUnmetDependencies'\n    );\n\ndescribe('entity-ci/entity-ci-core/PluginManager', function () {\n\n  'use strict';\n\n  var tmpPath = path.join(\n        __dirname, 'entityci-tests--plugins--' + process.pid\n      );\n\n  beforeEach(function () {\n\n    fs.mkdirSync(tmpPath);\n\n    var weights = [10, -10, 0, 40],\n        deps = [[], [], ['plugin2'], ['plugin1', 'plugin5']];\n\n    for (var i = 1; i <= 4; i++) {\n      fs.mkdirSync(path.join(tmpPath, 'plugin' + i));\n      fs.writeFileSync(\n        path.join(tmpPath, 'plugin' + i, 'plugin.json'),\n        JSON.stringify({\n          title: 'Plugin ' + i,\n          description: 'Plugin example ' + i + '.',\n          weight: weights[i - 1],\n          dependencies: deps[i - 1]\n        })\n      );\n\n      fs.writeFileSync(path.join(tmpPath, 'plugin' + i, 'index.js'), '\\n\\\n        var loader = require(\\'nsloader\\');\\n\\\n        var Plugin = loader(\\'EntityCI/PluginManager/Plugin\\');\\n\\\n        \\n\\\n        module.exports = class Plugin' + i + ' extends Plugin {};\\n\\\n      ');\n    }\n\n  });\n\n  afterEach(function () {\n\n    for (var i = 1; i <= 4; i++) {\n      fs.unlinkSync(path.join(tmpPath, 'plugin' + i, 'plugin.json'));\n      fs.unlinkSync(path.join(tmpPath, 'plugin' + i, 'index.js'));\n      fs.rmdirSync(path.join(tmpPath, 'plugin' + i));\n    }\n\n    fs.rmdirSync(tmpPath);\n  });\n\n  describe('PluginManager.index()', function () {\n\n    it('shouldIndexPlugins', function (done) {\n\n      var pluginManager = new PluginManager();\n      pluginManager.index(tmpPath, function (err) {\n\n        test.array(\n          pluginManager.plugins\n        ).is(['plugin1', 'plugin2', 'plugin3', 'plugin4']);\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('PluginManager.dependencies()', function () {\n\n    it('shouldReturnDepedenciesInfo', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          pluginManager.dependencies('plugin1')\n        ).is({\n          plugins: [],\n          unmet: [],\n          can: true\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldReturnDepedenciesInfoWithDependants', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          pluginManager.dependencies('plugin4')\n        ).is({\n          plugins: ['plugin1', 'plugin5'],\n          unmet: ['plugin5'],\n          can: false\n        });\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('PluginManager.enable()', function () {\n\n    it('shouldThrowAnErrorIfDoesntExist', function (done) {\n\n      var pluginManager = new PluginManager();\n      pluginManager.enable('plugin1', function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EUnknownPlugin);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldEnableThePlugin', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.array(\n          pluginManager.enabled\n        ).is([]);\n\n        next();\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin1', next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.array(\n          pluginManager.enabled\n        ).is(['plugin1']);\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldThrowAnErrorIfAlreadyEnabled', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin1', next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin1', function (err) {\n\n          test.object(\n            err\n          ).isInstanceOf(EPluginEnabled);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldThrowAnErrorIfPluginHasUnmetDependencies', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin4', function (err) {\n\n          test.object(\n            err\n          ).isInstanceOf(EPluginUnmetDependencies);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldEnableMetDependencies', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin3', function (err) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.array(\n            pluginManager.enabled\n          ).is(['plugin2', 'plugin3']);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('PluginManager.initialize()', function () {\n\n    it('shouldInitializeTheProvidedPlugins', function (done) {\n\n      var pluginManager = new PluginManager();\n      pluginManager.index(tmpPath, function (err) {\n\n        test.array(\n          pluginManager.enabled\n        ).is([]);\n\n        pluginManager.initialize(['plugin1'], function (err) {\n\n          test.value(\n            err\n          ).isNull();\n\n          test.array(\n            pluginManager.enabled\n          ).is(['plugin1']);\n\n          done();\n\n        });\n\n      });\n\n    });\n\n  });\n\n  describe('PluginManager.plugin()', function () {\n\n    it('shouldReturnNullIfPluginDoesntExist', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.initialize([], next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.value(\n          pluginManager.plugin('plugin1')\n        ).isNull();\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldReturnThePluginObject', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.initialize(['plugin1'], next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.object(\n          pluginManager.plugin('plugin1')\n        ).isInstanceOf(Plugin).hasKey('name', 'plugin1');\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('PluginManager.isEnabled()', function () {\n\n    it('shouldReturnFalseIfNotEnabled', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.bool(\n          pluginManager.isEnabled('plugin1')\n        ).isNotTrue();\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldReturnTrueIfEnabled', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin1', next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.bool(\n          pluginManager.isEnabled('plugin1')\n        ).isTrue();\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n  describe('PluginManager.disable()', function () {\n\n    it('shouldThrowAnErrorIfDoesntExist', function (done) {\n\n      var pluginManager = new PluginManager();\n      pluginManager.disable('plugin1', function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EUnknownPlugin);\n\n        done();\n\n      });\n\n    });\n\n    it('shouldDisableThePlugin', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.enable('plugin1', next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.array(\n          pluginManager.enabled\n        ).is(['plugin1']);\n\n        next();\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.disable('plugin1', next);\n\n      });\n\n      queue.push(function (next) {\n\n        test.array(\n          pluginManager.enabled\n        ).is([]);\n\n        next();\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n    it('shouldThrowAnErrorIfAlreadyDisabled', function (done) {\n\n      var queue = [],\n          pluginManager = new PluginManager();\n\n      queue.push(function (next) {\n\n        pluginManager.index(tmpPath, next);\n\n      });\n\n      queue.push(function (next) {\n\n        pluginManager.disable('plugin1', function (err) {\n\n          test.object(\n            err\n          ).isInstanceOf(EPluginDisabled);\n\n          next();\n\n        });\n\n      });\n\n      async.series(queue, done);\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe184",
    "testId": 184,
    "memberof": "tests/PluginManager/PluginManager.test.js",
    "testDepth": 0,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184",
    "access": null,
    "description": "entity-ci/entity-ci-core/PluginManager",
    "lineNumber": 29
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe185",
    "testId": 185,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe185",
    "access": null,
    "description": "PluginManager.index()",
    "lineNumber": 77
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it186",
    "testId": 186,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe185",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe185.it186",
    "access": null,
    "description": "shouldIndexPlugins",
    "lineNumber": 79
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe187",
    "testId": 187,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe187",
    "access": null,
    "description": "PluginManager.dependencies()",
    "lineNumber": 96
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it188",
    "testId": 188,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe187",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe187.it188",
    "access": null,
    "description": "shouldReturnDepedenciesInfo",
    "lineNumber": 98
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it189",
    "testId": 189,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe187",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe187.it189",
    "access": null,
    "description": "shouldReturnDepedenciesInfoWithDependants",
    "lineNumber": 127
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe190",
    "testId": 190,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe190",
    "access": null,
    "description": "PluginManager.enable()",
    "lineNumber": 158
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it191",
    "testId": 191,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe190",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe190.it191",
    "access": null,
    "description": "shouldThrowAnErrorIfDoesntExist",
    "lineNumber": 160
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it192",
    "testId": 192,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe190",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe190.it192",
    "access": null,
    "description": "shouldEnableThePlugin",
    "lineNumber": 175
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it193",
    "testId": 193,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe190",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe190.it193",
    "access": null,
    "description": "shouldThrowAnErrorIfAlreadyEnabled",
    "lineNumber": 216
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it194",
    "testId": 194,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe190",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe190.it194",
    "access": null,
    "description": "shouldThrowAnErrorIfPluginHasUnmetDependencies",
    "lineNumber": 251
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it195",
    "testId": 195,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe190",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe190.it195",
    "access": null,
    "description": "shouldEnableMetDependencies",
    "lineNumber": 280
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe196",
    "testId": 196,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe196",
    "access": null,
    "description": "PluginManager.initialize()",
    "lineNumber": 315
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it197",
    "testId": 197,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe196",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe196.it197",
    "access": null,
    "description": "shouldInitializeTheProvidedPlugins",
    "lineNumber": 317
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe198",
    "testId": 198,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe198",
    "access": null,
    "description": "PluginManager.plugin()",
    "lineNumber": 346
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it199",
    "testId": 199,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe198",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe198.it199",
    "access": null,
    "description": "shouldReturnNullIfPluginDoesntExist",
    "lineNumber": 348
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it200",
    "testId": 200,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe198",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe198.it200",
    "access": null,
    "description": "shouldReturnThePluginObject",
    "lineNumber": 379
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe201",
    "testId": 201,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe201",
    "access": null,
    "description": "PluginManager.isEnabled()",
    "lineNumber": 412
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it202",
    "testId": 202,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe201",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe201.it202",
    "access": null,
    "description": "shouldReturnFalseIfNotEnabled",
    "lineNumber": 414
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it203",
    "testId": 203,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe201",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe201.it203",
    "access": null,
    "description": "shouldReturnTrueIfEnabled",
    "lineNumber": 439
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe204",
    "testId": 204,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184",
    "testDepth": 1,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe204",
    "access": null,
    "description": "PluginManager.disable()",
    "lineNumber": 472
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it205",
    "testId": 205,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe204",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe204.it205",
    "access": null,
    "description": "shouldThrowAnErrorIfDoesntExist",
    "lineNumber": 474
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it206",
    "testId": 206,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe204",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe204.it206",
    "access": null,
    "description": "shouldDisableThePlugin",
    "lineNumber": 489
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it207",
    "testId": 207,
    "memberof": "tests/PluginManager/PluginManager.test.js~describe184.describe204",
    "testDepth": 2,
    "longname": "tests/PluginManager/PluginManager.test.js~describe184.describe204.it207",
    "access": null,
    "description": "shouldThrowAnErrorIfAlreadyDisabled",
    "lineNumber": 536
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Sanitizers/Rules/Trim.test.js",
    "memberof": null,
    "longname": "tests/Sanitizers/Rules/Trim.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    EInvalidValue = loader('EntityCI/Sanitizers/Errors/EInvalidValue');\n\ndescribe('entity-ci/entity-ci-core/Sanitizers/Rules/Trim', function () {\n\n  'use strict';\n\n  it('sanitizerShouldBeAvailable', function () {\n\n    var sanitizers = new Sanitizers();\n\n    test.bool(\n      sanitizers.registered('trim')\n    ).isTrue();\n\n  });\n\n  it('shouldThrowErrorIfNotString', function (done) {\n\n    var sanitizers = new Sanitizers();\n\n    sanitizers.sanitize(function (err, orig, value) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidValue);\n\n      done();\n\n    }, 'trim', false);\n\n  });\n\n  it('shouldTrimProvidedValue', function (done) {\n\n    var sanitizers = new Sanitizers();\n\n    sanitizers.sanitize(function (err, orig, value) {\n\n      test.value(\n        err\n      ).isNull();\n\n      test.value(\n        orig\n      ).is(' john doe  ');\n\n      test.value(\n        value\n      ).is('john doe');\n\n      done();\n\n    }, 'trim', ' john doe  ');\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe208",
    "testId": 208,
    "memberof": "tests/Sanitizers/Rules/Trim.test.js",
    "testDepth": 0,
    "longname": "tests/Sanitizers/Rules/Trim.test.js~describe208",
    "access": null,
    "description": "entity-ci/entity-ci-core/Sanitizers/Rules/Trim",
    "lineNumber": 20
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it209",
    "testId": 209,
    "memberof": "tests/Sanitizers/Rules/Trim.test.js~describe208",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Rules/Trim.test.js~describe208.it209",
    "access": null,
    "description": "sanitizerShouldBeAvailable",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it210",
    "testId": 210,
    "memberof": "tests/Sanitizers/Rules/Trim.test.js~describe208",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Rules/Trim.test.js~describe208.it210",
    "access": null,
    "description": "shouldThrowErrorIfNotString",
    "lineNumber": 34
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it211",
    "testId": 211,
    "memberof": "tests/Sanitizers/Rules/Trim.test.js~describe208",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Rules/Trim.test.js~describe208.it211",
    "access": null,
    "description": "shouldTrimProvidedValue",
    "lineNumber": 50
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Sanitizers/Sanitizers.test.js",
    "memberof": null,
    "longname": "tests/Sanitizers/Sanitizers.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Sanitizers = loader('EntityCI/Sanitizers'),\n    EUnknownSanitizer = loader('EntityCI/Sanitizers/Errors/EUnknownSanitizer');\n\nvar sRules = Symbol.for('Sanitizers.rules');\n\ndescribe('entity-ci/entity-ci-core/Sanitizers', function () {\n\n  'use strict';\n\n  describe('Sanitizers.register()', function () {\n\n    it('shouldBeAbleToRegisterNewSanitizer', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer = function () {};\n\n      sanitizers.register('test', sanitizer);\n\n      test.array(\n        sanitizers[sRules].test\n      ).hasLength(1).is([{\n        callback: sanitizer,\n        weight: 0\n      }]);\n\n    });\n\n    it('shouldBeAbleToRegisterMultipleCallbacks', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer1 = function () {},\n          sanitizer2 = function () {},\n          sanitizer3 = function () {};\n\n      sanitizers\n        .register('test', sanitizer1)\n        .register('test', sanitizer2)\n        .register('test', sanitizer3);\n\n      test.array(\n        sanitizers[sRules].test\n      ).hasLength(3).is([{\n        callback: sanitizer1,\n        weight: 0\n      }, {\n        callback: sanitizer2,\n        weight: 0\n      }, {\n        callback: sanitizer3,\n        weight: 0\n      }]);\n\n    });\n\n    it('multipleCallbacksShouldBeSortedByWeight', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer1 = function () {},\n          sanitizer2 = function () {},\n          sanitizer3 = function () {};\n\n      sanitizers.register('test', sanitizer1, 10)\n        .register('test', sanitizer2, -10)\n        .register('test', sanitizer3);\n\n      test.array(\n        sanitizers[sRules].test\n      ).hasLength(3).is([{\n        callback: sanitizer2,\n        weight: -10\n      }, {\n        callback: sanitizer3,\n        weight: 0\n      }, {\n        callback: sanitizer1,\n        weight: 10\n      }]);\n\n    });\n\n  });\n\n  describe('Sanitizers.registered()', function () {\n\n    it('shouldReturnFalseIfTheSanitizerHasntBeenRegistered', function () {\n\n      var sanitizers = new Sanitizers();\n\n      test.bool(\n        sanitizers.registered('test')\n      ).isNotTrue();\n\n    });\n\n    it('shouldReturnFalseIfTheSanitizerHasBeenRegisteredButEmpty', function () {\n\n      var sanitizers = new Sanitizers();\n\n      test.bool(\n        sanitizers.registered('test')\n      ).isNotTrue();\n\n    });\n\n    it('shouldReturnTrueIfSanitizerHasBeenRegistered', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer = function () {};\n\n      sanitizers.register('test', sanitizer);\n\n      test.bool(\n        sanitizers.registered('test')\n      ).isTrue();\n\n    });\n\n  });\n\n  describe('Sanitizers.unregister()', function () {\n\n    it('shouldThrowAnErrorIfSanitizerDoesntExist', function () {\n\n      var sanitizers = new Sanitizers();\n\n      test.error(function () {\n        sanitizers.unregister('test');\n      }).isInstanceOf(EUnknownSanitizer);\n\n    });\n\n    it('shouldUnregisterAllSanitizers', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer1 = function () {},\n          sanitizer2 = function () {},\n          sanitizer3 = function () {};\n\n      sanitizers\n        .register('test', sanitizer1, 10)\n        .register('test', sanitizer2, -10)\n        .register('test', sanitizer3);\n\n      sanitizers.unregister('test');\n      test.value(\n        sanitizers[sRules].test\n      ).isUndefined();\n\n    });\n\n    it('shouldUnregisterSpecifiedCallback', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer1 = function () {},\n          sanitizer2 = function () {},\n          sanitizer3 = function () {};\n\n      sanitizers\n        .register('test', sanitizer1, 10)\n        .register('test', sanitizer2, -10)\n        .register('test', sanitizer3);\n\n      sanitizers.unregister('test', sanitizer2);\n      test.array(\n        sanitizers[sRules].test\n      ).hasLength(2).is([{\n        callback: sanitizer3,\n        weight: 0\n      }, {\n        callback: sanitizer1,\n        weight: 10\n      }]);\n\n    });\n\n    it('shouldUnregisterSpecifiedCallbackDuplicates', function () {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer1 = function () {},\n          sanitizer2 = function () {},\n          sanitizer3 = function () {};\n\n      sanitizers.register('test', sanitizer1, 10)\n        .register('test', sanitizer2, -10)\n        .register('test', sanitizer3)\n        .register('test', sanitizer2, 90);\n\n      sanitizers.unregister('test', sanitizer2);\n      test.array(\n        sanitizers[sRules].test\n      ).hasLength(2).is([{\n        callback: sanitizer3,\n        weight: 0\n      }, {\n        callback: sanitizer1,\n        weight: 10\n      }]);\n\n    });\n\n  });\n\n  describe('Sanitizers.sanitize()', function () {\n\n    it('shouldThrowAnErrorIfSanitizerDoesntExist', function (done) {\n\n      var sanitizers = new Sanitizers();\n\n      sanitizers.sanitize(function (err, orig, value) {\n\n        test.object(\n          err\n        ).isInstanceOf(EUnknownSanitizer);\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldExecuteCorrectSanitizers', function (done) {\n\n      var sanitizers = new Sanitizers(),\n          s1 = false, s2 = false, s3 = false,\n          sanitizer1 = function (orig, value, options, next) {\n            s1 = true;\n            next(null, value);\n          },\n          sanitizer2 = function (orig, value, options, next) {\n            s2 = true;\n            next(null, value);\n          },\n          sanitizer3 = function (orig, value, options, next) {\n            s3 = true;\n            next(null, value);\n          };\n\n      sanitizers.register('test', sanitizer1)\n        .register('test2', sanitizer2)\n        .register('test', sanitizer3);\n\n      sanitizers.sanitize(function (err, orig, value) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.bool(\n          s1\n        ).isTrue();\n\n        test.bool(\n          s2\n        ).isNotTrue();\n\n        test.bool(\n          s3\n        ).isTrue();\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldMarkAsInvalidIfAnErrorIsSubmitted', function (done) {\n\n      var sanitizers = new Sanitizers(),\n          s1 = false, s2 = false, s3 = false,\n          sanitizer1 = function (orig, value, options, next) {\n            s1 = true;\n            next(null, value);\n          },\n          sanitizer2 = function (orig, value, options, next) {\n            s2 = true;\n            next(new Error(), value);\n          },\n          sanitizer3 = function (orig, value, options, next) {\n            s3 = true;\n            next(null, value);\n          };\n\n      sanitizers.register('test', sanitizer1)\n        .register('test', sanitizer2)\n        .register('test', sanitizer3);\n\n      sanitizers.sanitize(function (err, orig, value) {\n\n        test.object(\n          err\n        ).isInstanceOf(Error);\n\n        test.bool(\n          s1\n        ).isTrue();\n\n        test.bool(\n          s2\n        ).isTrue();\n\n        test.bool(\n          s3\n        ).isNotTrue();\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldCaptureExceptionsAndFail', function (done) {\n\n      var sanitizers = new Sanitizers(),\n          s1 = false, s2 = false, s3 = false,\n          sanitizer1 = function (orig, value, options, next) {\n            s1 = true;\n            next(null, value);\n          },\n          sanitizer2 = function (orig, value, options, next) {\n            throw new Error();\n          },\n          sanitizer3 = function (orig, value, options, next) {\n            s3 = true;\n            next(null, value);\n          };\n\n      sanitizers.register('test', sanitizer1)\n        .register('test', sanitizer2)\n        .register('test', sanitizer3);\n\n      sanitizers.sanitize(function (err, orig, value) {\n\n        test.object(\n          err\n        ).isInstanceOf(Error);\n\n        test.bool(\n          s1\n        ).isTrue();\n\n        test.bool(\n          s2\n        ).isNotTrue();\n\n        test.bool(\n          s3\n        ).isNotTrue();\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldSanitizeValue', function (done) {\n\n      var sanitizers = new Sanitizers(),\n          sanitizer1 = function (orig, value, options, next) {\n            next(null, value.trim());\n          },\n          sanitizer2 = function (orig, value, options, next) {\n            next(null, value.toLowerCase());\n          },\n          sanitizer3 = function (orig, value, options, next) {\n            next(null, value.replace(' ', '-'));\n          };\n\n      sanitizers.register('test', sanitizer1)\n        .register('test', sanitizer2)\n        .register('test', sanitizer3);\n\n      sanitizers.sanitize(function (err, orig, value) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.string(\n          orig\n        ).is('  HELLO WORLD  ');\n\n        test.string(\n          value\n        ).is('hello-world');\n\n        done();\n\n      }, 'test', '  HELLO WORLD  ');\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe212",
    "testId": 212,
    "memberof": "tests/Sanitizers/Sanitizers.test.js",
    "testDepth": 0,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212",
    "access": null,
    "description": "entity-ci/entity-ci-core/Sanitizers",
    "lineNumber": 22
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe213",
    "testId": 213,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213",
    "access": null,
    "description": "Sanitizers.register()",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it214",
    "testId": 214,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213.it214",
    "access": null,
    "description": "shouldBeAbleToRegisterNewSanitizer",
    "lineNumber": 28
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it215",
    "testId": 215,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213.it215",
    "access": null,
    "description": "shouldBeAbleToRegisterMultipleCallbacks",
    "lineNumber": 44
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it216",
    "testId": 216,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe213.it216",
    "access": null,
    "description": "multipleCallbacksShouldBeSortedByWeight",
    "lineNumber": 71
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe217",
    "testId": 217,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217",
    "access": null,
    "description": "Sanitizers.registered()",
    "lineNumber": 99
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it218",
    "testId": 218,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217.it218",
    "access": null,
    "description": "shouldReturnFalseIfTheSanitizerHasntBeenRegistered",
    "lineNumber": 101
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it219",
    "testId": 219,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217.it219",
    "access": null,
    "description": "shouldReturnFalseIfTheSanitizerHasBeenRegisteredButEmpty",
    "lineNumber": 111
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it220",
    "testId": 220,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe217.it220",
    "access": null,
    "description": "shouldReturnTrueIfSanitizerHasBeenRegistered",
    "lineNumber": 121
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe221",
    "testId": 221,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221",
    "access": null,
    "description": "Sanitizers.unregister()",
    "lineNumber": 136
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it222",
    "testId": 222,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221.it222",
    "access": null,
    "description": "shouldThrowAnErrorIfSanitizerDoesntExist",
    "lineNumber": 138
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it223",
    "testId": 223,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221.it223",
    "access": null,
    "description": "shouldUnregisterAllSanitizers",
    "lineNumber": 148
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it224",
    "testId": 224,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221.it224",
    "access": null,
    "description": "shouldUnregisterSpecifiedCallback",
    "lineNumber": 167
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it225",
    "testId": 225,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe221.it225",
    "access": null,
    "description": "shouldUnregisterSpecifiedCallbackDuplicates",
    "lineNumber": 192
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe226",
    "testId": 226,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212",
    "testDepth": 1,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226",
    "access": null,
    "description": "Sanitizers.sanitize()",
    "lineNumber": 219
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it227",
    "testId": 227,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226.it227",
    "access": null,
    "description": "shouldThrowAnErrorIfSanitizerDoesntExist",
    "lineNumber": 221
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it228",
    "testId": 228,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226.it228",
    "access": null,
    "description": "shouldExecuteCorrectSanitizers",
    "lineNumber": 237
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it229",
    "testId": 229,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226.it229",
    "access": null,
    "description": "shouldMarkAsInvalidIfAnErrorIsSubmitted",
    "lineNumber": 282
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it230",
    "testId": 230,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226.it230",
    "access": null,
    "description": "shouldCaptureExceptionsAndFail",
    "lineNumber": 327
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it231",
    "testId": 231,
    "memberof": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226",
    "testDepth": 2,
    "longname": "tests/Sanitizers/Sanitizers.test.js~describe212.describe226.it231",
    "access": null,
    "description": "shouldSanitizeValue",
    "lineNumber": 371
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Utils/Config.test.js",
    "memberof": null,
    "longname": "tests/Utils/Config.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar path = require('path'),\n    fs = require('fs'),\n    os = require('os'),\n    test = require('unit.js'),\n    loader = require('nsloader'),\n    Config = loader('EntityCI/Utils/Config');\n\ndescribe('entity-ci/entity-ci-core/Utils/Config', function () {\n\n  'use strict';\n\n  var tmpPath = path.join(\n        os.tmpdir(), 'entityci-tests--config--' + process.pid\n      );\n\n  describe('Config.has()', function () {\n\n    it('hasShouldReturnFalseIfPropertyDoesntExist', function () {\n\n      var config = new Config();\n\n      test.bool(\n        config.has('test')\n      ).isNotTrue();\n\n    });\n\n    it('hasShouldFindTheFirstLevelPropertyOfSingleLevel', function () {\n\n      var config = new Config();\n      config.data.test = 'hello';\n\n      test.bool(\n        config.has('test')\n      ).isTrue();\n\n    });\n\n    it('hasShouldFindTheFirstLevelPropertyOfMultiLevel', function () {\n\n      var config = new Config();\n      config.data.test = {value: 'hello'};\n\n      test.bool(\n        config.has('test')\n      ).isTrue();\n\n    });\n\n    it('hasShouldFindTheSecondLevelPropertyOfMultiLevel', function () {\n\n      var config = new Config();\n      config.data.test = {value: 'hello'};\n\n      test.bool(\n        config.has('test.value')\n      ).isTrue();\n\n    });\n\n  });\n\n  describe('Config.get()', function () {\n\n    it('getWillReturnNullIfItDoesntExist', function () {\n\n      var config = new Config();\n\n      test.value(\n        config.get('test')\n      ).isNull();\n\n    });\n\n    it('getWillReturnTheDefaultValueIfItDoesntExist', function () {\n\n      var config = new Config();\n\n      test.bool(\n        config.get('test', false)\n      ).isNotTrue();\n\n    });\n\n    it('getTheFirstLevelPropertyOfSingleLevel', function () {\n\n      var config = new Config();\n      config.data.test = 'value';\n\n      test.string(\n        config.get('test')\n      ).is('value');\n\n    });\n\n    it('getTheFirstLevelPropertyOfMultiLevel', function () {\n\n      var config = new Config();\n      config.data.test = {value: 'hello'};\n\n      test.object(\n        config.get('test')\n      ).is({value: 'hello'});\n\n    });\n\n    it('getTheSecondLevelPropertyOfMultiLevel', function () {\n\n      var config = new Config();\n      config.data.test = {value: 'hello'};\n\n      test.string(\n        config.get('test.value')\n      ).is('hello');\n\n    });\n\n  });\n\n  describe('Config.set()', function () {\n\n    it('setValue', function () {\n\n      var config = new Config();\n\n      config.set('test', 'hello');\n      test.object(\n        config.data\n      ).is({\n        test: 'hello'\n      });\n\n    });\n\n    it('setMultiLevelValue', function () {\n\n      var config = new Config();\n\n      config.set('test.value', 'hello');\n      test.object(\n        config.data\n      ).is({\n        test: {\n          value: 'hello'\n        }\n      });\n\n    });\n\n  });\n\n  describe('Config.del()', function () {\n\n    it('delValue', function () {\n\n      var config = new Config();\n      config.data.test = 'hello';\n\n      config.del('test');\n      test.object(\n        config.data\n      ).is({});\n\n    });\n\n    it('delAMultiValue', function () {\n\n      var config = new Config();\n      config.data.test = {value: 'hello'};\n\n      config.del('test');\n      test.object(\n        config.data\n      ).is({});\n\n    });\n\n    it('delAMultiValueValue', function () {\n\n      var config = new Config();\n      config.data.test = {value: 'hello'};\n\n      config.del('test.value');\n      test.object(\n        config.data\n      ).is({\n        test: {}\n      });\n\n    });\n\n  });\n\n  describe('Config.save()', function () {\n\n    beforeEach(function () {\n\n      fs.mkdirSync(tmpPath);\n\n    });\n\n    afterEach(function () {\n\n      if (fs.existsSync(path.join(tmpPath, 'config.json'))) {\n        fs.unlinkSync(path.join(tmpPath, 'config.json'));\n      }\n\n      fs.rmdirSync(path.join(tmpPath));\n\n    });\n\n    it('savesAnEmptyConfigFile', function (done) {\n\n      var config = new Config(path.join(tmpPath, 'config.json'));\n\n      config.save(function (err) {\n\n        test.value(err).isNull();\n        test.bool(\n          fs.existsSync(config.filename)\n        ).isTrue();\n\n        done();\n\n      });\n\n    });\n\n    it('savesPopulatedConfig', function (done) {\n\n      var config = new Config(path.join(tmpPath, 'config.json'));\n      config.data.test = {value: 'hello'};\n\n      config.save(function (err) {\n\n        test.value(err).isNull();\n\n        test.object(\n          JSON.parse(\n            fs.readFileSync(config.filename)\n          )\n        ).is(config.data);\n\n        done();\n\n      });\n\n    });\n\n    it('throwsAnErrorIfUnableToSave', function (done) {\n\n      var config = new Config(path.join('/etc', 'config.json'));\n\n      config.save(function (err) {\n\n        test.value(\n          err\n        ).isInstanceOf(Error);\n\n        done();\n\n      });\n\n    });\n\n  });\n\n  describe('Config.load()', function () {\n\n    beforeEach(function () {\n\n      fs.mkdirSync(tmpPath);\n      fs.writeFileSync(path.join(tmpPath, 'config.json'), JSON.stringify({\n        test: {value: 'hello'}\n      }));\n\n    });\n\n    afterEach(function () {\n\n      fs.unlinkSync(path.join(tmpPath, 'config.json'));\n      fs.rmdirSync(path.join(tmpPath));\n\n    });\n\n    it('errorIsThrownIfTheConfigDoesntExist', function (done) {\n\n      var config = new Config(path.join(tmpPath, 'config2.json'));\n\n      config.load(function (err) {\n\n        test.error(\n          err\n        ).isInstanceOf(Error);\n\n        done();\n\n      });\n\n    });\n\n    it('loadFromConfigFile', function (done) {\n\n      var config = new Config(path.join(tmpPath, 'config.json'));\n\n      config.load(function (err) {\n\n        test.value(err).isNull();\n\n        test.object(\n          config.data\n        ).is({\n          test: {value: 'hello'}\n        });\n\n        done();\n\n      });\n\n    });\n\n    it('loadFromConfigFileResetsExistingConfig', function (done) {\n\n      var config = new Config(path.join(tmpPath, 'config.json'));\n      config.data.hello = 'world';\n\n      config.load(function (err) {\n\n        test.value(err).isNull();\n        test.object(\n          config.data\n        ).is({\n          test: {value: 'hello'}\n        });\n\n        done();\n\n      });\n\n    });\n\n    it('throwsAnErrorIfTheConfigFileIsNotValidJSON', function (done) {\n\n      fs.writeFileSync(path.join(tmpPath, 'config.json'), 'test');\n\n      var config = new Config(path.join(tmpPath, 'config.json'));\n\n      config.load(function (err) {\n\n        test.value(\n          err\n        ).isInstanceOf(Error);\n\n        done();\n\n      });\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe232",
    "testId": 232,
    "memberof": "tests/Utils/Config.test.js",
    "testDepth": 0,
    "longname": "tests/Utils/Config.test.js~describe232",
    "access": null,
    "description": "entity-ci/entity-ci-core/Utils/Config",
    "lineNumber": 22
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe233",
    "testId": 233,
    "memberof": "tests/Utils/Config.test.js~describe232",
    "testDepth": 1,
    "longname": "tests/Utils/Config.test.js~describe232.describe233",
    "access": null,
    "description": "Config.has()",
    "lineNumber": 30
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it234",
    "testId": 234,
    "memberof": "tests/Utils/Config.test.js~describe232.describe233",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe233.it234",
    "access": null,
    "description": "hasShouldReturnFalseIfPropertyDoesntExist",
    "lineNumber": 32
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it235",
    "testId": 235,
    "memberof": "tests/Utils/Config.test.js~describe232.describe233",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe233.it235",
    "access": null,
    "description": "hasShouldFindTheFirstLevelPropertyOfSingleLevel",
    "lineNumber": 42
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it236",
    "testId": 236,
    "memberof": "tests/Utils/Config.test.js~describe232.describe233",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe233.it236",
    "access": null,
    "description": "hasShouldFindTheFirstLevelPropertyOfMultiLevel",
    "lineNumber": 53
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it237",
    "testId": 237,
    "memberof": "tests/Utils/Config.test.js~describe232.describe233",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe233.it237",
    "access": null,
    "description": "hasShouldFindTheSecondLevelPropertyOfMultiLevel",
    "lineNumber": 64
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe238",
    "testId": 238,
    "memberof": "tests/Utils/Config.test.js~describe232",
    "testDepth": 1,
    "longname": "tests/Utils/Config.test.js~describe232.describe238",
    "access": null,
    "description": "Config.get()",
    "lineNumber": 77
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it239",
    "testId": 239,
    "memberof": "tests/Utils/Config.test.js~describe232.describe238",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe238.it239",
    "access": null,
    "description": "getWillReturnNullIfItDoesntExist",
    "lineNumber": 79
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it240",
    "testId": 240,
    "memberof": "tests/Utils/Config.test.js~describe232.describe238",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe238.it240",
    "access": null,
    "description": "getWillReturnTheDefaultValueIfItDoesntExist",
    "lineNumber": 89
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it241",
    "testId": 241,
    "memberof": "tests/Utils/Config.test.js~describe232.describe238",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe238.it241",
    "access": null,
    "description": "getTheFirstLevelPropertyOfSingleLevel",
    "lineNumber": 99
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it242",
    "testId": 242,
    "memberof": "tests/Utils/Config.test.js~describe232.describe238",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe238.it242",
    "access": null,
    "description": "getTheFirstLevelPropertyOfMultiLevel",
    "lineNumber": 110
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it243",
    "testId": 243,
    "memberof": "tests/Utils/Config.test.js~describe232.describe238",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe238.it243",
    "access": null,
    "description": "getTheSecondLevelPropertyOfMultiLevel",
    "lineNumber": 121
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe244",
    "testId": 244,
    "memberof": "tests/Utils/Config.test.js~describe232",
    "testDepth": 1,
    "longname": "tests/Utils/Config.test.js~describe232.describe244",
    "access": null,
    "description": "Config.set()",
    "lineNumber": 134
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it245",
    "testId": 245,
    "memberof": "tests/Utils/Config.test.js~describe232.describe244",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe244.it245",
    "access": null,
    "description": "setValue",
    "lineNumber": 136
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it246",
    "testId": 246,
    "memberof": "tests/Utils/Config.test.js~describe232.describe244",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe244.it246",
    "access": null,
    "description": "setMultiLevelValue",
    "lineNumber": 149
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe247",
    "testId": 247,
    "memberof": "tests/Utils/Config.test.js~describe232",
    "testDepth": 1,
    "longname": "tests/Utils/Config.test.js~describe232.describe247",
    "access": null,
    "description": "Config.del()",
    "lineNumber": 166
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it248",
    "testId": 248,
    "memberof": "tests/Utils/Config.test.js~describe232.describe247",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe247.it248",
    "access": null,
    "description": "delValue",
    "lineNumber": 168
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it249",
    "testId": 249,
    "memberof": "tests/Utils/Config.test.js~describe232.describe247",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe247.it249",
    "access": null,
    "description": "delAMultiValue",
    "lineNumber": 180
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it250",
    "testId": 250,
    "memberof": "tests/Utils/Config.test.js~describe232.describe247",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe247.it250",
    "access": null,
    "description": "delAMultiValueValue",
    "lineNumber": 192
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe251",
    "testId": 251,
    "memberof": "tests/Utils/Config.test.js~describe232",
    "testDepth": 1,
    "longname": "tests/Utils/Config.test.js~describe232.describe251",
    "access": null,
    "description": "Config.save()",
    "lineNumber": 208
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it252",
    "testId": 252,
    "memberof": "tests/Utils/Config.test.js~describe232.describe251",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe251.it252",
    "access": null,
    "description": "savesAnEmptyConfigFile",
    "lineNumber": 226
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it253",
    "testId": 253,
    "memberof": "tests/Utils/Config.test.js~describe232.describe251",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe251.it253",
    "access": null,
    "description": "savesPopulatedConfig",
    "lineNumber": 243
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it254",
    "testId": 254,
    "memberof": "tests/Utils/Config.test.js~describe232.describe251",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe251.it254",
    "access": null,
    "description": "throwsAnErrorIfUnableToSave",
    "lineNumber": 264
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe255",
    "testId": 255,
    "memberof": "tests/Utils/Config.test.js~describe232",
    "testDepth": 1,
    "longname": "tests/Utils/Config.test.js~describe232.describe255",
    "access": null,
    "description": "Config.load()",
    "lineNumber": 282
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it256",
    "testId": 256,
    "memberof": "tests/Utils/Config.test.js~describe232.describe255",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe255.it256",
    "access": null,
    "description": "errorIsThrownIfTheConfigDoesntExist",
    "lineNumber": 300
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it257",
    "testId": 257,
    "memberof": "tests/Utils/Config.test.js~describe232.describe255",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe255.it257",
    "access": null,
    "description": "loadFromConfigFile",
    "lineNumber": 316
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it258",
    "testId": 258,
    "memberof": "tests/Utils/Config.test.js~describe232.describe255",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe255.it258",
    "access": null,
    "description": "loadFromConfigFileResetsExistingConfig",
    "lineNumber": 336
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it259",
    "testId": 259,
    "memberof": "tests/Utils/Config.test.js~describe232.describe255",
    "testDepth": 2,
    "longname": "tests/Utils/Config.test.js~describe232.describe255.it259",
    "access": null,
    "description": "throwsAnErrorIfTheConfigFileIsNotValidJSON",
    "lineNumber": 356
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Utils/Data.test.js",
    "memberof": null,
    "longname": "tests/Utils/Data.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Data = loader('EntityCI/Utils/Data');\n\ndescribe('entity-ci/entity-ci-core/Utils/Data', function () {\n\n  'use strict';\n\n  describe('Data.has()', function () {\n\n    it('hasShouldReturnFalseIfPropertyDoesntExist', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      test.bool(\n        data.has('test')\n      ).isNotTrue();\n\n    });\n\n    it('hasShouldFindTheFirstLevelPropertyOfSingleLevel', function () {\n\n      var config = {'test': 'hello'},\n          data = new Data(config);\n\n      test.bool(\n        data.has('test')\n      ).isTrue();\n\n    });\n\n    it('hasShouldFindTheFirstLevelPropertyOfMultiLevel', function () {\n\n      var config = {'test': {'value': 'hello'}},\n          data = new Data(config);\n\n      test.bool(\n        data.has('test')\n      ).isTrue();\n\n    });\n\n    it('hasShouldFindTheSecondLevelPropertyOfMultiLevel', function () {\n\n      var config = {'test': {'value': 'hello'}},\n          data =new Data(config);\n\n      test.bool(\n        data.has('test.value')\n      ).isTrue();\n\n    });\n\n    it('hasShouldntFindDeepProperty', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      test.bool(\n        data.has('test.hello.world.foo')\n      ).isNotTrue();\n\n    });\n\n    it('hasShouldFindDeepProperty', function () {\n\n      var config = {test: {hello: {world: {foo: 'bar'}}}},\n          data = new Data(config);\n\n      test.bool(\n        data.has('test.hello.world.foo')\n      ).isTrue();\n\n    });\n\n  });\n\n  describe('Data.get()', function () {\n\n    it('getWillReturnNullIfItDoesntExist', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      test.value(\n        data.get('test')\n      ).isNull();\n\n    });\n\n    it('getWillReturnTheDefaultValueIfItDoesntExist', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      test.bool(\n        data.get('test', true)\n      ).isTrue();\n\n    });\n\n    it('getTheFirstLevelPropertyOfSingleLevel', function () {\n\n      var config = {'test': 'value'},\n          data = new Data(config);\n\n      test.string(\n        data.get('test')\n      ).is('value');\n\n    });\n\n    it('getTheFirstLevelPropertyOfMultiLevel', function () {\n\n      var config = {'test': {'value': 'hello'}},\n          data = new Data(config);\n\n      test.object(\n        data.get('test')\n      ).is({'value': 'hello'});\n\n    });\n\n    it('getTheSecondLevelPropertyOfMultiLevel', function () {\n\n      var config = {'test': {'value': 'hello'}},\n          data = new Data(config);\n\n      test.string(\n        data.get('test.value')\n      ).is('hello');\n\n    });\n\n    it('getUnknownDeepLevelValue', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      test.value(\n        data.get('test.hello.world.foo')\n      ).isNull();\n\n    });\n\n    it('getUnknownDeepLevelValue', function () {\n\n      var config = {test: {hello: {world: {foo: 'bar'}}}},\n          data = new Data(config);\n\n      test.string(\n        data.get('test.hello.world.foo')\n      ).is('bar');\n\n    });\n\n  });\n\n  describe('Data.set()', function () {\n\n    it('setValue', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      data.set('test', 'hello');\n      test.object(\n        config\n      ).is({\n        'test': 'hello'\n      });\n\n    });\n\n    it('setValueChaining', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      data\n        .set('test', 'hello')\n        .set('test2', 'world');\n\n      test.object(\n        config\n      ).is({\n        'test': 'hello',\n        'test2': 'world'\n      });\n\n    });\n\n    it('setMultiLevelValue', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      data.set('test.value', 'hello');\n      test.object(\n        config\n      ).is({\n        'test': {\n          'value': 'hello'\n        }\n      });\n\n    });\n\n    it('setDeepLevelLevelValue', function () {\n\n      var config = {},\n          data = new Data(config);\n\n      data.set('test.hello.world.foo', 'bar');\n      test.object(\n        config\n      ).is({\n        'test': {\n          'hello': {\n            'world': {\n              'foo': 'bar'\n            }\n          }\n        }\n      });\n\n    });\n\n  });\n\n  describe('Data.del()', function () {\n\n    it('delValue', function () {\n\n      var config = {'test': 'hello'},\n          data = new Data(config);\n\n      data.del('test');\n      test.object(\n        config\n      ).is({});\n\n    });\n\n    it('delValueChaining', function () {\n\n      var config = {'test': 'hello', 'test2': 'world'},\n          data = new Data(config);\n\n      data\n        .del('test')\n        .del('test2');\n\n      test.object(\n        config\n      ).is({});\n\n    });\n\n    it('delMultiValue', function () {\n\n      var config = {'test': {'value': 'hello'}},\n          data = new Data(config);\n\n      data.del('test');\n      test.object(\n        config\n      ).is({});\n\n    });\n\n    it('delMultiValueValue', function () {\n\n      var config = {'test': {'value': 'hello'}},\n          data = new Data(config);\n\n      data.del('test.value');\n      test.object(\n        config\n      ).is({\n        'test': {}\n      });\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe260",
    "testId": 260,
    "memberof": "tests/Utils/Data.test.js",
    "testDepth": 0,
    "longname": "tests/Utils/Data.test.js~describe260",
    "access": null,
    "description": "entity-ci/entity-ci-core/Utils/Data",
    "lineNumber": 19
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe261",
    "testId": 261,
    "memberof": "tests/Utils/Data.test.js~describe260",
    "testDepth": 1,
    "longname": "tests/Utils/Data.test.js~describe260.describe261",
    "access": null,
    "description": "Data.has()",
    "lineNumber": 23
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it262",
    "testId": 262,
    "memberof": "tests/Utils/Data.test.js~describe260.describe261",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe261.it262",
    "access": null,
    "description": "hasShouldReturnFalseIfPropertyDoesntExist",
    "lineNumber": 25
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it263",
    "testId": 263,
    "memberof": "tests/Utils/Data.test.js~describe260.describe261",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe261.it263",
    "access": null,
    "description": "hasShouldFindTheFirstLevelPropertyOfSingleLevel",
    "lineNumber": 36
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it264",
    "testId": 264,
    "memberof": "tests/Utils/Data.test.js~describe260.describe261",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe261.it264",
    "access": null,
    "description": "hasShouldFindTheFirstLevelPropertyOfMultiLevel",
    "lineNumber": 47
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it265",
    "testId": 265,
    "memberof": "tests/Utils/Data.test.js~describe260.describe261",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe261.it265",
    "access": null,
    "description": "hasShouldFindTheSecondLevelPropertyOfMultiLevel",
    "lineNumber": 58
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it266",
    "testId": 266,
    "memberof": "tests/Utils/Data.test.js~describe260.describe261",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe261.it266",
    "access": null,
    "description": "hasShouldntFindDeepProperty",
    "lineNumber": 69
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it267",
    "testId": 267,
    "memberof": "tests/Utils/Data.test.js~describe260.describe261",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe261.it267",
    "access": null,
    "description": "hasShouldFindDeepProperty",
    "lineNumber": 80
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe268",
    "testId": 268,
    "memberof": "tests/Utils/Data.test.js~describe260",
    "testDepth": 1,
    "longname": "tests/Utils/Data.test.js~describe260.describe268",
    "access": null,
    "description": "Data.get()",
    "lineNumber": 93
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it269",
    "testId": 269,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it269",
    "access": null,
    "description": "getWillReturnNullIfItDoesntExist",
    "lineNumber": 95
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it270",
    "testId": 270,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it270",
    "access": null,
    "description": "getWillReturnTheDefaultValueIfItDoesntExist",
    "lineNumber": 106
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it271",
    "testId": 271,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it271",
    "access": null,
    "description": "getTheFirstLevelPropertyOfSingleLevel",
    "lineNumber": 117
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it272",
    "testId": 272,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it272",
    "access": null,
    "description": "getTheFirstLevelPropertyOfMultiLevel",
    "lineNumber": 128
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it273",
    "testId": 273,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it273",
    "access": null,
    "description": "getTheSecondLevelPropertyOfMultiLevel",
    "lineNumber": 139
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it274",
    "testId": 274,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it274",
    "access": null,
    "description": "getUnknownDeepLevelValue",
    "lineNumber": 150
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it275",
    "testId": 275,
    "memberof": "tests/Utils/Data.test.js~describe260.describe268",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe268.it275",
    "access": null,
    "description": "getUnknownDeepLevelValue",
    "lineNumber": 161
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe276",
    "testId": 276,
    "memberof": "tests/Utils/Data.test.js~describe260",
    "testDepth": 1,
    "longname": "tests/Utils/Data.test.js~describe260.describe276",
    "access": null,
    "description": "Data.set()",
    "lineNumber": 174
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it277",
    "testId": 277,
    "memberof": "tests/Utils/Data.test.js~describe260.describe276",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe276.it277",
    "access": null,
    "description": "setValue",
    "lineNumber": 176
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it278",
    "testId": 278,
    "memberof": "tests/Utils/Data.test.js~describe260.describe276",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe276.it278",
    "access": null,
    "description": "setValueChaining",
    "lineNumber": 190
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it279",
    "testId": 279,
    "memberof": "tests/Utils/Data.test.js~describe260.describe276",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe276.it279",
    "access": null,
    "description": "setMultiLevelValue",
    "lineNumber": 208
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it280",
    "testId": 280,
    "memberof": "tests/Utils/Data.test.js~describe260.describe276",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe276.it280",
    "access": null,
    "description": "setDeepLevelLevelValue",
    "lineNumber": 224
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe281",
    "testId": 281,
    "memberof": "tests/Utils/Data.test.js~describe260",
    "testDepth": 1,
    "longname": "tests/Utils/Data.test.js~describe260.describe281",
    "access": null,
    "description": "Data.del()",
    "lineNumber": 246
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it282",
    "testId": 282,
    "memberof": "tests/Utils/Data.test.js~describe260.describe281",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe281.it282",
    "access": null,
    "description": "delValue",
    "lineNumber": 248
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it283",
    "testId": 283,
    "memberof": "tests/Utils/Data.test.js~describe260.describe281",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe281.it283",
    "access": null,
    "description": "delValueChaining",
    "lineNumber": 260
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it284",
    "testId": 284,
    "memberof": "tests/Utils/Data.test.js~describe260.describe281",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe281.it284",
    "access": null,
    "description": "delMultiValue",
    "lineNumber": 275
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it285",
    "testId": 285,
    "memberof": "tests/Utils/Data.test.js~describe260.describe281",
    "testDepth": 2,
    "longname": "tests/Utils/Data.test.js~describe260.describe281.it285",
    "access": null,
    "description": "delMultiValueValue",
    "lineNumber": 287
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Utils/SortBy.test.js",
    "memberof": null,
    "longname": "tests/Utils/SortBy.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    sortBy = loader('EntityCI/Utils/SortBy');\n\ndescribe('entity-ci/entity-ci-core/Utils/SortBy', function () {\n\n  'use strict';\n\n  describe('SortBy([Array])', function () {\n\n    it('shouldSortByWeight', function () {\n\n      var data = [{\n            text: 'world',\n            weight: 1\n          }, {\n            text: 'hello'\n          }];\n\n      sortBy(data, 'weight');\n      test.array(data).is([{\n        text: 'hello'\n      }, {\n        text: 'world',\n        weight: 1\n      }]);\n\n    });\n\n    it('shouldSortUsingWeightFunction', function () {\n\n      var weightFnc = function () {\n            return 1;\n          },\n          data = [{\n            text: 'world',\n            weight: weightFnc\n          }, {\n            text: 'hello'\n          }];\n\n      sortBy(data, 'weight');\n      test.array(data).is([{\n        text: 'hello'\n      }, {\n        text: 'world',\n        weight: weightFnc\n      }]);\n\n    });\n\n    it('shouldSortInReverese', function () {\n\n      var data = [{\n            text: 'world'\n          }, {\n            text: 'hello',\n            weight: 1\n          }];\n\n      sortBy(data, 'weight', true);\n      test.array(data).is([{\n        text: 'hello',\n        weight: 1\n      }, {\n        text: 'world'\n      }]);\n\n    });\n\n  });\n\n  describe('SortBy([Object])', function () {\n\n    it('shouldSortByWeight', function () {\n\n      var data = {\n            world: 'world',\n            hello: {weight: -1}\n          };\n\n      sortBy(data, 'weight');\n      test.object(data).is({\n        hello: {weight: -1},\n        world: 'world'\n      });\n\n    });\n\n    it('shouldSortIgnoresFunctions', function () {\n\n      var fnc = function () {},\n          data = {\n            world: 'world',\n            hello: {weight: -1},\n            foo: 'bar',\n            func: fnc\n          };\n\n      sortBy(data, 'weight');\n      test.object(data).is({\n        func: fnc,\n        hello: {weight: -1},\n        world: 'world',\n        foo: 'bar'\n      });\n\n    });\n\n    it('shouldSortUsingWeightFunction', function () {\n\n      var weightFnc = function () {\n            return -1;\n          },\n          data = {\n            world: 'world',\n            hello: {weight: weightFnc}\n          };\n\n      sortBy(data, 'weight');\n      test.object(data).is({\n        hello: {weight: weightFnc},\n        world: 'world'\n      });\n\n    });\n\n    it('shouldSortInReverese', function () {\n\n      var data = {\n            hello: {weight: -1},\n            world: 'world'\n          };\n\n      sortBy(data, 'weight', true);\n      test.object(data).is({\n        world: 'world',\n        hello: {weight: -1}\n      });\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe286",
    "testId": 286,
    "memberof": "tests/Utils/SortBy.test.js",
    "testDepth": 0,
    "longname": "tests/Utils/SortBy.test.js~describe286",
    "access": null,
    "description": "entity-ci/entity-ci-core/Utils/SortBy",
    "lineNumber": 19
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe287",
    "testId": 287,
    "memberof": "tests/Utils/SortBy.test.js~describe286",
    "testDepth": 1,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe287",
    "access": null,
    "description": "SortBy([Array])",
    "lineNumber": 23
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it288",
    "testId": 288,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe287",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe287.it288",
    "access": null,
    "description": "shouldSortByWeight",
    "lineNumber": 25
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it289",
    "testId": 289,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe287",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe287.it289",
    "access": null,
    "description": "shouldSortUsingWeightFunction",
    "lineNumber": 44
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it290",
    "testId": 290,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe287",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe287.it290",
    "access": null,
    "description": "shouldSortInReverese",
    "lineNumber": 66
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe291",
    "testId": 291,
    "memberof": "tests/Utils/SortBy.test.js~describe286",
    "testDepth": 1,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe291",
    "access": null,
    "description": "SortBy([Object])",
    "lineNumber": 87
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it292",
    "testId": 292,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe291",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe291.it292",
    "access": null,
    "description": "shouldSortByWeight",
    "lineNumber": 89
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it293",
    "testId": 293,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe291",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe291.it293",
    "access": null,
    "description": "shouldSortIgnoresFunctions",
    "lineNumber": 104
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it294",
    "testId": 294,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe291",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe291.it294",
    "access": null,
    "description": "shouldSortUsingWeightFunction",
    "lineNumber": 124
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it295",
    "testId": 295,
    "memberof": "tests/Utils/SortBy.test.js~describe286.describe291",
    "testDepth": 2,
    "longname": "tests/Utils/SortBy.test.js~describe286.describe291.it295",
    "access": null,
    "description": "shouldSortInReverese",
    "lineNumber": 142
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Validators/Rules/Email.test.js",
    "memberof": null,
    "longname": "tests/Validators/Rules/Email.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Validators = loader('EntityCI/Validators'),\n    EInvalidEmail = loader('EntityCI/Validators/Errors/EInvalidEmail');\n\ndescribe('entity-ci/entity-ci-core/Validators/Rules/Email', function () {\n\n  'use strict';\n\n  it('validatorShouldBeAvailable', function () {\n\n      var validators = new Validators();\n\n      test.bool(\n        validators.registered('email')\n      ).isTrue();\n\n    });\n\n  it('shouldThrowAnInvalidEmail', function (done) {\n\n      var validators = new Validators();\n\n      validators.validate(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EInvalidEmail);\n\n        done();\n\n      }, 'email', 'test.com');\n\n    });\n\n  it('shouldValidateAsValid', function (done) {\n\n      var validators = new Validators();\n\n      validators.validate(function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        done();\n\n      }, 'email', 'john-doe@example.com');\n\n    });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe296",
    "testId": 296,
    "memberof": "tests/Validators/Rules/Email.test.js",
    "testDepth": 0,
    "longname": "tests/Validators/Rules/Email.test.js~describe296",
    "access": null,
    "description": "entity-ci/entity-ci-core/Validators/Rules/Email",
    "lineNumber": 20
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it297",
    "testId": 297,
    "memberof": "tests/Validators/Rules/Email.test.js~describe296",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Email.test.js~describe296.it297",
    "access": null,
    "description": "validatorShouldBeAvailable",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it298",
    "testId": 298,
    "memberof": "tests/Validators/Rules/Email.test.js~describe296",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Email.test.js~describe296.it298",
    "access": null,
    "description": "shouldThrowAnInvalidEmail",
    "lineNumber": 34
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it299",
    "testId": 299,
    "memberof": "tests/Validators/Rules/Email.test.js~describe296",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Email.test.js~describe296.it299",
    "access": null,
    "description": "shouldValidateAsValid",
    "lineNumber": 50
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Validators/Rules/MachineName.test.js",
    "memberof": null,
    "longname": "tests/Validators/Rules/MachineName.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Validators = loader('EntityCI/Validators'),\n    EInvalidLength = loader('EntityCI/Validators/Errors/EInvalidLength'),\n    EInvalidCharacters = loader(\n      'EntityCI/Validators/Errors/EInvalidCharacters'\n    );\n\ndescribe('entity-ci/entity-ci-core/Validators/Rules/MachineName', function () {\n\n  'use strict';\n\n  it('validatorShouldBeAvailable', function () {\n\n    var validators = new Validators();\n\n    test.bool(\n      validators.registered('machine-name')\n    ).isTrue();\n\n  });\n\n  it('shouldThrowAnInvalidLengthForTooFew', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidLength);\n\n      done();\n\n    }, 'machine-name', 't');\n\n  });\n\n  it('shouldThrowAnInvalidLengthForTooMany', function (done) {\n\n    var validators = new Validators(),\n        str = '';\n\n    for (var i = 0; i < 130; i++) {\n      str += 'a';\n    }\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidLength);\n\n      done();\n\n    }, 'machine-name', str);\n\n  });\n\n  it('shouldThrowAnInvalidCharacters', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidCharacters);\n\n      done();\n\n    }, 'machine-name', 'John Doe');\n\n  });\n\n  it('shouldValidateAsValid', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.value(\n        err\n      ).isNull();\n\n      done();\n\n    }, 'machine-name', 'john-doe');\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe300",
    "testId": 300,
    "memberof": "tests/Validators/Rules/MachineName.test.js",
    "testDepth": 0,
    "longname": "tests/Validators/Rules/MachineName.test.js~describe300",
    "access": null,
    "description": "entity-ci/entity-ci-core/Validators/Rules/MachineName",
    "lineNumber": 23
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it301",
    "testId": 301,
    "memberof": "tests/Validators/Rules/MachineName.test.js~describe300",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/MachineName.test.js~describe300.it301",
    "access": null,
    "description": "validatorShouldBeAvailable",
    "lineNumber": 27
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it302",
    "testId": 302,
    "memberof": "tests/Validators/Rules/MachineName.test.js~describe300",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/MachineName.test.js~describe300.it302",
    "access": null,
    "description": "shouldThrowAnInvalidLengthForTooFew",
    "lineNumber": 37
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it303",
    "testId": 303,
    "memberof": "tests/Validators/Rules/MachineName.test.js~describe300",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/MachineName.test.js~describe300.it303",
    "access": null,
    "description": "shouldThrowAnInvalidLengthForTooMany",
    "lineNumber": 53
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it304",
    "testId": 304,
    "memberof": "tests/Validators/Rules/MachineName.test.js~describe300",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/MachineName.test.js~describe300.it304",
    "access": null,
    "description": "shouldThrowAnInvalidCharacters",
    "lineNumber": 74
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it305",
    "testId": 305,
    "memberof": "tests/Validators/Rules/MachineName.test.js~describe300",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/MachineName.test.js~describe300.it305",
    "access": null,
    "description": "shouldValidateAsValid",
    "lineNumber": 90
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Validators/Rules/Password.test.js",
    "memberof": null,
    "longname": "tests/Validators/Rules/Password.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Validators = loader('EntityCI/Validators'),\n    EInvalidLength = loader('EntityCI/Validators/Errors/EInvalidLength'),\n    EInvalidCharacters = loader(\n      'EntityCI/Validators/Errors/EInvalidCharacters'\n    ),\n    EMustContainDigit = loader('EntityCI/Validators/Errors/EMustContainDigit'),\n    EMustContainLowercase = loader(\n      'EntityCI/Validators/Errors/EMustContainLowercase'\n    ),\n    EMustContainUppercase = loader(\n      'EntityCI/Validators/Errors/EMustContainUppercase'\n    );\n\ndescribe('entity-ci/entity-ci-core/Validators/Rules/Password', function () {\n\n  'use strict';\n\n  it('validatorShouldBeAvailable', function () {\n\n    var validators = new Validators();\n\n    test.bool(\n      validators.registered('password')\n    ).isTrue();\n\n  });\n\n  it('shouldThrowAnInvalidLengthErrorTooFew', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidLength);\n\n      done();\n\n    }, 'password', 'test');\n\n  });\n\n  it('shouldThrowAnInvalidLengthErrorTooMany', function (done) {\n\n    var validators = new Validators(),\n        str = '';\n\n    for (var i = 0; i < 130; i++) {\n      str += 'a';\n    }\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidLength);\n\n      done();\n\n    }, 'password', str);\n\n  });\n\n  it('shouldThrowAnNoDigitError', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EMustContainDigit);\n\n      done();\n\n    }, 'password', 'testpassword');\n\n  });\n\n  it('shouldThrowAnNoLowercaseError', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EMustContainLowercase);\n\n      done();\n\n    }, 'password', 'TESTPASSWORD1');\n\n  });\n\n  it('shouldThrowAnNoUppercaseError', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EMustContainUppercase);\n\n      done();\n\n    }, 'password', 'testpassword1');\n\n  });\n\n  it('shouldThrowAnInvalidCharactersError', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidCharacters);\n\n      done();\n\n    }, 'password', 'Test Password 1');\n\n  });\n\n  it('shouldValidateAsValid', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.value(\n        err\n      ).isNull();\n\n      done();\n\n    }, 'password', 'TestPassword1');\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe306",
    "testId": 306,
    "memberof": "tests/Validators/Rules/Password.test.js",
    "testDepth": 0,
    "longname": "tests/Validators/Rules/Password.test.js~describe306",
    "access": null,
    "description": "entity-ci/entity-ci-core/Validators/Rules/Password",
    "lineNumber": 30
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it307",
    "testId": 307,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it307",
    "access": null,
    "description": "validatorShouldBeAvailable",
    "lineNumber": 34
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it308",
    "testId": 308,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it308",
    "access": null,
    "description": "shouldThrowAnInvalidLengthErrorTooFew",
    "lineNumber": 44
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it309",
    "testId": 309,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it309",
    "access": null,
    "description": "shouldThrowAnInvalidLengthErrorTooMany",
    "lineNumber": 60
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it310",
    "testId": 310,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it310",
    "access": null,
    "description": "shouldThrowAnNoDigitError",
    "lineNumber": 81
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it311",
    "testId": 311,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it311",
    "access": null,
    "description": "shouldThrowAnNoLowercaseError",
    "lineNumber": 97
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it312",
    "testId": 312,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it312",
    "access": null,
    "description": "shouldThrowAnNoUppercaseError",
    "lineNumber": 113
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it313",
    "testId": 313,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it313",
    "access": null,
    "description": "shouldThrowAnInvalidCharactersError",
    "lineNumber": 129
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it314",
    "testId": 314,
    "memberof": "tests/Validators/Rules/Password.test.js~describe306",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Password.test.js~describe306.it314",
    "access": null,
    "description": "shouldValidateAsValid",
    "lineNumber": 145
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Validators/Rules/Url.test.js",
    "memberof": null,
    "longname": "tests/Validators/Rules/Url.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Validators = loader('EntityCI/Validators'),\n    EInvalidURL = loader('EntityCI/Validators/Errors/EInvalidURL');\n\ndescribe('entity-ci/entity-ci-core/Validators/Rules/Url', function () {\n\n  'use strict';\n\n  it('validatorShouldBeAvailable', function () {\n\n    var validators = new Validators();\n\n    test.bool(\n      validators.registered('url')\n    ).isTrue();\n\n  });\n\n  it('shouldThrowAnInvalidUrl', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidURL);\n\n      done();\n\n    }, 'url', 'test');\n\n  });\n\n  it('shouldNotValidateLocalhostAsValid', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidURL);\n\n      done();\n\n    }, 'url', 'http://localhost');\n\n  });\n\n  it('shouldNotValidateLocalIPAsValid', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.object(\n        err\n      ).isInstanceOf(EInvalidURL);\n\n      done();\n\n    }, 'url', 'http://127.0.0.1');\n\n  });\n\n  it('shouldValidateAsValid', function (done) {\n\n    var validators = new Validators();\n\n    validators.validate(function (err) {\n\n      test.value(\n        err\n      ).isNull();\n\n      done();\n\n    }, 'url', 'http://google.com');\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe315",
    "testId": 315,
    "memberof": "tests/Validators/Rules/Url.test.js",
    "testDepth": 0,
    "longname": "tests/Validators/Rules/Url.test.js~describe315",
    "access": null,
    "description": "entity-ci/entity-ci-core/Validators/Rules/Url",
    "lineNumber": 20
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it316",
    "testId": 316,
    "memberof": "tests/Validators/Rules/Url.test.js~describe315",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Url.test.js~describe315.it316",
    "access": null,
    "description": "validatorShouldBeAvailable",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it317",
    "testId": 317,
    "memberof": "tests/Validators/Rules/Url.test.js~describe315",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Url.test.js~describe315.it317",
    "access": null,
    "description": "shouldThrowAnInvalidUrl",
    "lineNumber": 34
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it318",
    "testId": 318,
    "memberof": "tests/Validators/Rules/Url.test.js~describe315",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Url.test.js~describe315.it318",
    "access": null,
    "description": "shouldNotValidateLocalhostAsValid",
    "lineNumber": 50
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it319",
    "testId": 319,
    "memberof": "tests/Validators/Rules/Url.test.js~describe315",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Url.test.js~describe315.it319",
    "access": null,
    "description": "shouldNotValidateLocalIPAsValid",
    "lineNumber": 66
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it320",
    "testId": 320,
    "memberof": "tests/Validators/Rules/Url.test.js~describe315",
    "testDepth": 1,
    "longname": "tests/Validators/Rules/Url.test.js~describe315.it320",
    "access": null,
    "description": "shouldValidateAsValid",
    "lineNumber": 82
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/Validators/Validators.test.js",
    "memberof": null,
    "longname": "tests/Validators/Validators.test.js",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "content": "/**\n *  ____            __        __                ____    ______\n * /\\  _`\\         /\\ \\__  __/\\ \\__            /\\  _`\\ /\\__  _\\\n * \\ \\ \\L\\_\\    ___\\ \\ ,_\\/\\_\\ \\ ,_\\  __  __   \\ \\ \\/\\_\\/_/\\ \\/\n *  \\ \\  _\\L  /' _ `\\ \\ \\/\\/\\ \\ \\ \\/ /\\ \\/\\ \\   \\ \\ \\/_/_ \\ \\ \\\n *   \\ \\ \\L\\ \\/\\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\_\\ \\ \\_\\ \\   \\ \\ \\L\\ \\ \\_\\ \\__\n *    \\ \\____/\\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\__\\\\/`____ \\   \\ \\____/ /\\_____\\\n *     \\/___/  \\/_/\\/_/\\/__/ \\/_/\\/__/ `/___/> \\   \\/___/  \\/_____/\n *                                        /\\___/\n *                                        \\/__/\n *\n * Entity CI - Core\n */\n\nvar test = require('unit.js'),\n    loader = require('nsloader'),\n    Validators = loader('EntityCI/Validators'),\n    EUnknownValidator = loader('EntityCI/Validators/Errors/EUnknownValidator');\n\nvar sRules = Symbol.for('Validators.rules');\n\ndescribe('entity-ci/entity-ci-core/Validators', function () {\n\n  'use strict';\n\n  describe('Validators.register()', function () {\n\n    it('shouldBeAbleToRegisterNewValidator', function () {\n\n      var validators = new Validators(),\n          validator = function () {};\n\n      validators.register('test', validator);\n\n      test.array(\n        validators[sRules].test\n      ).hasLength(1).is([{\n        callback: validator,\n        weight: 0\n      }]);\n\n    });\n\n    it('shouldBeAbleToRegisterMultipleCallbacks', function () {\n\n      var validators = new Validators(),\n          validator1 = function () {},\n          validator2 = function () {},\n          validator3 = function () {};\n\n      validators\n        .register('test', validator1)\n        .register('test', validator2)\n        .register('test', validator3);\n\n      test.array(\n        validators[sRules].test\n      ).hasLength(3).is([{\n        callback: validator1,\n        weight: 0\n      }, {\n        callback: validator2,\n        weight: 0\n      }, {\n        callback: validator3,\n        weight: 0\n      }]);\n\n    });\n\n    it('multipleCallbacksShouldBeSortedByWeight', function () {\n\n      var validators = new Validators(),\n          validator1 = function () {},\n          validator2 = function () {},\n          validator3 = function () {};\n\n      validators\n        .register('test', validator1, 10)\n        .register('test', validator2, -10)\n        .register('test', validator3);\n\n      var rules = validators[sRules].test;\n      test.array(\n        rules\n      ).hasLength(3);\n\n      test.object(\n        rules[0]\n      ).is({\n        callback: validator2,\n        weight: -10\n      });\n\n      test.object(\n        rules[1]\n      ).is({\n        callback: validator3,\n        weight: 0\n      });\n\n      test.object(\n        rules[2]\n      ).is({\n        callback: validator1,\n        weight: 10\n      });\n\n    });\n\n  });\n\n  describe('Validators.registered()', function () {\n\n    it('shouldReturnFalseIfTheValidatorHasntBeenRegistered', function () {\n\n      var validators = new Validators();\n\n      test.bool(\n        validators.registered('test')\n      ).isNotTrue();\n\n    });\n\n    it('shouldReturnTrueIfValidatorHasBeenRegistered', function () {\n\n      var validators = new Validators(),\n          validator = function () {};\n\n      validators.register('test', validator);\n\n      test.bool(\n        validators.registered('test')\n      ).isTrue();\n\n    });\n\n  });\n\n  describe('Validators.unregister()', function () {\n\n    it('shouldThrowAnErrorIfValidatorDoesntExist', function () {\n\n      var validators = new Validators();\n\n      test.exception(function () {\n        validators.unregister('test');\n      }).isInstanceOf(EUnknownValidator);\n\n    });\n\n    it('shouldUnregisterAllValidators', function () {\n\n      var validators = new Validators(),\n          validator1 = function () {},\n          validator2 = function () {},\n          validator3 = function () {};\n\n      validators\n        .register('test', validator1, 10)\n        .register('test', validator2, -10)\n        .register('test', validator3);\n\n      validators.unregister('test');\n      test.value(\n        validators[sRules].test\n      ).isUndefined();\n\n    });\n\n    it('shouldUnregisterSpecifiedCallback', function () {\n\n      var validators = new Validators(),\n          validator1 = function () {},\n          validator2 = function () {},\n          validator3 = function () {};\n\n      validators\n        .register('test', validator1, 10)\n        .register('test', validator2, -10)\n        .register('test', validator3);\n\n      validators.unregister('test', validator2);\n      test.array(\n        validators[sRules].test\n      ).hasLength(2).is([{\n        callback: validator3,\n        weight: 0\n      }, {\n        callback: validator1,\n        weight: 10\n      }]);\n\n    });\n\n    it('shouldUnregisterSpecifiedCallbackDuplicates', function () {\n\n      var validators = new Validators(),\n          validator1 = function () {},\n          validator2 = function () {},\n          validator3 = function () {};\n\n      validators\n        .register('test', validator1, 10)\n        .register('test', validator2, -10)\n        .register('test', validator3)\n        .register('test', validator2, 90);\n\n      validators.unregister('test', validator2);\n      test.array(\n        validators[sRules].test\n      ).hasLength(2).is([{\n        callback: validator3,\n        weight: 0\n      }, {\n        callback: validator1,\n        weight: 10\n      }]);\n\n    });\n\n  });\n\n  describe('Validators.validate()', function () {\n\n    it('shouldThrowAnErrorIfValidatorDoesntExist', function (done) {\n\n      var validators = new Validators();\n\n      validators.validate(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(EUnknownValidator);\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldExecuteCorrectValidators', function (done) {\n\n      var validators = new Validators(),\n          v1 = false, v2 = false, v3 = false,\n          validator1 = function (value, options, next) {\n            v1 = true;\n            next();\n          },\n          validator2 = function (value, options, next) {\n            v2 = true;\n            next();\n          },\n          validator3 = function (value, options, next) {\n            v3 = true;\n            next();\n          };\n\n      validators\n        .register('test', validator1)\n        .register('test2', validator2)\n        .register('test', validator3);\n\n      validators.validate(function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.bool(\n          v1\n        ).isTrue();\n\n        test.bool(\n          v2\n        ).isNotTrue();\n\n        test.bool(\n          v3\n        ).isTrue();\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldMarkAsInvalidIfAnErrorIsSubmitted', function (done) {\n\n      var validators = new Validators(),\n          v1 = false, v2 = false, v3 = false,\n          validator1 = function (value, options, next) {\n            v1 = true;\n            next();\n          },\n          validator2 = function (value, options, next) {\n            v2 = true;\n            next(new Error());\n          },\n          validator3 = function (value, options, next) {\n            v3 = true;\n            next();\n          };\n\n      validators\n        .register('test', validator1)\n        .register('test', validator2)\n        .register('test', validator3);\n\n      validators.validate(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(Error);\n\n        test.bool(\n          v1\n        ).isTrue();\n\n        test.bool(\n          v2\n        ).isTrue();\n\n        test.bool(\n          v3\n        ).isNotTrue();\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldCaptureExceptionsAndFail', function (done) {\n\n      var validators = new Validators(),\n          v1 = false, v2 = false, v3 = false,\n          validator1 = function (value, options, next) {\n            v1 = true;\n            next();\n          },\n          validator2 = function (value, options, next) {\n            throw new Error();\n          },\n          validator3 = function (value, options, next) {\n            v3 = true;\n            next();\n          };\n\n      validators\n        .register('test', validator1)\n        .register('test', validator2)\n        .register('test', validator3);\n\n      validators.validate(function (err) {\n\n        test.object(\n          err\n        ).isInstanceOf(Error);\n\n        test.bool(\n          v1\n        ).isTrue();\n\n        test.bool(\n          v2\n        ).isNotTrue();\n\n        test.bool(\n          v3\n        ).isNotTrue();\n\n        done();\n\n      }, 'test', 'test');\n\n    });\n\n    it('shouldPassOptions', function (done) {\n\n      var validators = new Validators(),\n          v = '',\n          validator1 = function (value, options, next) {\n            v += options.opt;\n            options.opt = ' world';\n            next();\n          },\n          validator2 = function (value, options, next) {\n            v += options.opt;\n            next();\n          };\n\n      validators\n        .register('test', validator1)\n        .register('test', validator2);\n\n      validators.validate(function (err) {\n\n        test.value(\n          err\n        ).isNull();\n\n        test.string(\n          v\n        ).is('Hello world');\n\n        done();\n\n      }, 'test', 'test', {opt: 'Hello'});\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe321",
    "testId": 321,
    "memberof": "tests/Validators/Validators.test.js",
    "testDepth": 0,
    "longname": "tests/Validators/Validators.test.js~describe321",
    "access": null,
    "description": "entity-ci/entity-ci-core/Validators",
    "lineNumber": 22
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe322",
    "testId": 322,
    "memberof": "tests/Validators/Validators.test.js~describe321",
    "testDepth": 1,
    "longname": "tests/Validators/Validators.test.js~describe321.describe322",
    "access": null,
    "description": "Validators.register()",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it323",
    "testId": 323,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe322",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe322.it323",
    "access": null,
    "description": "shouldBeAbleToRegisterNewValidator",
    "lineNumber": 28
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it324",
    "testId": 324,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe322",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe322.it324",
    "access": null,
    "description": "shouldBeAbleToRegisterMultipleCallbacks",
    "lineNumber": 44
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it325",
    "testId": 325,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe322",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe322.it325",
    "access": null,
    "description": "multipleCallbacksShouldBeSortedByWeight",
    "lineNumber": 71
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe326",
    "testId": 326,
    "memberof": "tests/Validators/Validators.test.js~describe321",
    "testDepth": 1,
    "longname": "tests/Validators/Validators.test.js~describe321.describe326",
    "access": null,
    "description": "Validators.registered()",
    "lineNumber": 113
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it327",
    "testId": 327,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe326",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe326.it327",
    "access": null,
    "description": "shouldReturnFalseIfTheValidatorHasntBeenRegistered",
    "lineNumber": 115
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it328",
    "testId": 328,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe326",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe326.it328",
    "access": null,
    "description": "shouldReturnTrueIfValidatorHasBeenRegistered",
    "lineNumber": 125
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe329",
    "testId": 329,
    "memberof": "tests/Validators/Validators.test.js~describe321",
    "testDepth": 1,
    "longname": "tests/Validators/Validators.test.js~describe321.describe329",
    "access": null,
    "description": "Validators.unregister()",
    "lineNumber": 140
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it330",
    "testId": 330,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe329",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe329.it330",
    "access": null,
    "description": "shouldThrowAnErrorIfValidatorDoesntExist",
    "lineNumber": 142
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it331",
    "testId": 331,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe329",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe329.it331",
    "access": null,
    "description": "shouldUnregisterAllValidators",
    "lineNumber": 152
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it332",
    "testId": 332,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe329",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe329.it332",
    "access": null,
    "description": "shouldUnregisterSpecifiedCallback",
    "lineNumber": 171
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it333",
    "testId": 333,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe329",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe329.it333",
    "access": null,
    "description": "shouldUnregisterSpecifiedCallbackDuplicates",
    "lineNumber": 196
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe334",
    "testId": 334,
    "memberof": "tests/Validators/Validators.test.js~describe321",
    "testDepth": 1,
    "longname": "tests/Validators/Validators.test.js~describe321.describe334",
    "access": null,
    "description": "Validators.validate()",
    "lineNumber": 224
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it335",
    "testId": 335,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe334",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe334.it335",
    "access": null,
    "description": "shouldThrowAnErrorIfValidatorDoesntExist",
    "lineNumber": 226
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it336",
    "testId": 336,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe334",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe334.it336",
    "access": null,
    "description": "shouldExecuteCorrectValidators",
    "lineNumber": 242
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it337",
    "testId": 337,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe334",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe334.it337",
    "access": null,
    "description": "shouldMarkAsInvalidIfAnErrorIsSubmitted",
    "lineNumber": 288
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it338",
    "testId": 338,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe334",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe334.it338",
    "access": null,
    "description": "shouldCaptureExceptionsAndFail",
    "lineNumber": 334
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it339",
    "testId": 339,
    "memberof": "tests/Validators/Validators.test.js~describe321.describe334",
    "testDepth": 2,
    "longname": "tests/Validators/Validators.test.js~describe321.describe334.it339",
    "access": null,
    "description": "shouldPassOptions",
    "lineNumber": 379
  }
]